
//JCLOZE CORE JAVASCRIPT CODE

/* Modification Copyright (c) Michael Rottmeier, March 2005
 Find-it - Version 3.1.4a for Hot Potatoes v6
 http://www.teaching-tools.de.vu
 THIS HEADER MUST STAY UN-TOUCHED */

var Feedback = '';
var Correct = '[strCorrect]';
var Incorrect = '[strIncorrect]';
var AllErrorsFound = '[strGiveHint]';
var YourScoreIs = '[strYourScoreIs]';
var Finished = false;
var Locked = false;	// timer specific
var TimeOver = false;

I = new Array();
[strItemArray]

function StartUp(){
	RemoveBottomNavBarForIE();

[inclSendResults]
	GetUserName();
[/inclSendResults]

[inclPreloadImages]
	PreloadImages([PreloadImageList]);
[/inclPreloadImages]

	Split_Feedback();
	Build_GapText();

[inclTimer]
	StartTimer();
[/inclTimer]
}

[inclTimer]
function TimesUp() {
	document.getElementById('Timer').innerHTML = '[strTimesUp]';
[inclPreloadImages]
	RefreshImages();
[/inclPreloadImages]
	TimeOver = true;
	Finished = true;
	Locked = true;
}
[/inclTimer]


// CORE JAVASCRIPT FOR JCLOZE DROPDOWN FUNCTIONALITY

GapList = new Array();
// GapList[x][0] = clue button
// GapList[x][1] = State data
// GapList[x][2] = input component in Find-it v3.1b
var Score = 0;
var TotWrongChoices = 0;

function Create_StateArray(){
	this.ErrorFound = false;
	this.WrongGapValue = '';
}

function Build_GapText(){
	var GSpan = null;

// first, prepare the gaps
	for (var x=0; x<I.length; x++){
		GSpan = document.getElementById('GapSpan'+x);
		if (GSpan != null){
// remove the input field
			GSpan.removeChild(GSpan.getElementsByTagName('input')[0]);
// create the state stuff
			GapList.push(new Array(null, new Create_StateArray()));
// put an existing clue button into the GapList array
			if (GSpan.getElementsByTagName('button').length > 0){
				GapList[x][0] = GSpan.removeChild(GSpan.getElementsByTagName('button')[0]);
				}
// remove the </input> tag - and anything else which might be in there
			while (GSpan.childNodes.length > 0){
				GSpan.removeChild(GSpan.firstChild);
				}
// add the wrong text output
			GSpan.appendChild(Create_GapContent(x));
// store the used gap value (wrong text) for tracking purposes
			GapList[x][1].WrongGapValue = GSpan.getElementsByTagName('span')[0].firstChild.nodeValue;
			}
		}

// second, prepare the other text
	var TextBody = document.getElementById('ClozeBody'); //.getElementsByTagName('p')[0];
	TextBody = TextBody.parentNode;
	if (TextBody != null){
		for (var y=0; y<TextBody.childNodes.length; y++){
// markup the text appropriately and replace the old node with the new one
			TextBody.replaceChild(Markup_Text(TextBody.childNodes[y]), TextBody.childNodes[y]);
			}
		}
}

function Create_GapContent(GapId){
	var Gap = document.createElement('span');
	Gap.onclick = function(){CheckText(true, GapId);}
	//Gap.setAttribute("onclick", 'CheckText(true, '+GapId+')', true);
	Gap.className = 'GapSpan';
	Gap.appendChild(document.createTextNode(Get_WrongGapContent(GapId)));
	return Gap;
}

function Get_WrongGapContent(GapId){
	var ReturnVal = '';
	var Tmp = new Array();

	for (var x=0; x<(I[GapId][1].length-1); x++){
		Tmp[x] = I[GapId][1][x+1][0];
		}

	var y = Math.floor(Math.random()*Tmp.length);
	ReturnVal += Tmp[y];
	return ReturnVal;
}

function Markup_Text(Node){
	for (var x=0; x<Node.childNodes.length; x++){
//alert(Node.childNodes[x].nodeType);
		switch (Node.childNodes[x].nodeName.toLowerCase()){
			case 'span' :
					if (Node.childNodes[x].attributes.length > 0){
						if ((Node.childNodes[x].getAttribute('id').substr(0, 7) != 'GapSpan')){
							Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]);
							}
						}
				break;
			case 'div' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'p' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'strong' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'em' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'blockquote' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'pre' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'ul' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'ol' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'li' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'sup' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'sub' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'table' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'tr' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'td' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'thead' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'tbody' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'tfoot' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;

			case '#text' :
				//if (Node.childNodes.length < 1){
					//if (Node.nodeType == 3){
						if (Node.nodeValue != ''){
// add the span tag with the onclick event
							var SpanNode = document.createElement('span');
							SpanNode.className = 'GapSpan';
							SpanNode.onclick = function(){CheckText(false, -1);}
							SpanNode.appendChild(document.createTextNode(Node.childNodes[x].nodeValue));
// replace the old node with the new created node (span + text)
							Node.replaceChild(SpanNode, Node.childNodes[x]);
							}
						//}
					//}
				break;
			}
		}

	return Node;
}

// FEEDBACK ROUTINES
CFb = new Array();
IFb = new Array();

function Split_Feedback(){
// the feedback bits should look like feedb1## feedb2## feedb3 etc.
//'Correct' Feedback
	var Tmp = Correct.split('##');
	var y = -1;
	for (var x=0; x<Tmp.length; x++){
		if (TrimString(Tmp[x]) != ''){
			y++;
			CFb[y] = TrimString(Tmp[x]);
			}
		}

//'Incorrect' Feedback
	Tmp = Incorrect.split('##');
	y = -1;
	for (var x=0; x<Tmp.length; x++){
		if (TrimString(Tmp[x]) != ''){
			y++;
			IFb[y] = TrimString(Tmp[x]);
			}
		}
}

function Get_RandomFeedback(FType){
	var Stuff = '';
// positive feedback
	if (FType==true){
		var x = Math.floor(Math.random()*CFb.length);
		Stuff = CFb[x];
		}
// negative feedback
		else{
 			var x = Math.floor(Math.random()*IFb.length);
			Stuff = IFb[x];
			}
	return Stuff;
}


// CHECK ROUTINES
function CheckText(GapState,GapId){
	if (Finished == true){return;}

// chosen text is wrong:
	if (GapState==false){
// show feedback
		ShowMessage(Get_RandomFeedback(false));
// penalty
		TotWrongChoices++;
		}
// chosen text is right:
		else{
			CorrectChoice(GapId);
			}
}

function CorrectChoice(GapId){
// the state flag
	GapList[GapId][1].ErrorFound = true;

// show the gap solution
	Show_GapSolution(GapId);

	var Output = '';
// check whether exercise is finished:
// if all errors are found, show final feedback and finish exercise:
	if (CheckExStatus() == true){
		Output += AllErrorsFound;
		Finished = true;
// hotpot.net
		CompileGuesses();
		CalculateScore();
		setTimeout('Finish()', SubmissionTimeout);

[inclSendResults]
		setTimeout('SendResults(' + Score + ')', 50);
[/inclSendResults]
		}
// else show number of missing errors:
		else{
			Output += Get_RandomFeedback(true) + '<br />' + YourScoreIs + ' ' + Get_NumMissingErr();
			}

// calculate the score
	CalculateScore();
// show feedback
	if (Output.length > 1){
		Output += ' ('+Score+'%)';
		ShowMessage(Output);
		}
}

function Show_GapSolution(GapId){
// show the correct solution
	var GapSpan = document.getElementById('GapSpan'+GapId);
	if (GapSpan != null){
// remove everything in the GapSpan element
		while (GapSpan.childNodes.length > 0){
			GapSpan.removeChild(GapSpan.firstChild);
			}
// append the text node
		var StrongNode = document.createElement('strong');
		StrongNode.appendChild(document.createTextNode(I[GapId][1][0][0]+' '));
		GapSpan.appendChild(StrongNode);
// add the clue button if it exists
		if (GapList[GapId][0] != null){
// replace the button's caption
			GapList[GapId][0].firstChild.nodeValue = '[ ? ]';
			GapSpan.appendChild(GapList[GapId][0]);
			}
		}
}

function ShowClue(GapId){
	ShowMessage(I[GapId][2]);
}

function CheckExStatus(){
// checks if all errors have been found or not
	var ExFin = true;
	for (var x=0; x<GapList.length; x++){
		if (GapList[x][1].ErrorFound == false){
			ExFin = false;
			break;
			}
		}
	return ExFin;
}

function Get_NumMissingErr(){
// retrieves the number of still
// missing errors in the text
	var i = 0;
	for (var x=0; x<GapList.length; x++){
		if (GapList[x][1].ErrorFound == false){
			i++;
			}
		}
	return i;
}

function CalculateScore(){
	var x = GapList.length - Get_NumMissingErr();
// get not found mistakes if solution is shown
	if (Finished == true){
		for (var i=0; i<GapList.length; i++){
			if (GapList[i][1].ErrorFound == false){
				TotWrongChoices++;
			}
		}
	}
	if ((x+TotWrongChoices) == 0){
		Score = 0;
	}
	else{
		Score = Math.floor((x * 100)/(x + TotWrongChoices));
	}
}

[inclHint]
function ShowSolution(){
	if (Finished == true){return;}

// set the flag
	Finished = true;

// calculate the score
	CalculateScore();

// show the correct gap values
	for (var x=0; x<GapList.length; x++){
		GapList[x][1].ErrorFound = true;
		Show_GapSolution(x);
		}

// show feedback
	var Output = YourScoreIs + ' ' + Get_NumMissingErr();
// show feedback
	if (Output.length > 1){
		Output += ' ('+Score+'%)';
		ShowMessage(Output);
		}
}
[/inclHint]

// HOTPOT.NET FUNCTIONALITY
function CompileGuesses(){
	var F = document.getElementById('store');
	if (F != null){
		var Temp = '<?xml version="1.0"?><hpnetresult><fields>';
		var GapLabel = '';
//		for (var i=0; i<GapList.length; i++){
			GapLabel = 'All gaps:'; //'Gap #' + (i+1).toString();
			Temp += '<field><fieldname>' + GapLabel + '</fieldname>';
			Temp += '<fieldtype>student-responses</fieldtype><fieldlabel>' + GapLabel + '</fieldlabel>';
			Temp += '<fieldlabelid>JClozeStudentResponses</fieldlabelid><fielddata>';
			Temp += 'Total wrong choices: ' + TotWrongChoices;
  		Temp += '</fielddata></field>';
//		}
		Temp += '</fields></hpnetresult>';
		Detail = Temp;
	}
}
