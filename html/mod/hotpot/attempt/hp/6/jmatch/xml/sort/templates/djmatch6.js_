// Hot Potatoes v6.3.0.4
//***************************************************************
// modifié par Agnès Simonet
// avec l'aide et le soutien de Stan Bogdanov
// function Centrer_ligne : auteur Michael Rottmeier
// pour un JMatch_Sort v.1.4.2 (exercice de catégorisation)

//***************************************************************

// données issues de l'interface :
// F[x][y] : catégories
// D[X][Y] : items
// seront modifiées par regroupement des doublons, limitation du nombre de cartes et shuffle

// cartes (géometrie et contenu) :
// FC : cartes-titres des boites de catégorie (headings in the category boxes)
// RC : cartes-boites de catégorie
// DC : cartes à déplacer (draggable cards)

// listes :
// liste_FC : tableau des FC[i]
// liste_DC : tableau des DC[i]
// liste_RC : tableau des n° des DC droppés ou fixés dans un RC

//***************************************************************

[inclScorm1.2]
//JMATCH-SPECIFIC SCORM-RELATED JAVASCRIPT CODE

function SetScormScore(){
//Reports the current score and any other information back to the LMS
	if (API != null){
		API.LMSSetValue('cmi.core.score.raw', Score);

//Now send a detailed reports on the item
		var ItemLabel = 'Matching';
		API.LMSSetValue('cmi.objectives.0.id', 'obj'+ItemLabel);
		API.LMSSetValue('cmi.interactions.0.id', 'int'+ItemLabel);
		API.LMSSetValue('cmi.objectives.0.status', API.LMSGetValue('cmi.core.lesson_status'));
		API.LMSSetValue('cmi.objectives.0.score.min', '0');
		API.LMSSetValue('cmi.objectives.0.score.max', '100');
		API.LMSSetValue('cmi.objectives.0.score.raw', Score);
//We can only use the performance type, because we're storing multiple responses of various types.
		API.LMSSetValue('cmi.interactions.0.type', 'performance');
		API.LMSSetValue('cmi.interactions.0.student_response', AnswersTried);

		API.LMSCommit('');
	}
}
[/inclScorm1.2]

//JMATCH-SPECIFIC CORE JAVASCRIPT CODE
//***************************************************************
// variables dont on peut modifier les valeurs
// you can change those variable values
//***************************************************************

// Hauteur des boites de catégorie
// Height of the category boxes
// définie dans [strUserDefined1]
// set in [strUserDefined1]
var hauteurUserDefined1 = '[strUserDefined1]';
// si [strUserDefined1] est vide - if [strUserDefined1] is void :
// calcul automatique (taille suffisante pour tous les items correctement placés)
// (translation)
var autoHeight = 1; // comment for no auto height
// taille maximale pour accueillir tous les items
// (translation)
// var autoHeight = 0; //uncomment for no auto height

// Largeur des boites de catégorie
// Width of the category boxes
// définie dans [strUserDefined2]
// set in [strUserDefined2]
var largeurUserDefined2 = '[strUserDefined2]';
// si [strUserDefined2] est vide - if [strUserDefined2] is void :
// Largeurs identiques
// Same widths
var equiWidthFC = 1; //comment for minimal widths
// Largeur minimale pour chaque boite
// Minimal widths
// var equiWidthFC = 0; //uncomment for minimal widths

// Auto Highlight
// erreur indiquée dès que la carte est posée - 1 : oui - 0 : non
//1 (true) practice mode for auto highlight - 0 (false) test mode for no auto highlight
// définie dans [strUserDefined3]
// set in [strUserDefined3]
 var autoHighlight = '[strUserDefined3]';

// entre le bord gauche d'une boite de catégorie et les items placés
// (translation)
var spacerH = 5;
// entre cartes mobiles placées
// between dropped items
var spacerV_CDinRC = 5;
// entre le div des boutons et le titre des categories
// (translation)
var spacer_FC_ButtonDiv = 10;
// entre les lignes des cartes mobiles à placer
// between the lines of draggable items
var spacerV_DC_DC = 10;
// ecart entre la base des boites de categorie et le sommet des items à placer
// height between the bottom of the category boxes and the top of the draggable items
var DragHeight = 30;
// petit supplément de place lorsque la hauteur des boites est calculée automatiquement
// some more pixels when auto height of category boxes
var rab_RC = 0;
//***************************************************************

// fin
//***************************************************************

// variables qui seront modifiées par la suite

var LeftColPos = 100;
var RightColPos = 500;
var DragTop = 120;
var Finished = false;
var AnswersTried = '';
//***************************************************************
var NbFix = 0; //nombre de cartes pré-positionnées
var CorrectResponse = '[strGuessCorrect]';
var IncorrectResponse = '[strGuessIncorrect]';
var YourScoreIs = '[strYourScoreIs]';
var DivWidth = 600; //default value
var FeedbackWidth = 200; //default

// Liens et couleur de fond des items mal placées;
// Link colour + wrong items
var bgColorIfWrong = '[strLinkColor]';
var colorIfWrong= '[strTextColor]';

var ExBGColor = '[strExBGColor]';
var PageBGColor = '[strPageBGColor]';
var TextColor = '[strTextColor]';
var TitleColor = '[strTitleColor]';
var Penalties = 0;
//var NbFix = 0; //nombre de cartes pré-positionnées
var Score = 0;
var TimeOver = false;
var Locked = false;
var ShuffleQs = [boolShuffleQs];
var QsToShow = [QsToShow];

//***************************************************************

//Fixed and draggable card arrays
FC = new Array();
DC = new Array();
// ajouté par AS : carte réceptrice (box)
RC = new Array();
//pour le centrage des lignes
Liste_FC = new Array();
Liste_DC = new Array();
// pour le réarrangement vertical dans les cartes réceptrices
Liste_RC = new Array();

function onEndDrag(){
// modifié par AS

//La carte est-elle lâchée sur une carte réceptrice ?
	var Docked = false;
	var DropTarget = DroppedOnFixed(CurrDrag);
	//  donnera le n° de la carte d'origine sur laquelle elle était placée ou 0 sinon
	var prevtag=DC[CurrDrag].tag;

	if (DropTarget > -1) // si oui
	{
		//la mettre dans la bonne liste
		Liste_RC[DropTarget].push(CurrDrag);

		//placer la carte
		DC[CurrDrag].tag = DropTarget+1; // n°(=idx +1)de la carte sur laquelle DC est lâchée
		Positionner_DC_docked(DC[CurrDrag].tag);
		D[CurrDrag][2] = F[DropTarget][1];
		Docked = true;

		//colorer la carte si elle est mal placée (si autolight)
		if (autoHighlight == 1 ) {
			if (D[CurrDrag][2] != D[CurrDrag][1]) {
				DC[CurrDrag].HighlightIfWrong();
			}
		}

		//était-elle déjà  placée ?
		if (prevtag>0)
		{
			//supprimer de la liste d'origine
			Liste_RC[prevtag-1].splice(Liste_RC[prevtag-1].indexOf(CurrDrag),1);
			//réorganiser le contenu du RC d'où vient la carte
			Positionner_DC_docked(prevtag);
		}
	}

	if (Docked == false) // si non
	{
		DC[CurrDrag].GoHome(); // remettre à sa place d'origine
		DC[CurrDrag].tag = 0; // lâchée hors RC
		D[CurrDrag][2] = 0; // non associée à un FC
		//supprimer de la liste d'origine
		Liste_RC[prevtag-1].splice(Liste_RC[prevtag-1].indexOf(CurrDrag),1);
	}
}

// dans quelle box RC la carte mobile est-elle placée ?
// retour : index de la box ou -1 si hors carte fixe
function DroppedOnFixed(DNum){
	var Result = -1;
	var OverlapArea = 0;
	var Temp = 0;
	for (var i=0; i<RC.length; i++){
		Temp = DC[DNum].Overlap(RC[i]);
		if (Temp > OverlapArea){
			OverlapArea = Temp;
			Result = i;
		}
	}
	return Result;
}

//placement et réorganisation des cartes placées
function Positionner_DC_docked(RCNum)
{
	var newtop = RC[RCNum-1].GetT() + spacerV_CDinRC ;

	//for(var i=0;i<D.length;i++)
	for(var i=0;i<Liste_RC[RCNum-1].length;i++)
		{
			var idx_carte=Liste_RC[RCNum-1][i];
			DC[idx_carte].SetL( RC[RCNum-1].GetL() +spacerH);
			// positionnement vertical
			DC[idx_carte].SetT( newtop);
			newtop = newtop + DC[idx_carte].GetH()+spacerV_CDinRC ;
		}
}

// ************************** STARTUP **********************
function StartUp(){

[inclScorm1.2]
	ScormStartUp();
[/inclScorm1.2]

[inclSendResults]
	GetUserName();
[/inclSendResults]

[inclPreloadImages]
	PreloadImages([PreloadImageList]);
[/inclPreloadImages]

//Calculate page dimensions and positions
	pg = new PageDim();
	LeftColPos = Math.floor(pg.W*0.01); // Stan changed value to 0.01 and the containers are now centered.
	DragTop = parseInt(document.getElementById('CheckButtonDiv').offsetHeight) + parseInt(document.getElementById('CheckButtonDiv').offsetTop) + spacer_FC_ButtonDiv;

	if (C.ie){
		DragTop += 15;
	}

//Reduce array if required
	if (QsToShow < F.length){
		ReduceItems2();
	}

// ajouté par AS :
// avant shuffle
//***************************************************************
// ************ suppression des doublons de F[x][0] *************
//***************************************************************

// ajout d'un F[x][2] contenant le nombre de D correspondants (utilisé ?)
// et adaptation des n° de correspondance de D

	var NewF= new Array();
	var q=0; //index du nouveau tableau
	NewF [q]= new Array();

	for(var x=0;x<F.length;x++) // pour chaque élément de F et l'élément de même index de D
	{	stock=0;
		//recherche et stockage des doublons
		for(var i=0;i<q;i++) // on regarde les contenus déja stockées dans NewF
		{	if(F[x][0]==NewF[i][0])
			{ //si on a déjà stocké le contenu
				stock=1; // inutile de stocker
				NewF[i][2] = NewF[i][2]+1; //1 exemplaire de plus
				//modifier D[x][1]
				D[x][1] = NewF[i][1]; // nouveau n° de celle qui a été stockée précédemment
				i = q; // on s'arrête à cette 1ere valeur commune
			}
		}

		if(stock==0) // si jamais stockée
		{ 	NewF[q][0] = F[x][0]; // on stocke
			NewF[q][1] = q+1; //nouveau n°
			NewF[q][2] = 1; //1 exemplaire
			//modifier D[x][1]
			D[x][1] = NewF[q][1];

			q=q+1 // à la fin on aura un élément de trop
			NewF[q]= new Array();
		}
	}

	//supprimer le dernier NewF[q]
	NewF.pop() ;

	// reconstruire F
	F=NewF ;

	//dimensionner Liste_RC
	for (var j=0; j<F.length; j++){	Liste_RC[j] = new Array();}

// fin de l'ajout

//***************************************************************
// ************************** Shuffle ***************************
//***************************************************************

//Shuffle the items (D) if required
	if (ShuffleQs == true){
		D = Shuffle(D);
	}

//Shuffle the categories (F)
	//F = Shuffle(F);

//***************************************************************
// ************* Les cartes : définition et données *************
//***************************************************************
	var TempInt = 0;
	var DropHome = 0;
	var WidestFC = 0; // la + large des cartes FC
	var HighestFC = 0; // la + haute des cartes FC
	var CardContent = '';

// ************ Cartes fixes : définition et contenu ************
	// détermination de la plus grande hauteur
	for (var i=0; i<F.length; i++)
	{
		FC[i] = new Card('F' + i, 10);
		CardContent = F[i][0];
		FC[i].elm.innerHTML = CardContent
		if (FC[i].GetH() > HighestFC)
		{
			HighestFC = FC[i].GetH();// la plus grande hauteur
		}
		if (FC[i].GetW() > WidestFC)
		{
			WidestFC = FC[i].GetW();// la plus grande largeur
		}
	}

// ****** Cartes réceptrices RC (recevront les DC placées) ******

	// tableau R pour carte réceptrice
	// autant d'élément que F
	R = new Array();
	for (var i=0; i<F.length; i++){	R[i] = 0;}

	// Cartes réceptrices : définition et remplissage

	for (var i=0; i<F.length; i++)
	{
	RC[i] = new Card('R' + i, 10);
	CardContent = '';
	RC[i].elm.innerHTML = CardContent;
	}

// ********************* Cartes mobiles DC ***********************
	var WidestDC = 0; // sera la + large des cartes DC
	var HighestDC = 0; // sera la + haute des cartes DC
	var hauteur_totale_DC = 0;

	for (i=0; i<D.length; i++){
		// définition et contenu
		DC[i] = new Card('D' + i, 10);
		CardContent = D[i][0];
		//Fix for 6.2.5.2 problem with dragging images.
		DC[i].SetHTML(CardContent);
		DC[i].css.cursor = 'move';
		DC[i].css.backgroundColor = '[strExBGColor]'; //à modifier
		DC[i].css.color = '[strTextColor]'; //à modifier

		// détermination de la largeur du DC le plus large

		if (DC[i].GetW() > WidestDC){WidestDC = DC[i].GetW();}

		// détermination de hauteur du DC le plus haut

		if (DC[i].GetH() > HighestDC){HighestDC = DC[i].GetH();	}

		// et de la hauteur de tous les DC
			hauteur_totale_DC = hauteur_totale_DC + DC[i].GetH() + spacerV_CDinRC;

	}
		hauteur_totale_DC = hauteur_totale_DC - spacerV_CDinRC;// pas besoin d'un spacerV_CDinRC pour le dernier

	// calcul de la hauteur totale des DC corrects pour chaque boite RC
	var hauteur_total_DC_corrects =0;

	for (var i=0; i<F.length; i++){
		var hauteur_total_DC_corrects_in_RC =0;
		for (var j=0; j<D.length; j++){
			if (D[j][1] == F[i][1]) {
				hauteur_total_DC_corrects_in_RC = hauteur_total_DC_corrects_in_RC + DC[j].GetH() + spacerV_CDinRC;
			}
		if (hauteur_total_DC_corrects_in_RC > hauteur_total_DC_corrects) {hauteur_total_DC_corrects = hauteur_total_DC_corrects_in_RC - spacerV_CDinRC};
		}
	}

//***************************************************************
// **************** Les cartes : positionnement *****************
//***************************************************************

//***************** positionnement des cartes FC ****************

	var CurrColPos = LeftColPos;
	var CurrTop = DragTop;

	//largeur
	var WidestDCFC = 0;
	// qu'est-ce qui est le plus large : les DC ou les FC ?
	WidestDCFC = Math.max(WidestDC, WidestFC);

//alert('WidestFC : '+WidestFC);
//alert('WidestDC : '+WidestDC);
//alert('WidestDCFC : '+WidestDCFC);

	for (var i=0; i<F.length; i++)

	{	// hauteur
		// valeur (en pixel)définie dans strUserDefined2
		// sinon largeur minimale : la plus large des DC ou la plus large des FC + 2*spacerH
		//-12 seems to be required -- no idea why!
		if (isNaN(largeurUserDefined2)||(largeurUserDefined2=='')) { // rien de défini dans strUserDefined2
			if (equiWidthFC ==1) {FC[i].SetW(WidestDCFC-12 + 2*spacerH);} // même largeurs
			else {
				if (FC[i].GetW() < WidestDC) {
					FC[i].SetW(WidestDC-12 + 2*spacerH); // largeur minimale : WidestDC+2*spacerH
				}
			}
		}
		else {FC[i].SetW(largeurUserDefined2-12 + 2*spacerH);}  // définie dans strUserDefined2

		//mise en place sans centrage
		FC[i].SetT(CurrTop);
		FC[i].SetL(CurrColPos);
		FC[i].SetH(HighestFC-12);
		FC[i].SetHome();
		//pour carte suivante
		CurrColPos = CurrColPos + FC[i].GetW() +spacerH ;
		//pour le centrage
		Liste_FC.push(FC[i]);

	}

		//centrage des cartes FC
		Centrer_ligne(Liste_FC,0);

//***************** positionnement des cartes RC ****************

	var CurrColPos = LeftColPos;

	for (var i=0; i<R.length; i++)
	{
		//Fix for 6.2: the reduction by 12 seems to be required -- no idea why!

		RC[i].SetW(FC[i].GetW()-12);
		RC[i].SetT(FC[i].GetT() +FC[i].GetH() + 0);
		RC[i].SetL(FC[i].GetL());
		RC[i].SetHome();

		// hauteur
		// valeur (en pixel)définie dans strUserDefined1
		// sinon hauteur permettant d'accueillir tous les DC si autoHeight = 0
		// sinon hauteur permettant d'accueillir les DC corrects si autoHeight = 1
		var hauteur_max_RC = 50;
		var hauteur_RC= 50;
		hauteur_max_RC = (FC[i].GetH()-12) + hauteur_totale_DC + 0;
		if (isNaN(hauteurUserDefined1)||(hauteurUserDefined1=='')) { // rien de défini dans strUserDefined1

			if (autoHeight == 1) {hauteur_RC = hauteur_total_DC_corrects + rab_RC;} // RC peut contenir le nombre max de DC corrects + une petite marge
			else {hauteur_RC = hauteur_max_RC;} // RC peut contenir tous les items DC
		}
		else {hauteur_RC = parseInt(hauteurUserDefined1,10) ;} // une hauteur définie dans strUserDefined1

		RC[i].SetH(hauteur_RC);
		RC[i].SetHome();

	}
//**** positionnement des cartes DC (plusieurs lignes possibles)****

	CurrColPos = LeftColPos;
	// sous les FC+RC
	var Highest =0;
	Highest = HighestFC + hauteur_RC + 0;
	var DragHeightFCDC = DragHeight + Highest

	if (DragHeightFCDC<Highest ){ DragHeightFCDC = Highest;} //espacement minimal : DragHeightFCDC
	CurrTop = CurrTop + DragHeightFCDC + 12;
	for (var i=0; i<D.length; i++)
	{
		// est-ce que la carte tiendra sur la ligne ?
		// sinon aller à la ligne
		if ( (CurrColPos+ DC[i].GetW() )>=(pg.W*0.98) )
		{	CurrColPos = LeftColPos;
			CurrTop = CurrTop +  HighestDC + spacerV_DC_DC;
		}
		// mise en place
		DC[i].SetT(CurrTop);
		DC[i].SetL(CurrColPos);
		//DC[i].SetH(HighestDC-12);//
		DC[i].SetHome();
		// pour carte suivante
		CurrColPos = CurrColPos + DC[i].GetW() + spacerH; // position gauche de la carte DC suivante

		//pour le centrage
		Liste_DC.push(DC[i]);
	}
/*
*/
	//centrage des cartes DC
		Centrer_ligne(Liste_DC,0);

// fonction de centrage
// d'après Michael Rottmeier
function Centrer_ligne(CardList,idx_debut_ligne)
{
	//var divWidth = pg.W*0.890 ;
	var divWidth = pg.W ;
	var indentation = 0 ;
	var largeur_ligne = 0 ;
	var idx_carte = idx_debut_ligne;
	var top_courant = CardList[idx_carte].GetT();
	//index de la dernière carte de la ligne
	while( (idx_carte < CardList.length) && (CardList[idx_carte].GetT() == top_courant) )
	{
		idx_carte++;
	}
	//calcul du décalage gauche
	largeur_ligne = CardList[idx_carte -1].GetR() - CardList[idx_debut_ligne].GetL()  ;
	indentation = Math.floor( (pg.W - largeur_ligne)/2 );
	// positionnement centré de la ligne
	for (i=idx_debut_ligne; i<idx_carte; i++)
	{
		CardList[i].SetL( CardList[i].GetL() + indentation );
		CardList[i].SetHome();
	}
	// ligne suivante
	if (idx_carte < CardList.length)
	{
	Centrer_ligne(CardList,idx_carte);
	}

}

//***************************************************************
// Si on a coché les cases Fix dans l'interface de Jmatch
//***************************************************************

[inclSlide]
//Slide any elements that should be in position over
	// pour chaque carte mobile
	for (var idx_D=0; idx_D<D.length; idx_D++)
	{
		// est-elle à fixer ?
		if (D[idx_D][2] > 0) // si oui
		{
			DC[idx_D].tag = D[idx_D][1]; // à quoi ça sert ?
			D[idx_D][2] = D[idx_D][1];
			var LeftChange = 0;

			//où ?
			var idx_TargItem = -1;
			for (var j=0; j<F.length; j++){
				if (F[j][1] == D[idx_D][1]){
					idx_TargItem = j;
					NbFix = NbFix +1; //compteur de cartes fixées quelque soit F - pour le score
					var TopRC = RC[idx_TargItem].GetT() + spacerV_CDinRC; // en haut du RC
				}
			}

			// Ajouter le n° de la carte dans Liste_RC correspondante
			Liste_RC[idx_TargItem].push(idx_D);

			// pour le positionnement futur via la fonction Slide

			// calculer la position en hauteur
			var TargetTop = TopRC ; // pour la 1ère

			if (Liste_RC[idx_TargItem].length>1) {	//pour les suivantes

				for(var i=0;i<(Liste_RC[idx_TargItem].length-1);i++){ // jusqu'à la précédente carte
					var idx_D_in_RC = Liste_RC[idx_TargItem][i] ;
					TargetTop = TargetTop + DC[idx_D_in_RC].GetH() + spacerV_CDinRC ;
				}
			}
			var TargetWidth = RC[idx_TargItem].GetW() ;
			var TargetLeft = RC[idx_TargItem].GetL() ;

			//où est DC par rapport à RC : à droite ou à gauche ?
			if (TargetLeft < DC[idx_D].GetL()){LeftChange = -1;}  // DC à droite de FC
			else {
				if (TargetLeft > DC[idx_D].GetL()){LeftChange = 1;} // DC à gauche de FC
			}

			Slide(idx_D, TargetLeft, TargetTop, TargetWidth, LeftChange);

			D[idx_D][2] = F[idx_TargItem][1];
			DC[idx_D].tag = idx_TargItem+1; // ???

		}
	}

[/inclSlide]

[inclTimer]
	StartTimer();
[/inclTimer]
}
// ************************** fin de STARTUP **********************

[inclSlide]
function Slide(MoverNum, TargL, TargT, TargW, LeftChange)
// adaptée par AS
// TargW inutile ?
{
	// déplacer de 5 vers le haut
	var TempInt = DC[MoverNum].GetT();
	if (TempInt > TargT){
		//DC[MoverNum].SetT(TempInt - 5);
		DC[MoverNum].SetT(TempInt - 10);
	}
	// déplacer de 1 vers la droite ou la gauche selon la valeur de LeftChange
	TempInt = DC[MoverNum].GetL();
	if (TempInt != TargL){
		DC[MoverNum].SetL(TempInt + LeftChange);
	}
	//recommencer
	if ((DC[MoverNum].GetT() > TargT)||(DC[MoverNum].GetL() != TargL)){
		setTimeout('Slide('+MoverNum+','+TargL+','+TargT+','+TargW+','+LeftChange+')', 1);
	}
	else{
		DC[MoverNum].SetT(TargT);
		DC[MoverNum].SetL(TargL + spacerH);
	}
}
[/inclSlide]

// *******************************************

// *******************************************

F = new Array();
[FixedArray]

D = new Array();
[DragArray]

function ReduceItems2(){
	var ItemToDump=0;
	var j=0;
	while (F.length > QsToShow){
		ItemToDump = Math.floor(F.length*Math.random());
		for (j=ItemToDump; j<(F.length-1); j++){
			F[j] = F[j+1];
		}
		for (j=ItemToDump; j<(D.length-1); j++){
			D[j] = D[j+1];
		}
		F.length = F.length-1;
		D.length = D.length-1;
	}
}

function TimerStartUp(){
	setTimeout('StartUp()', 300);
}

function CheckAnswers(){
	if (Locked == true){return;}
//Set the default score and response
	var TotalCorrect = 0; //nombre de cartes bien placées
	Score = 0;
	var Feedback = '';

//for each fixed, check to see if the tag value for the draggable is the same as the fixed
	if (AnswersTried.length > 0){AnswersTried += ' | ';}
	var i, j;
	for (i=0; i<D.length; i++){
		if (i>0){AnswersTried += ',';}
		AnswersTried += D[i][1] + '.' + D[i][2] + '';
		if ((D[i][2] == D[i][1])&&(D[i][2] > 0)){
			TotalCorrect++;
		}
		else{
//Change made for version 6.0.3.41: don't send wrong items home,
//show them in a more conspicuous way.
				DC[i].SetL(DC[i].GetL());// ???
				DC[i].HighlightIfWrong();
		}
	}

// modifié par AS
	// ne tient pas compte des cartes pré-fixées
	// Penalties/2 pour que le score s'améliore lorsqu'on corrige une erreur

	if (D.length == NbFix){ // cas où toutes les cartes sont fixées
		Score = 0 ;
		CorrectResponse = '';
	}// cas où toutes les cartes sont fixées
	else {Score = Math.floor( (100*(TotalCorrect-NbFix-Penalties/2)) / (D.length-NbFix) );}

	var AllDone = false;

	//if (TotalCorrect == F.length) {
	if (TotalCorrect == D.length) {
		AllDone = true;
	}
//fin de modif
	if (AllDone == true){
		Feedback = YourScoreIs + ' ' + Score + '%.';
		ShowMessage(Feedback + '<br />' + CorrectResponse);
	}
	else {
		Feedback = YourScoreIs + ' ' + Score + '%.' + '<br />' + IncorrectResponse;
		ShowMessage(Feedback);
		Penalties++; // Penalty for inaccurate check
	}
//If the exercise is over, deal with that
	if ((AllDone == true)||(TimeOver == true)){
[inclSendResults]
		setTimeout('SendResults(' + Score + ')', 50);
[/inclSendResults]
[inclTimer]
		window.clearInterval(Interval);
[/inclTimer]
		TimeOver = true;
		Locked = true;
		Finished = true;
		setTimeout('Finish()', SubmissionTimeout);
		WriteToInstructions(Feedback);
	}
[inclScorm1.2]
	if (AllDone == true){
		SetScormComplete();
	}
	else{
		SetScormIncomplete();
	}
[/inclScorm1.2]
}

[inclTimer]
function TimesUp() {
	document.getElementById('Timer').innerHTML = '[strTimesUp]';
[inclPreloadImages]
	RefreshImages();
[/inclPreloadImages]
	TimeOver = true;
	CheckAnswers();
	Locked = true;
[inclScorm1.2]
	SetScormTimedOut();
[/inclScorm1.2]
}
[/inclTimer]

