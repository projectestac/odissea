{"version":3,"file":"grader.min.js","sources":["../../src/grades/grader.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This module will tie together all of the different calls the gradable module will make.\n *\n * @module     mod_forum/grades/grader\n * @copyright  2019 Andrew Nicols <andrew@nicols.co.uk>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport * as Selectors from './grader/selectors';\nimport Repository from 'mod_forum/repository';\nimport Templates from 'core/templates';\nimport * as Grader from '../local/grades/grader';\nimport Notification from 'core/notification';\nimport CourseRepository from 'core_course/repository';\nimport {relativeUrl} from 'core/url';\n\nconst templateNames = {\n    contentRegion: 'mod_forum/grades/grader/discussion/posts',\n};\n\n/**\n * Curried function with CMID set, this is then used in unified grader as a fetch a users content.\n *\n * @param {Number} cmid\n * @param {Bool} experimentalDisplayMode\n * @return {Function}\n */\nconst getContentForUserIdFunction = (cmid, experimentalDisplayMode) => (userid) => {\n    /**\n     * Given the parent function is called with the second param set execute the partially executed function.\n     *\n     * @param {Number} userid\n     */\n    return Repository.getDiscussionByUserID(userid, cmid)\n        .then(context => {\n            // Rebuild the returned data for the template.\n            context.discussions = context.discussions.map(discussionPostMapper);\n            context.experimentaldisplaymode = experimentalDisplayMode ? true : false;\n\n            return Templates.render(templateNames.contentRegion, context);\n        })\n        .catch(Notification.exception);\n};\n\n/**\n * Curried function with CMID set, this is then used in unified grader as a fetch users call.\n * The function curried fetches all users in a course for a given CMID.\n *\n * @param {Number} cmid\n * @param {Number} groupID\n * @return {Array} Array of users for a given context.\n */\nconst getUsersForCmidFunction = (cmid, groupID) => async() => {\n    const context = await CourseRepository.getUsersFromCourseModuleID(cmid, groupID);\n\n    return context.users;\n};\n\n\nconst findGradableNode = node => node.closest(Selectors.gradableItem);\n\n/**\n * For a discussion we need to manipulate it's posts to hide certain UI elements.\n *\n * @param {Object} discussion\n * @return {Array} name, id, posts\n */\nconst discussionPostMapper = (discussion) => {\n    // Map postid => post.\n    const parentMap = new Map();\n    discussion.posts.parentposts.forEach(post => parentMap.set(post.id, post));\n    const userPosts = discussion.posts.userposts.map(post => {\n        post.readonly = true;\n        post.hasreplies = false;\n        post.replies = [];\n\n        const parent = post.parentid ? parentMap.get(post.parentid) : null;\n        if (parent) {\n            parent.hasreplies = false;\n            parent.replies = [];\n            parent.readonly = true;\n            post.parentauthorname = parent.author.fullname;\n        }\n\n        return {\n            parent,\n            post\n        };\n    });\n\n    return {\n        ...discussion,\n        posts: userPosts,\n    };\n};\n\n/**\n * Launch the Grader.\n *\n * @param {HTMLElement} rootNode the root HTML element describing what is to be graded\n * @param {object} param\n * @param {bool} [param.focusOnClose=null]\n */\nconst launchWholeForumGrading = async(rootNode, {\n    focusOnClose = null,\n} = {}) => {\n    const data = rootNode.dataset;\n    const gradingPanelFunctions = await Grader.getGradingPanelFunctions(\n        'mod_forum',\n        data.contextid,\n        data.gradingComponent,\n        data.gradingComponentSubtype,\n        data.gradableItemtype\n    );\n\n    const groupID = data.group ? data.group : 0;\n\n    await Grader.launch(\n        getUsersForCmidFunction(data.cmid, groupID),\n        getContentForUserIdFunction(data.cmid, data.experimentalDisplayMode == \"1\"),\n        gradingPanelFunctions.getter,\n        gradingPanelFunctions.setter,\n        {\n            groupid: data.groupid,\n            initialUserId: data.initialuserid,\n            moduleName: data.name,\n            courseName: data.courseName,\n            courseUrl: relativeUrl('/course/view.php', {id: data.courseId}),\n            sendStudentNotifications: data.sendStudentNotifications,\n            focusOnClose,\n        }\n    );\n};\n\n/**\n * Launch the Grader.\n *\n * @param {HTMLElement} rootNode the root HTML element describing what is to be graded\n * @param {object} param\n * @param {bool} [param.focusOnClose=null]\n */\nconst launchViewGrading = async(rootNode, {\n    focusOnClose = null,\n} = {}) => {\n    const data = rootNode.dataset;\n    const gradingPanelFunctions = await Grader.getGradingPanelFunctions(\n        'mod_forum',\n        data.contextid,\n        data.gradingComponent,\n        data.gradingComponentSubtype,\n        data.gradableItemtype\n    );\n\n    await Grader.view(\n        gradingPanelFunctions.getter,\n        data.userid,\n        data.name,\n        {\n            focusOnClose,\n        }\n    );\n};\n\n/**\n * Register listeners to launch the grading panel.\n */\nexport const registerLaunchListeners = () => {\n    document.addEventListener('click', async(e) => {\n        if (e.target.matches(Selectors.launch)) {\n            const rootNode = findGradableNode(e.target);\n\n            if (!rootNode) {\n                throw Error('Unable to find a gradable item');\n            }\n\n            if (rootNode.matches(Selectors.gradableItems.wholeForum)) {\n                // Note: The preventDefault must be before any async function calls because the function becomes async\n                // at that point and the default action is implemented.\n                e.preventDefault();\n                try {\n                    await launchWholeForumGrading(rootNode, {\n                        focusOnClose: e.target,\n                    });\n                } catch (error) {\n                    Notification.exception(error);\n                }\n            } else {\n                throw Error('Unable to find a valid gradable item');\n            }\n        }\n        if (e.target.matches(Selectors.viewGrade)) {\n            e.preventDefault();\n            const rootNode = findGradableNode(e.target);\n\n            if (!rootNode) {\n                throw Error('Unable to find a gradable item');\n            }\n\n            if (rootNode.matches(Selectors.gradableItems.wholeForum)) {\n                // Note: The preventDefault must be before any async function calls because the function becomes async\n                // at that point and the default action is implemented.\n                e.preventDefault();\n                try {\n                    await launchViewGrading(rootNode, {\n                        focusOnClose: e.target,\n                    });\n                } catch (error) {\n                    Notification.exception(error);\n                }\n            } else {\n                throw Error('Unable to find a valid gradable item');\n            }\n        }\n    });\n};\n"],"names":["templateNames","getContentForUserIdFunction","cmid","experimentalDisplayMode","userid","Repository","getDiscussionByUserID","then","context","discussions","map","discussionPostMapper","experimentaldisplaymode","Templates","render","catch","Notification","exception","getUsersForCmidFunction","groupID","CourseRepository","getUsersFromCourseModuleID","users","findGradableNode","node","closest","Selectors","gradableItem","discussion","parentMap","Map","posts","parentposts","forEach","post","set","id","userPosts","userposts","readonly","hasreplies","replies","parent","parentid","get","parentauthorname","author","fullname","launchWholeForumGrading","rootNode","focusOnClose","data","dataset","Grader","getGradingPanelFunctions","contextid","gradingComponent","gradingComponentSubtype","gradableItemtype","gradingPanelFunctions","group","launch","getter","setter","groupid","initialUserId","initialuserid","moduleName","name","courseName","courseUrl","courseId","sendStudentNotifications","launchViewGrading","view","document","addEventListener","e","target","matches","Error","gradableItems","wholeForum","preventDefault","viewGrade"],"mappings":"64GA8BMA,4BACa,2CAUbC,4BAA8B,SAACC,KAAMC,gCAA4B,SAACC,eAM7DC,oBAAWC,sBAAsBF,OAAQF,MAC3CK,MAAK,SAAAC,gBAEFA,QAAQC,YAAcD,QAAQC,YAAYC,IAAIC,sBAC9CH,QAAQI,0BAA0BT,wBAE3BU,mBAAUC,OAAOd,4BAA6BQ,YAExDO,MAAMC,sBAAaC,aAWtBC,wBAA0B,SAAChB,KAAMiB,2DAAY,2JACzBC,qBAAiBC,2BAA2BnB,KAAMiB,uBAAlEX,+CAECA,QAAQc,gEAIbC,iBAAmB,SAAAC,aAAQA,KAAKC,QAAQC,UAAUC,eAQlDhB,qBAAuB,SAACiB,gBAEpBC,UAAY,IAAIC,IACtBF,WAAWG,MAAMC,YAAYC,SAAQ,SAAAC,aAAQL,UAAUM,IAAID,KAAKE,GAAIF,aAC9DG,UAAYT,WAAWG,MAAMO,UAAU5B,KAAI,SAAAwB,MAC7CA,KAAKK,UAAW,EAChBL,KAAKM,YAAa,EAClBN,KAAKO,QAAU,OAETC,OAASR,KAAKS,SAAWd,UAAUe,IAAIV,KAAKS,UAAY,YAC1DD,SACAA,OAAOF,YAAa,EACpBE,OAAOD,QAAU,GACjBC,OAAOH,UAAW,EAClBL,KAAKW,iBAAmBH,OAAOI,OAAOC,UAGnC,CACHL,OAAAA,OACAR,KAAAA,+CAKDN,gBACHG,MAAOM,aAWTW,0EAA0B,kBAAMC,2QAElC,4BADAC,aAAAA,yCAAe,wBAETC,KAAOF,SAASG,yBACcC,OAAOC,yBACvC,YACAH,KAAKI,UACLJ,KAAKK,iBACLL,KAAKM,wBACLN,KAAKO,gCALHC,qCAQAxC,QAAUgC,KAAKS,MAAQT,KAAKS,MAAQ,mBAEpCP,OAAOQ,OACT3C,wBAAwBiC,KAAKjD,KAAMiB,SACnClB,4BAA4BkD,KAAKjD,KAAsC,KAAhCiD,KAAKhD,yBAC5CwD,sBAAsBG,OACtBH,sBAAsBI,OACtB,CACIC,QAASb,KAAKa,QACdC,cAAed,KAAKe,cACpBC,WAAYhB,KAAKiB,KACjBC,WAAYlB,KAAKkB,WACjBC,WAAW,oBAAY,mBAAoB,CAAClC,GAAIe,KAAKoB,WACrDC,yBAA0BrB,KAAKqB,yBAC/BtB,aAAAA,2HAYNuB,oEAAoB,kBAAMxB,mQAE5B,4BADAC,aAAAA,yCAAe,wBAETC,KAAOF,SAASG,yBACcC,OAAOC,yBACvC,YACAH,KAAKI,UACLJ,KAAKK,iBACLL,KAAKM,wBACLN,KAAKO,gCALHC,sDAQAN,OAAOqB,KACTf,sBAAsBG,OACtBX,KAAK/C,OACL+C,KAAKiB,KACL,CACIlB,aAAAA,6JAQ2B,qBACnCyB,SAASC,iBAAiB,0DAAS,kBAAMC,sIACjCA,EAAEC,OAAOC,QAAQrD,UAAUmC,oCACrBZ,SAAW1B,iBAAiBsD,EAAEC,sCAG1BE,MAAM,6CAGZ/B,SAAS8B,QAAQrD,UAAUuD,cAAcC,4CAGzCL,EAAEM,mDAEQnC,wBAAwBC,SAAU,CACpCC,aAAc2B,EAAEC,wHAGP7D,sEAGX+D,MAAM,oDAGhBH,EAAEC,OAAOC,QAAQrD,UAAU0D,uCAC3BP,EAAEM,iBACIlC,UAAW1B,iBAAiBsD,EAAEC,uCAG1BE,MAAM,8CAGZ/B,UAAS8B,QAAQrD,UAAUuD,cAAcC,4CAGzCL,EAAEM,qDAEQV,kBAAkBxB,UAAU,CAC9BC,aAAc2B,EAAEC,0HAGP7D,sEAGX+D,MAAM"}