{"version":3,"file":"initials.min.js","sources":["../../src/searchwidget/initials.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A small dropdown to filter users within the gradebook.\n *\n * @module    core_grades/searchwidget/initials\n * @copyright 2022 Mathew May <mathew.solutions>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Pending from 'core/pending';\nimport * as Url from 'core/url';\nimport CustomEvents from \"core/custom_interaction_events\";\nimport $ from 'jquery';\n\n/**\n * Whether the event listener has already been registered for this module.\n *\n * @type {boolean}\n */\nlet registered = false;\n\n// Contain our selectors within this file until they could be of use elsewhere.\nconst selectors = {\n    pageListItem: 'page-item',\n    pageClickableItem: '.page-link',\n    activeItem: 'active',\n    formDropdown: '.initialsdropdownform',\n    parentDomNode: '.initials-selector',\n    firstInitial: 'firstinitial',\n    lastInitial: 'lastinitial',\n    initialBars: '.initialbar', // Both first and last name use this class.\n    targetButton: 'initialswidget',\n    formItems: {\n        type: 'submit',\n        save: 'save',\n        cancel: 'cancel'\n    }\n};\n\n/**\n * Our initial hook into the module which will eventually allow us to handle the dropdown initials bar form.\n *\n * @param {String} callingLink The link to redirect upon form submission.\n * @param {Null|Number} gpr_userid The user id to filter by.\n * @param {Null|String} gpr_search The search value to filter by.\n */\nexport const init = (callingLink, gpr_userid = null, gpr_search = null) => {\n    if (registered) {\n        return;\n    }\n    const pendingPromise = new Pending();\n    registerListenerEvents(callingLink, gpr_userid, gpr_search);\n    // BS events always bubble so, we need to listen for the event higher up the chain.\n    $(selectors.parentDomNode).on('shown.bs.dropdown', () => {\n        document.querySelector(selectors.pageClickableItem).focus({preventScroll: true});\n    });\n    pendingPromise.resolve();\n    registered = true;\n};\n\n/**\n * Register event listeners.\n *\n * @param {String} callingLink The link to redirect upon form submission.\n * @param {Null|Number} gpr_userid The user id to filter by.\n * @param {Null|String} gpr_search The search value to filter by.\n */\nconst registerListenerEvents = (callingLink, gpr_userid = null, gpr_search = null) => {\n    const events = [\n        'click',\n        CustomEvents.events.activate,\n        CustomEvents.events.keyboardActivate\n    ];\n    CustomEvents.define(document, events);\n\n    // Register events.\n    events.forEach((event) => {\n        document.addEventListener(event, (e) => {\n            // Always fetch the latest information when we click as state is a fickle thing.\n            let {firstActive, lastActive, sifirst, silast} = onClickVariables();\n            let itemToReset = '';\n\n            // Prevent the usual form behaviour.\n            if (e.target.closest(selectors.formDropdown)) {\n                e.preventDefault();\n            }\n\n            // Handle the state of active initials before form submission.\n            if (e.target.closest(`${selectors.formDropdown} .${selectors.pageListItem}`)) {\n                // Ensure the li items don't cause weird clicking emptying out the form.\n                if (e.target.classList.contains(selectors.pageListItem)) {\n                    return;\n                }\n\n                const initialsBar = e.target.closest(selectors.initialBars); // Find out which initial bar we are in.\n\n                // We want to find the current active item in the menu area the user selected.\n                // We also want to fetch the raw item out of the array for instant manipulation.\n                if (initialsBar.classList.contains(selectors.firstInitial)) {\n                    sifirst = e.target;\n                    itemToReset = firstActive;\n                } else {\n                    silast = e.target;\n                    itemToReset = lastActive;\n                }\n                swapActiveItems(itemToReset, e);\n            }\n\n            // Handle form submissions.\n            if (e.target.closest(`${selectors.formDropdown}`) && e.target.type === selectors.formItems.type) {\n                if (e.target.dataset.action === selectors.formItems.save) {\n                    // Ensure we strip out the value (All) as it messes with the PHP side of the initials bar.\n                    // Then we will redirect the user back onto the page with new filters applied.\n                    const params = {\n                        'id': e.target.closest(selectors.formDropdown).dataset.courseid,\n                        'gpr_search': gpr_search !== null ? gpr_search : '',\n                        'sifirst': sifirst.parentElement.classList.contains('initialbarall') ? '' : sifirst.value,\n                        'silast': silast.parentElement.classList.contains('initialbarall') ? '' : silast.value,\n                    };\n                    if (gpr_userid !== null) {\n                        params.gpr_userid = gpr_userid;\n                    }\n                    window.location = Url.relativeUrl(callingLink, params);\n                }\n                if (e.target.dataset.action === selectors.formItems.cancel) {\n                    $(`.${selectors.targetButton}`).dropdown('toggle');\n                }\n            }\n        });\n    });\n};\n\n/**\n * A small abstracted helper function which allows us to ensure we have up-to-date lists of nodes.\n *\n * @returns {{firstActive: HTMLElement, lastActive: HTMLElement, sifirst: ?String, silast: ?String}}\n */\nconst onClickVariables = () => {\n    // Ensure we have an up-to-date initials bar.\n    const firstItems = [...document.querySelectorAll(`.${selectors.firstInitial} li`)];\n    const lastItems = [...document.querySelectorAll(`.${selectors.lastInitial} li`)];\n    const firstActive = firstItems.filter((item) => item.classList.contains(selectors.activeItem))[0];\n    const lastActive = lastItems.filter((item) => item.classList.contains(selectors.activeItem))[0];\n    // Ensure we retain both of the selections from a previous instance.\n    let sifirst = firstActive.querySelector(selectors.pageClickableItem);\n    let silast = lastActive.querySelector(selectors.pageClickableItem);\n    return {firstActive, lastActive, sifirst, silast};\n};\n\n/**\n * Given we are provided the old li and current click event, swap around the active properties.\n *\n * @param {HTMLElement} itemToReset\n * @param {Event} e\n */\nconst swapActiveItems = (itemToReset, e) => {\n    itemToReset.classList.remove(selectors.activeItem);\n    itemToReset.querySelector(selectors.pageClickableItem).ariaCurrent = false;\n\n    // Set the select item as the current item.\n    const itemToSetActive = e.target.parentElement;\n    itemToSetActive.classList.add(selectors.activeItem);\n    e.target.ariaCurrent = true;\n};\n"],"names":["registered","selectors","type","save","cancel","callingLink","gpr_userid","gpr_search","pendingPromise","Pending","registerListenerEvents","on","document","querySelector","focus","preventScroll","resolve","events","CustomEvents","activate","keyboardActivate","define","forEach","event","addEventListener","e","firstActive","lastActive","sifirst","silast","onClickVariables","itemToReset","target","closest","preventDefault","classList","contains","swapActiveItems","dataset","action","params","courseid","parentElement","value","window","location","Url","relativeUrl","dropdown","firstItems","querySelectorAll","lastItems","filter","item","remove","ariaCurrent","add"],"mappings":";;;;;;;44BAiCIA,YAAa,QAGXC,uBACY,YADZA,4BAEiB,aAFjBA,qBAGU,SAHVA,uBAIY,wBAJZA,wBAKa,qBALbA,uBAMY,eANZA,sBAOW,cAPXA,sBAQW,cARXA,uBASY,iBATZA,oBAUS,CACPC,KAAM,SACNC,KAAM,OACNC,OAAQ,wBAWI,SAACC,iBAAaC,kEAAa,KAAMC,kEAAa,QAC1DP,wBAGEQ,eAAiB,IAAIC,iBAC3BC,uBAAuBL,YAAaC,WAAYC,gCAE9CN,yBAAyBU,GAAG,qBAAqB,KAC/CC,SAASC,cAAcZ,6BAA6Ba,MAAM,CAACC,eAAe,OAE9EP,eAAeQ,UACfhB,YAAa,SAUXU,uBAAyB,SAACL,iBAAaC,kEAAa,KAAMC,kEAAa,WACnEU,OAAS,CACX,QACAC,mCAAaD,OAAOE,SACpBD,mCAAaD,OAAOG,qDAEXC,OAAOT,SAAUK,QAG9BA,OAAOK,SAASC,QACZX,SAASY,iBAAiBD,OAAQE,QAE1BC,YAACA,YAADC,WAAcA,WAAdC,QAA0BA,QAA1BC,OAAmCA,QAAUC,mBAC7CC,YAAc,MAGdN,EAAEO,OAAOC,QAAQhC,yBACjBwB,EAAES,iBAIFT,EAAEO,OAAOC,kBAAWhC,oCAA2BA,yBAA2B,IAEtEwB,EAAEO,OAAOG,UAAUC,SAASnC,+BAIZwB,EAAEO,OAAOC,QAAQhC,uBAIrBkC,UAAUC,SAASnC,yBAC/B2B,QAAUH,EAAEO,OACZD,YAAcL,cAEdG,OAASJ,EAAEO,OACXD,YAAcJ,YAElBU,gBAAgBN,YAAaN,MAI7BA,EAAEO,OAAOC,kBAAWhC,0BAA6BwB,EAAEO,OAAO9B,OAASD,oBAAoBC,KAAM,IACzFuB,EAAEO,OAAOM,QAAQC,SAAWtC,oBAAoBE,KAAM,OAGhDqC,OAAS,IACLf,EAAEO,OAAOC,QAAQhC,wBAAwBqC,QAAQG,oBAC1B,OAAflC,WAAsBA,WAAa,WACtCqB,QAAQc,cAAcP,UAAUC,SAAS,iBAAmB,GAAKR,QAAQe,aAC1Ed,OAAOa,cAAcP,UAAUC,SAAS,iBAAmB,GAAKP,OAAOc,OAElE,OAAfrC,aACAkC,OAAOlC,WAAaA,YAExBsC,OAAOC,SAAWC,IAAIC,YAAY1C,YAAamC,QAE/Cf,EAAEO,OAAOM,QAAQC,SAAWtC,oBAAoBG,uCAC1CH,yBAA0B+C,SAAS,kBAYvDlB,iBAAmB,WAEfmB,WAAa,IAAIrC,SAASsC,4BAAqBjD,gCAC/CkD,UAAY,IAAIvC,SAASsC,4BAAqBjD,+BAC9CyB,YAAcuB,WAAWG,QAAQC,MAASA,KAAKlB,UAAUC,SAASnC,wBAAuB,GACzF0B,WAAawB,UAAUC,QAAQC,MAASA,KAAKlB,UAAUC,SAASnC,wBAAuB,OAEzF2B,QAAUF,YAAYb,cAAcZ,6BACpC4B,OAASF,WAAWd,cAAcZ,mCAC/B,CAACyB,YAAAA,YAAaC,WAAAA,WAAYC,QAAAA,QAASC,OAAAA,SASxCQ,gBAAkB,CAACN,YAAaN,KAClCM,YAAYI,UAAUmB,OAAOrD,sBAC7B8B,YAAYlB,cAAcZ,6BAA6BsD,aAAc,EAG7C9B,EAAEO,OAAOU,cACjBP,UAAUqB,IAAIvD,sBAC9BwB,EAAEO,OAAOuB,aAAc"}