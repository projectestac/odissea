define("core_ai/policy",["exports","./repository"],(function(_exports,_repository){function _classStaticPrivateFieldSpecGet(receiver,classConstructor,descriptor){return function(receiver,classConstructor){if(receiver!==classConstructor)throw new TypeError("Private static access of wrong provenance")}(receiver,classConstructor),function(descriptor,action){if(void 0===descriptor)throw new TypeError("attempted to "+action+" private static field before its declaration")}(descriptor,"get"),function(receiver,descriptor){if(descriptor.get)return descriptor.get.call(receiver);return descriptor.value}
/**
   * The Javascript module to handle the policy acceptance.
   *
   * @module     core_ai/policy
   * @copyright  2024 Andrew Lyons <andrew@nicols.co.uk>
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */(receiver,descriptor)}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0;class _class{static preconfigurePolicyState(userid,state){_classStaticPrivateFieldSpecGet(this,_class,_policyAcceptedFor).hasOwnProperty(userid)||(_classStaticPrivateFieldSpecGet(this,_class,_policyAcceptedFor)[userid]=state)}static async getPolicyStatus(userid){if(_classStaticPrivateFieldSpecGet(this,_class,_policyAcceptedFor)[userid])return _classStaticPrivateFieldSpecGet(this,_class,_policyAcceptedFor)[userid];const accepted=await(0,_repository.getPolicyStatus)(userid);return _classStaticPrivateFieldSpecGet(this,_class,_policyAcceptedFor)[userid]=accepted.status,accepted.status}static acceptPolicy(){return _classStaticPrivateFieldSpecGet(this,_class,_policyAcceptedFor)[M.cfg.userId]=!0,(0,_repository.setPolicyStatus)(M.cfg.contextid)}}_exports.default=_class;var _policyAcceptedFor={writable:!0,value:{}};return _exports.default}));

//# sourceMappingURL=policy.min.js.map