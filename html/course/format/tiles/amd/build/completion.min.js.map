{"version":3,"file":"completion.min.js","sources":["../src/completion.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/* eslint space-before-function-paren: 0 */\n\n/**\n * Load the format_tiles JavaScript for the course edit settings page /course/edit.php?id=xxx\n *\n * @module      format_tiles/completion\n * @copyright   2018 David Watson {@link http://evolutioncode.uk}\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine([\"jquery\", \"core/templates\", \"core/config\", \"core/ajax\", \"core/str\", \"core_course/manual_completion_toggle\"],\n    function ($, Templates, config, ajax, str, coreManualCompletion) {\n        \"use strict\";\n\n        var courseId;\n        const dataKeys = {\n            cmid: \"data-cmid\",\n            numberComplete: \"data-numcomplete\",\n            numberOutOf: \"data-numoutof\",\n            section: \"data-section\",\n            completionState: \"data-toggletype\"\n        };\n\n        const Selector = {\n            pageContent: \"#page-content\",\n            regionMain: \"#region-main\",\n            resourceModule: '.activity.resource',\n            completeonevent: \".completeonevent\",\n            activity: \"li.activity\",\n            section: \"li.section.main\",\n            toggleCompletionSubtile: '[data-action=\"tiles-toggle-manual-completion-subtile\"]',\n            tileNumber: \"#tile-\",\n            progressIndicatorSecNumber: '#tileprogress-',\n            tile: '.tile',\n            spacer: '.spacer',\n            availabilityinfo: '.availabilityinfo',\n            sectionId: '#section-'\n        };\n\n        /**\n         * When completion is changed it may be necessary to re-render a progress indicator.\n         * This helps assemble the data.\n         * @param {number} tileNumber which tile is this for\n         * @param {number} numComplete how many items has the user completed\n         * @param {number} outOf how many items are there to complete\n         * @param {boolean} asPercent should we show this as a percentage\n         * @returns {{}}\n         */\n        var progressTemplateData = function (tileNumber, numComplete, outOf, asPercent) {\n            var data = {\n                tileid: tileNumber,\n                numComplete: numComplete,\n                numOutOf: outOf,\n                showAsPercent: asPercent,\n                percent: outOf > 0 ? Math.round(numComplete / outOf * 100) : 0,\n                percentCircumf: 106.8,\n                percentOffset: outOf > 0 ? Math.round(((outOf - numComplete) / outOf) * 106.8) : 0,\n                isComplete: false,\n                isSingleDigit: false,\n                hastilephoto: $(Selector.tileNumber + tileNumber).hasClass(\"phototile\"),\n            };\n            if (tileNumber === 0) {\n               data.isOverall = 1;\n            } else {\n                data.isOverall = 0;\n            }\n            if (outOf > 0 && numComplete >= outOf) {\n                data.isComplete = true;\n            }\n            if (data.percent < 10) {\n                data.isSingleDigit = true;\n            }\n            return data;\n        };\n\n        /**\n         * When a progress change happens, e.g. an item is marked as complete or not, this fires.\n         * It changes the current tile's progress up or down by 1 according to the progressChange arg.\n         * @param {int} sectionNum the number of this tile/section.\n         * @param {object} tileProgressIndicator the indicator for this tile\n         * @param {int} newTileProgressValue the new value\n         */\n        var changeProgressIndicatorSection = function(sectionNum, tileProgressIndicator, newTileProgressValue) {\n            if (newTileProgressValue < 0 || newTileProgressValue > tileProgressIndicator.attr(dataKeys.numberOutOf)) {\n                // If we are already at zero, do not reduce.  May happen rarely if user presses repeatedly.\n                // Will not cause a long term issue as will be resolved when user refreshes page.\n                return;\n            }\n\n            if (!sectionNum) {\n                // Section zero doesn't have a section progress indicator.\n                return;\n            }\n\n            // Render and replace the progress indicator for *this tile*.\n            Templates.render(\"format_tiles/progress\", progressTemplateData(\n                sectionNum,\n                newTileProgressValue,\n                parseInt(tileProgressIndicator.attr(dataKeys.numberOutOf)),\n                tileProgressIndicator.hasClass(\"percent\")\n            )).done(function (html) {\n                // Need to repeat jquery selector as it is being replaced (replacwith).\n                tileProgressIndicator.replaceWith(html);\n\n            });\n        };\n\n        const setOverallProgressIndicator = function(newValue, outOf) {\n            // Render and replace the *overall* progress indicator for the *whole course*.\n            Templates.render(\"format_tiles/progress\", progressTemplateData(\n                0, newValue, outOf, true\n            )).done(function (html) {\n                $(\"#tileprogress-0\").replaceWith(html).fadeOut(0).animate({opacity: 1}, 500);\n            });\n        };\n\n        /**\n         * Trigger an event so that other JS modules can be notified to check completion status.\n         * Used to refresh section contents when completion is checked.\n         * Can also be used by other components e.g. blocks that show completion.\n         * @param {number} sectionNum the number of the section where completion changed.\n         * @param {number} cmId the course module where completion changed.\n         */\n        const triggerCompletionChangedEvent = function (sectionNum, cmId) {\n            if (sectionNum > 0 || cmId > 0) {\n                const data = {courseid: courseId, section: sectionNum, cmid: cmId};\n                $(document).trigger('format-tiles-completion-changed', data);\n            }\n        };\n\n        /**\n         * If we have called format_tiles_get_section_information then we need to add the result to the DOM.\n         * @param {array} sections the section in\n         * @param {number} overallcomplete how many activities complete in the section overall\n         * @param {number}overalloutof how many activities in the section overall\n         */\n        const updateSectionsInfo = function(sections, overallcomplete, overalloutof) {\n            sections.forEach(sec => {\n                if (sec.sectionnum > 0) {\n                    const tile = $(Selector.tileNumber + sec.sectionnum);\n                    // If this tile is now unrestricted / visible, give it the right classes.\n                    if (sec.isavailable && tile.hasClass('tile-restricted')) {\n                        tile.removeClass('tile-restricted');\n                    } else if (!sec.isavailable) {\n                        tile.addClass('tile-restricted');\n                    }\n                    if (sec.isclickable && !tile.hasClass('tile-clickable')) {\n                        tile.addClass('tile-clickable');\n                    } else if (!sec.isclickable && tile.hasClass('tile-clickable')) {\n                        tile.removeClass('tile-clickable');\n                    }\n                    if (sec.iscomplete) {\n                        tile.addClass('is-complete');\n                    } else {\n                        tile.removeClass('is-complete');\n                    }\n                    // Now re-render the progress indicator if necessary with correct data.\n                    // There may not be a progress indicator e.g. if tile contains no trackable activities.\n                    const progressIndicator = $(Selector.progressIndicatorSecNumber + (sec.sectionnum).toString());\n                    if (progressIndicator.length) {\n                        changeProgressIndicatorSection(sec.sectionnum, progressIndicator, sec.numcomplete);\n                    }\n\n                    // Finally change or re-render the availability message if necessary.\n                    const availabilityInfoDiv = tile.find(Selector.availabilityinfo);\n                    if (availabilityInfoDiv.length > 0 && sec.isavailable && !sec.availabilitymessage) {\n                        // Display no message any more.\n                        availabilityInfoDiv.fadeOut();\n                    } else if (!sec.isavailable && sec.availabilitymessage) {\n                        // Sec is not available and we have a message to display.\n                        if (availabilityInfoDiv.length > 0) {\n                            availabilityInfoDiv.html = 'NEW' + sec.availabilitymessage;\n                            availabilityInfoDiv.fadeIn();\n                        } else {\n                            Templates.render(\"format_tiles/availability_info\", {\n                                availabilitymessage: sec.availabilitymessage,\n                                visible: true\n                            }).done(function (html) {\n                                // Need to repeat jquery selector as it is being replaced (replacwith).\n                                progressIndicator.replaceWith(html);\n\n                            });\n                        }\n                    }\n                }\n            });\n            setOverallProgressIndicator(overallcomplete, overalloutof);\n        };\n\n        /**\n         * Sometimes we must check the availability and completion status of/some all tiles using AJAX.\n         * This might happen if for example a tile expands and some embedded activities are then complete.\n         * Other tiles might use the completion of a previous tile for their availability.\n         * This especially applies if teh H5P filter is being used to display embedded H5P in labels.\n         * @param {Number[]} sectionNums\n         */\n        var updateTileInformation = function (sectionNums) {\n            if (sectionNums === undefined) {\n                // Use all sections if no arg.\n                sectionNums = $(Selector.tile).not(Selector.spacer).map((i, t) => {\n                    return parseInt($(t).attr(dataKeys.section));\n                }).toArray();\n            }\n            ajax.call([{\n                methodname: \"format_tiles_get_section_information\",\n                args: {\n                    courseid: courseId,\n                    sectionnums: sectionNums\n                }\n            }])[0].done((res) => {\n                    updateSectionsInfo(res.sections, res.overall.complete, res.overall.outof);\n                })\n                .fail(err => {\n                    require([\"core/log\"], function(log) {\n                        log.debug(\n                            \"Failed to get section information to check completion status of section\"\n                        );\n                        log.debug(err);\n                    });\n                });\n        };\n\n        return {\n            init: function (courseIdInit) {\n                courseId = courseIdInit;\n                $(document).ready(function () {\n                    var loadingString = '...';\n                    str.get_strings([{key: \"loading\", component: \"format_tiles\"}]).done(function (s) {\n                        loadingString = s[0] + '  ...';\n                    });\n                    // Included like this so that later dynamically added boxes are covered.\n                    // We only need to handle this here for subtiles.\n                    // Regular course modules use data-action=\"toggle-manual-completion\" instead which triggers core.\n                    $(\"body\").on(\"click\", Selector.toggleCompletionSubtile, function (e) {\n                        // If this is a subtile, replace button with a spinner pending reload of activities over JS.\n                        // Otherwise the core JS will replace with its own with different style.\n                        // See core_course/manual_completion_toggle.\n                        const currentTarget = $(e.currentTarget);\n                        const section = currentTarget.closest('li.section');\n                        currentTarget.replaceWith(\n                            '<span class=\"completionspinner spinner-grow spinner-grow-sm text-secondary mt-2 mr-2\"'\n                            + ' role=\"status\"><span class=\"sr-only\">' + loadingString + '</span></span>'\n                        );\n                        const cmId = parseInt(currentTarget.data('cmid'));\n                        ajax.call([{\n                            methodname: \"core_completion_update_activity_completion_status_manually\",\n                            args: {cmid: cmId, completed: currentTarget.data('complete') !== 1}\n                        }])[0].done((res) => {\n                            if (res.status === true) {\n                                triggerCompletionChangedEvent(parseInt(section.attr('data-section')), cmId);\n                            }\n                        });\n\n                        // If this is in a modal header, trigger refresh of the main window completion too.\n                        if (currentTarget.closest('.embed-module-buttons').length !== 0) {\n                            const cmId = currentTarget.data('cmid');\n                            const sectionNum = $('li#module-' + cmId).closest(Selector.section).attr(dataKeys.section);\n                            triggerCompletionChangedEvent(\n                                sectionNum ? parseInt(sectionNum) : 0, cmId ? parseInt(cmId) : 0\n                            );\n                        }\n                    });\n\n                    var pageContent = $(\"#page-content\");\n                    if (pageContent.length === 0) {\n                        // Some themes e.g. RemUI do not have a #page-content div, so use #region-main.\n                        pageContent = $(\"#region-main\");\n                    }\n\n                    // If an activity with an \"onclick\" attribute is clicked, this means core is launching an activity pop up.\n                    $('li.section a').on('click', function(e) {\n                        const target = $(e.target);\n                        const isCorePopUp = target.attr('onclick')\n                            && target.attr('onclick').indexOf('window.open') === 0;\n                        if (isCorePopUp) {\n                            const cm = target.closest('li.activity');\n                            if (cm.hasClass('completion-view')) {\n                                const section = (target.closest('li.section')).data('section');\n                                triggerCompletionChangedEvent(section, cm.data('cmid'));\n                            }\n                        }\n                    });\n\n                    // When behat tests are running, for whatever reason core completion is not initialised, so we do it here.\n                    coreManualCompletion.init();\n                });\n            },\n            /**\n             *\n             * @param {number} sectionNum\n             * @param {number} cmid\n             */\n            triggerCompletionChangedEvent: function(sectionNum, cmid) {\n                triggerCompletionChangedEvent(sectionNum, cmid);\n            },\n            updateTileInformation: function(sectionNumbers) {\n                try {\n                    updateTileInformation(sectionNumbers);\n                } catch (err) {\n                    require([\"core/log\"], function(log) {\n                        log.debug(err);\n                    });\n                }\n            },\n            updateSectionsInfo: function(sections, overallcomplete, overalloutof) {\n                updateSectionsInfo(sections, overallcomplete, overalloutof);\n            }\n        };\n    }\n);\n"],"names":["define","$","Templates","config","ajax","str","coreManualCompletion","courseId","dataKeys","Selector","progressTemplateData","tileNumber","numComplete","outOf","asPercent","data","tileid","numOutOf","showAsPercent","percent","Math","round","percentCircumf","percentOffset","isComplete","isSingleDigit","hastilephoto","hasClass","isOverall","triggerCompletionChangedEvent","sectionNum","cmId","courseid","section","cmid","document","trigger","updateSectionsInfo","sections","overallcomplete","overalloutof","newValue","forEach","sec","sectionnum","tile","isavailable","removeClass","addClass","isclickable","iscomplete","progressIndicator","toString","length","tileProgressIndicator","newTileProgressValue","numcomplete","attr","render","parseInt","done","html","replaceWith","availabilityInfoDiv","find","availabilitymessage","fadeOut","fadeIn","visible","animate","opacity","init","courseIdInit","ready","loadingString","get_strings","key","component","s","on","e","currentTarget","closest","call","methodname","args","completed","res","status","pageContent","target","indexOf","cm","updateTileInformation","sectionNumbers","undefined","sectionNums","not","map","i","t","toArray","sectionnums","overall","complete","outof","fail","err","require","log","debug"],"mappings":"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"}