{"version":3,"file":"completion.min.js","sources":["../src/completion.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/* eslint space-before-function-paren: 0 */\n\n/**\n * Load the format_tiles JavaScript for the course edit settings page /course/edit.php?id=xxx\n *\n * @module      format_tiles/completion\n * @copyright   2018 David Watson {@link http://evolutioncode.uk}\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine([\"jquery\", \"core/templates\", \"core/config\", \"core/ajax\", \"core/str\", \"core_course/manual_completion_toggle\"],\n    function ($, Templates, config, ajax, str, coreManualCompletion) {\n        \"use strict\";\n\n        var courseId;\n\n        const Selector = {\n            pageContent: \"#page-content\",\n            regionMain: \"#region-main\",\n            resourceModule: '.activity.resource',\n            completeonevent: \".completeonevent\",\n            activity: \"li.activity\",\n            section: \"li.section.main\",\n            toggleCompletionSubtile: '[data-action=\"tiles-toggle-manual-completion-subtile\"]',\n            tileNumber: \"#tile-\",\n            progressIndicatorSecNumber: '#tileprogress-',\n            tile: '.tile',\n            spacer: '.spacer',\n            availabilityinfo: '.availabilityinfo',\n            sectionId: '#section-'\n        };\n\n        const isRTL = $('html').css('direction') === 'rtl';\n\n        /**\n         * Set new values for a given progress indicator to the element in the DOM.\n         * @param {number} sectionNumber\n         * @param {number} numComplete\n         * @param {number} numOutOf\n         */\n        const setProgressIndicator = function(sectionNumber, numComplete, numOutOf) {\n            if (!numOutOf || numComplete < 0) {\n                // If we are already at zero, do not reduce.  May happen rarely if user presses repeatedly.\n                // Will not cause a long term issue as will be resolved when user refreshes page.\n                return;\n            }\n            const tileProgressIndicator = $('#tileprogress-' + sectionNumber);\n            if (tileProgressIndicator.length) {\n                const percent = numOutOf > 0 ? Math.round(numComplete / numOutOf * 100) : 0;\n                tileProgressIndicator.attr('data-numcomplete', numComplete);\n                tileProgressIndicator.attr('data-numoutof', numOutOf);\n                tileProgressIndicator.find('.num-complete').html(numComplete);\n                tileProgressIndicator.find('.num-out-of').html(numOutOf);\n                tileProgressIndicator.find('.percent-complete').html(percent);\n\n                // If we have an SVG radial progress indicator, change it.\n                tileProgressIndicator.find('svg circle.partial')\n                    .attr(\n                        'stroke-dashoffset',\n                        numOutOf > 0 ? Math.round(((numOutOf - numComplete) / numOutOf) * 106.8) : 0\n                    );\n                const svgX = isRTL ? (percent < 10 ? 25 : 30) : (percent < 10 ? 15 : 10);\n                tileProgressIndicator.find('svg text')\n                    .html(percent)\n                    .attr('x', svgX);\n\n                str.get_strings([{\n                    key: \"progresstitle\",\n                    component: \"format_tiles\",\n                    param: {\n                        numOutOf: numOutOf, numComplete: numComplete, percent: percent\n                    }\n                }]).done(function (s) {\n                    tileProgressIndicator.prop('title', s[0]);\n                    $('#tile-' + sectionNumber).find('.completion-bar')\n                        .css('width', `${percent}%`)\n                        .attr('title', s[0]);\n                });\n\n                if (sectionNumber === 0) {\n                    const overallProgressOuter = $('#tiles-overall-progress-outer');\n                    if (percent === 100) {\n                        overallProgressOuter.addClass('is-complete');\n                    } else {\n                        overallProgressOuter.removeClass('is-complete');\n                    }\n                }\n            }\n        };\n\n        /**\n         * Trigger an event so that other JS modules can be notified to check completion status.\n         * Used to refresh section contents when completion is checked.\n         * Can also be used by other components e.g. blocks that show completion.\n         * @param {number} sectionNum the number of the section where completion changed.\n         * @param {number} cmId the course module where completion changed.\n         */\n        const triggerCompletionChangedEvent = function (sectionNum, cmId) {\n            if (sectionNum > 0 || cmId > 0) {\n                const data = {courseid: courseId, section: sectionNum, cmid: cmId};\n                $(document).trigger('format-tiles-completion-changed', data);\n            }\n        };\n\n        /**\n         * If we have called format_tiles_get_section_information then we need to add the result to the DOM.\n         * @param {array} sections the section in\n         * @param {number} overallcomplete how many activities complete in the section overall\n         * @param {number} overalloutof how many activities in the section overall\n         */\n        const updateSectionsInfo = function(sections, overallcomplete, overalloutof) {\n            sections.forEach(sec => {\n                if (sec.sectionnum > 0) {\n                    const tile = $(Selector.tileNumber + sec.sectionnum);\n                    // If this tile is now unrestricted / visible, give it the right classes.\n                    if (sec.isavailable && tile.hasClass('tile-restricted')) {\n                        tile.removeClass('tile-restricted');\n                    } else if (!sec.isavailable) {\n                        tile.addClass('tile-restricted');\n                    }\n                    if (sec.isclickable && !tile.hasClass('tile-clickable')) {\n                        tile.addClass('tile-clickable');\n                    } else if (!sec.isclickable && tile.hasClass('tile-clickable')) {\n                        tile.removeClass('tile-clickable');\n                    }\n                    if (sec.iscomplete) {\n                        tile.addClass('is-complete');\n                    } else {\n                        tile.removeClass('is-complete');\n                    }\n\n                    // There may not be a progress indicator e.g. if tile contains no trackable activities.\n                    setProgressIndicator(sec.sectionnum, sec.numcomplete, sec.numoutof);\n\n                    // Finally change or re-render the availability message if necessary.\n                    const availabilityInfoDiv = tile.find(Selector.availabilityinfo);\n                    if (availabilityInfoDiv.length > 0 && sec.isavailable && !sec.availabilitymessage) {\n                        // Display no message any more.\n                        availabilityInfoDiv.fadeOut();\n                    } else if (!sec.isavailable && sec.availabilitymessage) {\n                        // Sec is not available and we have a message to display.\n                        if (availabilityInfoDiv.length > 0) {\n                            availabilityInfoDiv.html = 'NEW' + sec.availabilitymessage;\n                            availabilityInfoDiv.fadeIn();\n                        } else {\n                            Templates.render(\"format_tiles/availability_info\", {\n                                availabilitymessage: sec.availabilitymessage,\n                                visible: true\n                            }).done(function (html) {\n                                // Need to repeat jquery selector as it is being replaced (replacwith).\n                                $('tile-' + sec.section).find('.availabilityinfo').replaceWith(html);\n                            });\n                        }\n                    }\n                }\n            });\n            setProgressIndicator(0, overallcomplete, overalloutof);\n        };\n\n        /**\n         * Sometimes we must check the availability and completion status of/some all tiles using AJAX.\n         * This might happen if for example a tile expands and some embedded activities are then complete.\n         * Other tiles might use the completion of a previous tile for their availability.\n         * This especially applies if teh H5P filter is being used to display embedded H5P in labels.\n         * @param {Number[]} sectionNums\n         */\n        var updateTileInformation = function (sectionNums) {\n            if (sectionNums === undefined) {\n                // Use all sections if no arg.\n                sectionNums = $(Selector.tile).not(Selector.spacer).map((i, t) => {\n                    return $(t).data('section');\n                }).toArray();\n            }\n            ajax.call([{\n                methodname: \"format_tiles_get_section_information\",\n                args: {\n                    courseid: courseId,\n                    sectionnums: sectionNums\n                }\n            }])[0].done((res) => {\n                    updateSectionsInfo(res.sections, res.overall.complete, res.overall.outof);\n                })\n                .fail(err => {\n                    require([\"core/log\"], function(log) {\n                        log.debug(\n                            \"Failed to get section information to check completion status of section\"\n                        );\n                        log.debug(err);\n                    });\n                });\n        };\n\n        return {\n            init: function (courseIdInit) {\n                courseId = courseIdInit;\n                $(document).ready(function () {\n                    var loadingString = '...';\n                    str.get_strings([{key: \"loading\", component: \"format_tiles\"}]).done(function (s) {\n                        loadingString = s[0] + '  ...';\n                    });\n                    // Included like this so that later dynamically added boxes are covered.\n                    // We only need to handle this here for subtiles.\n                    // Regular course modules use data-action=\"toggle-manual-completion\" instead which triggers core.\n                    $(\"body\").on(\"click\", Selector.toggleCompletionSubtile, function (e) {\n                        // If this is a subtile, replace button with a spinner pending reload of activities over JS.\n                        // Otherwise the core JS will replace with its own with different style.\n                        // See core_course/manual_completion_toggle.\n                        const currentTarget = $(e.currentTarget);\n                        const section = currentTarget.closest('li.section');\n                        currentTarget.replaceWith(\n                            '<span class=\"completionspinner spinner-grow spinner-grow-sm text-secondary mt-2 mr-2\"'\n                            + ' role=\"status\"><span class=\"sr-only\">' + loadingString + '</span></span>'\n                        );\n                        const cmId = parseInt(currentTarget.data('cmid'));\n                        ajax.call([{\n                            methodname: \"core_completion_update_activity_completion_status_manually\",\n                            args: {cmid: cmId, completed: currentTarget.data('complete') !== 1}\n                        }])[0].done((res) => {\n                            if (res.status === true) {\n                                triggerCompletionChangedEvent(section.data('section'), cmId);\n                            }\n                        });\n\n                        // If this is in a modal header, trigger refresh of the main window completion too.\n                        if (currentTarget.closest('.embed-module-buttons').length !== 0) {\n                            const cmId = currentTarget.data('cmid');\n                            const sectionNum = $('li#module-' + cmId).closest(Selector.section).data('section');\n                            triggerCompletionChangedEvent(sectionNum, cmId ? parseInt(cmId) : 0);\n                        }\n                    });\n\n                    var pageContent = $(\"#page-content\");\n                    if (pageContent.length === 0) {\n                        // Some themes e.g. RemUI do not have a #page-content div, so use #region-main.\n                        pageContent = $(\"#region-main\");\n                    }\n\n                    // If an activity with an \"onclick\" attribute is clicked, this means core is launching an activity pop up.\n                    $('li.section a').on('click', function(e) {\n                        const target = $(e.target);\n                        const isCorePopUp = target.attr('onclick')\n                            && target.attr('onclick').indexOf('window.open') === 0;\n                        if (isCorePopUp) {\n                            const cm = target.closest('li.activity');\n                            if (cm.hasClass('completion-view')) {\n                                const section = (target.closest('li.section')).data('section');\n                                triggerCompletionChangedEvent(section, cm.data('cmid'));\n                            }\n                        }\n                    });\n\n                    // When behat tests are running, for whatever reason core completion is not initialised, so we do it here.\n                    coreManualCompletion.init();\n                });\n            },\n            /**\n             *\n             * @param {number} sectionNum\n             * @param {number} cmid\n             */\n            triggerCompletionChangedEvent: function(sectionNum, cmid) {\n                triggerCompletionChangedEvent(sectionNum, cmid);\n            },\n            updateTileInformation: function(sectionNumbers) {\n                try {\n                    updateTileInformation(sectionNumbers);\n                } catch (err) {\n                    require([\"core/log\"], function(log) {\n                        log.debug(err);\n                    });\n                }\n            },\n            updateSectionsInfo: function(sections, overallcomplete, overalloutof) {\n                updateSectionsInfo(sections, overallcomplete, overalloutof);\n            }\n        };\n    }\n);\n"],"names":["define","$","Templates","config","ajax","str","coreManualCompletion","courseId","Selector","isRTL","css","setProgressIndicator","sectionNumber","numComplete","numOutOf","tileProgressIndicator","length","percent","Math","round","attr","find","html","svgX","get_strings","key","component","param","done","s","prop","overallProgressOuter","addClass","removeClass","triggerCompletionChangedEvent","sectionNum","cmId","data","courseid","section","cmid","document","trigger","updateSectionsInfo","sections","overallcomplete","overalloutof","forEach","sec","sectionnum","tile","isavailable","hasClass","isclickable","iscomplete","numcomplete","numoutof","availabilityInfoDiv","availabilitymessage","fadeOut","fadeIn","render","visible","replaceWith","init","courseIdInit","ready","loadingString","on","e","currentTarget","closest","parseInt","call","methodname","args","completed","res","status","pageContent","target","indexOf","cm","updateTileInformation","sectionNumbers","undefined","sectionNums","not","map","i","t","toArray","sectionnums","overall","complete","outof","fail","err","require","log","debug"],"mappings":"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"}