{"version":3,"file":"edit_icon_picker.min.js","sources":["../src/edit_icon_picker.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/* eslint space-before-function-paren: 0 */\n\n/**\n * Javascript Module to handle the icon picker dialogue for format_tiles\n * which the editing user uses to select an icon for a tile or the default icon\n * for all tiles in the course\n *\n * @module      format_tiles/icon_picker\n * @copyright   2018 David Watson {@link http://evolutioncode.uk}\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since       Moodle 3.3\n */\n\ndefine([\"jquery\", \"core/templates\", \"core/ajax\", \"core/str\", \"core/notification\", \"core/config\"],\n    function ($, Templates, ajax, str, Notification, config) {\n        \"use strict\";\n\n        var modalStored;\n        var stringStore = {pickAnIcon: ''};\n        var iconSet = [];\n        var recentPhotoSet = [];\n\n        /**\n         * Get the available icon set and photo set and store them for later use.\n         * @param {number}courseId\n         * @param {function|undefined} callback what to do after.\n         */\n        var getAndStoreIconSet = function(courseId, callback) {\n            var photosPromises = ajax.call([{\n                methodname: \"format_tiles_get_icon_set\",\n                args: {courseid: courseId}\n            }]);\n            photosPromises[0].done(function (response) {\n                if (response.photos) {\n                    recentPhotoSet = JSON.parse(response.photos);\n                }\n                var icons = JSON.parse(response.icons);\n                Object.keys(icons).forEach(function(icon) {\n                    iconSet.push({filename: icon, displayname: icons[icon]});\n                });\n                if (iconSet.length <= 0) {\n                    require([\"core/log\"], function(log) {\n                        log.error(\"Error empty icon set\");\n                        log.debug(response);\n                    });\n                }\n                if (typeof callback === \"function\") {\n                    callback();\n                }\n\n                // Check if there are any photos in the library that need deleting.\n                var photoNames = recentPhotoSet.map(function(photo) {\n                    return photo.filename;\n                });\n                $(\"#iconpickerphotos\").find(\".photo\").each(function (index, ph) {\n                    ph = $(ph);\n                    if (photoNames.indexOf(ph.data(\"filename\")) === -1) {\n                        ph.fadeOut(500);\n                    }\n                });\n                if (response.status !== true) {\n                    require([\"core/log\"], function(log) {\n                        log.error(\"Non true status response when getting icon set\");\n                        log.debug(response);\n                    });\n                }\n            });\n            photosPromises[0].fail(function (response) {\n                require([\"core/log\"], function(log) {\n                    log.error(\"Fail when getting icon set\");\n                    log.debug(response);\n                });\n            });\n        };\n\n        /**\n         * Get the URL for a link for a photo tile button (to access the edit form).\n         * @param {number} courseId\n         * @param {number} sectionId\n         * @returns {string}\n         */\n        var getPhotoTileButtonUrl = function(courseId, sectionId) {\n            return config.wwwroot\n                + '/course/format/tiles/editor/editimage.php?sectionid=' + sectionId;\n        };\n\n        /**\n         * Set the selected icon in the database via AJAX to the web service.\n         * When successful, then change the icon being displayed to the current editing user.\n         * If we are on an edit form, also select the selected icon in the hidden HTML selecftBox.\n         * The select box\n         * @param {number} sectionId\n         * @param {number} sectionNum\n         * @param {string} icon\n         * @param {string} displayname\n         * @param {string} pageType\n         * @param {number} courseId\n         * @param {string} imageType\n         * @param {number|undefined} sourcecontextid\n         * @param {number|undefined} sourceitemid\n         */\n        var setIcon = function (\n            sectionId, sectionNum, icon, displayname, pageType, courseId, imageType, sourcecontextid, sourceitemid\n        ) {\n            var selectedIcon = $(\"#selectedicon\");\n            var changeUiTilePhoto = function (jqueryObjToChange, imageUrl, imageType) {\n                var templateToRender = '';\n                var templateParams = {\n                    tileicon: icon,\n                    tileid: sectionNum,\n                    secid: sectionId,\n                    isediting: 1\n                };\n                switch (imageType) {\n                    case 'tileicon':\n                        templateToRender = 'tileicon';\n                        break;\n                    case 'tilephoto':\n                        if (!imageUrl) {\n                            // Unsetting photo.\n                            templateParams.tileicon = $('#format-tiles-js-config').data('defaultcourseicon');\n                            templateToRender = 'tileicon';\n                            break;\n                        }\n                        templateToRender = 'tilebarphoto';\n                        templateParams.phototileurl = imageUrl;\n                        templateParams.phototileediturl = getPhotoTileButtonUrl(courseId, sectionId);\n                        templateParams.iamgetype = imageType;\n                        jqueryObjToChange.closest(\".tileiconcontainer\").addClass(\"hasphoto\");\n                        // Refresh the photos in library as may not are still be available.\n                        setTimeout(function () {\n                            getAndStoreIconSet(courseId);\n                        }, 3000);\n                        break;\n                    case 'draftfile':\n                        templateToRender = 'tilebarphoto';\n                        templateParams.phototileurl = imageUrl;\n                        templateParams.phototileediturl = getPhotoTileButtonUrl(courseId, sectionId);\n                        templateParams.iamgetype = imageType;\n                        break;\n                    default:\n                        throw new Error(\"Invalid image type \" + imageType);\n                }\n                var divToAnimate = pageType === \"course-view-tiles\" ? jqueryObjToChange : selectedIcon;\n                divToAnimate.animate({opacity: 0}, 500, function () {\n                    Templates.render(\"format_tiles/\" + templateToRender, templateParams)\n                        .done(function (html) {\n                            divToAnimate.html(html)\n                                .animate({opacity: 1}, 500);\n                        });\n                });\n            };\n            $(\".tooltip\").tooltip(\"hide\");\n            var ajaxIconPickArgs = {\n                image: icon,\n                courseid: courseId,\n                sectionid: Number(sectionId === undefined ? 0 : sectionId),\n                imagetype: imageType,\n                sourcecontextid: sourcecontextid === undefined ? 0 : sourcecontextid,\n                sourceitemid: sourceitemid === undefined ? 0 : sourceitemid,\n                // Sectionid will be zero if relates to whole course not just one sec.\n            };\n            var setIconDbPromises = ajax.call([{\n                methodname: \"format_tiles_set_image\",\n                args: ajaxIconPickArgs\n            }]);\n\n            setIconDbPromises[0].done(function (response) {\n                if (response.status === true) {\n                    if (pageType === \"course-view-tiles\") {\n                        // We are changing an icon for a specific section from within the course.\n                        // We are doing this by clicking an existing icon.\n                        changeUiTilePhoto($(\"#tileicon_\" + sectionNum), response.imageurl, imageType);\n                        if (response.imageurl === '') {\n                            // We are resetting tile.  Refresh photo library as image may be deleted now.\n                            getAndStoreIconSet(courseId);\n                        }\n                    } else if (pageType === \"course-edit\") {\n                        // We are changing the icon using a drop down menu not the icon picker modal.\n                        // For the whole course.\n                        // Select new icon in drop down.\n                        var selectBox = $(\"#id_defaulttileicon\"); // Valid if page type is course-edit.\n                        selectBox.val(icon);\n                        // Then change the image shown next to it.\n                        if (imageType === \"tileicon\") {\n                            Templates.renderPix(\"tileicon/\" + icon, \"format_tiles\", displayname)\n                                .done(function (newIcon) {\n                                    selectedIcon.html(newIcon);\n                                });\n                        } else if (imageType === \"tilephoto\") {\n                            // We are changing a tile photo.\n                            changeUiTilePhoto($(\"#tileicon_\" + sectionNum), response.imageurl, imageType);\n                        }\n                    }\n                } else {\n                    require([\"core/log\"], function(log) {\n                        log.error(\"False response setting icon\");\n                        log.debug(response);\n                    });\n                }\n            }).fail(function(response) {\n                require([\"core/log\"], function(log) {\n                    log.error(\"Fail setting icon\");\n                    log.debug(response);\n                });\n            });\n        };\n\n        /**\n         * When user clicks to launch an icon picker modal, set which section it relates to\n         * so that we know which section the icon clicked is for.  This is so that only one modal needs\n         * to be rendered (with all the icons in it) - we can use it to assign icons to any section\n         * @param {string} pageType\n         * @param {number} courseId\n         * @param {int} sectionId\n         * @param {int} section\n         * @param {int} allowPhotoTiles whether to render a button for the photo tile form - true or false).\n         * @param {string} documentationurl\n         */\n        var launchIconPicker = function (pageType, courseId, sectionId, section, allowPhotoTiles, documentationurl) {\n            // Launch icon picker can be a tile icon (if editing course) or a button (if on a form).\n            var populatePhotoLibrary = function(photosHTML, modalRoot, modal) {\n                var photoLibrary = $(\"#iconpickerphotos\");\n                photoLibrary.html(photosHTML);\n\n                // Load the images that are not too large immediately.\n                // (User draft files may be large so leave them to load last.\n                var largeFileThreshold = 200000; // Bytes.\n                var doLast = [];\n                photoLibrary.find(\".photo\").each(function (index, image) {\n                    image = $(image);\n                    if (image.data(\"filesize\") < largeFileThreshold && image.data(\"url\")) {\n                        setTimeout(function () {\n                            image.attr(\"style\", `background-image: url('${image.data(\"url\")}');`);\n                        }, index * 20);\n                    } else {\n                        doLast.push(image);\n                    }\n\n                    image.click(function (e) {\n                        var clickedImage = $(e.currentTarget);\n                        setIcon(\n                            modalRoot.data(\"true-sectionid\"),\n                            modalRoot.data(\"section\"),\n                            clickedImage.data(\"filename\"),\n                            clickedImage.data(\"filename\"),\n                            pageType,\n                            courseId,\n                            clickedImage.data(\"imagetype\"),\n                            clickedImage.data(\"contextid\"), // For existing photos - sourcecontextid.\n                            clickedImage.data(\"itemid\") // For existing photos - sourceitemid.\n                        );\n                        modal.hide();\n                    });\n                });\n                setTimeout(function () {\n                    doLast.forEach(function (image) {\n                        image.attr(\"src\", image.data(\"url\"));\n                    });\n                }, 1000);\n            };\n\n            if (typeof modalStored !== \"object\") {\n                // We only have one modal per page which we recycle.  We don't have it yet so create it.\n\n                var renderModal = function() {\n                    Templates.render(\"format_tiles/icon_picker_modal_body\", {\n                        /* eslint-disable-next-line camelcase */\n                        icon_picker_icons: iconSet,\n                        showphotos: allowPhotoTiles,\n                        showicons: true, // Always include this but we can hide it when using photos.\n                        wwwroot: config.wwwroot,\n                        documentationurl: documentationurl\n                    }).done(function (iconsHTML) {\n                        require([\"core/modal_factory\"], function (modalFact) {\n                            modalFact.create({\n                                type: modalFact.types.DEFAULT,\n                                title: stringStore.pickAnIcon,\n                                body: iconsHTML\n                            }).done(function (modal) {\n                                modalStored = modal;\n                                modal.setLarge();\n                                modal.show();\n                                var modalRoot = $(modal.root);\n                                modalRoot.attr(\"id\", \"icon_picker_modal\");\n                                modalRoot.data(\"true-sectionid\", sectionId);\n                                modalRoot.data(\"section\", section);\n                                modalRoot.addClass(\"icon_picker_modal\");\n                                modalRoot.on(\"click\", \".pickericon\", function (e) {\n                                    var newIcon = $(e.currentTarget);\n                                    setIcon(\n                                        sectionId,\n                                        section,\n                                        newIcon.data(\"icon\"),\n                                        newIcon.attr(\"title\"),\n                                        pageType,\n                                        courseId,\n                                        'tileicon',\n                                        newIcon.data(\"contextid\"), // For existing photos - sourcecontextid.\n                                        newIcon.data(\"itemid\") // For existing photos - sourcetemid.\n                                    );\n                                    modal.hide();\n                                });\n                                // Icon search box handling.\n                                modalRoot.on(\"input\", \"input.iconsearch\", function (e) {\n                                    var searchText = e.currentTarget.value.toLowerCase();\n                                    modalRoot.find(\".pickericon\").show();\n                                    if (searchText.length >= 3) {\n                                        modalRoot.find(\".pickericon\").filter(function (index, icon) {\n                                            // Show all icons then hide icons which do not match the search term.\n                                            return $(icon).data('original-title').toLowerCase().indexOf(searchText) < 0;\n                                        }).hide();\n                                    }\n                                });\n                                try {\n                                    const pickerIcon = $(\".pickericon\");\n                                    if (typeof pickerIcon.tooltip == 'function') {\n                                        pickerIcon.tooltip();\n                                    }\n                                } catch (err) {\n                                    require([\"core/log\"], function (log) {\n                                        log.debug(err);\n                                    });\n                                }\n                                if (allowPhotoTiles) {\n                                    // Set the URL for the photo upload button if used (done dynamically as contains section id).\n                                    var url = getPhotoTileButtonUrl(courseId, sectionId);\n                                    modalRoot.find('#phototilebtn')\n                                        .attr('href', url);\n                                    // Now that we have modal, if photo library tab is clicked we need to lazy load the photos.\n                                    $(\"#launch-photo-library\").click(function () {\n                                        if (recentPhotoSet.length !== 0) {\n                                            Templates.render(\"format_tiles/icon_picker_photos\", {\n                                                /* eslint-disable-next-line camelcase */\n                                                icon_picker_photos: recentPhotoSet,\n                                                wwwroot: config.wwwroot\n                                            }).done(function (photosHTML) {\n                                                populatePhotoLibrary(photosHTML, modalRoot, modal);\n                                            });\n                                        }\n                                    });\n                                }\n                                $(document).trigger('format-tiles-icon-picker-modal-created');\n                            });\n                        });\n                    });\n                };\n                if (iconSet.length <= 0) {\n                    getAndStoreIconSet(courseId, renderModal);\n                } else {\n                    renderModal();\n                }\n            } else {\n                // We already have the modal so recycle it instead of re-rendering.\n                modalStored.root.data(\"true-sectionid\", sectionId);\n                modalStored.root.data(\"section\", section);\n                modalStored.root.off(\"click\");\n                modalStored.root.on(\"click\", \".pickericon\", function (e) {\n                    var newIcon = $(e.currentTarget);\n                    setIcon(\n                        sectionId,\n                        section,\n                        newIcon.data(\"icon\"),\n                        newIcon.attr(\"title\"),\n                        pageType,\n                        courseId,\n                        newIcon.data(\"imagetype\"),\n                        newIcon.data(\"contextid\"), // For existing photos - sourcecontextid.\n                        newIcon.data(\"itemid\") // For existing photos - sourcetemid.\n                    );\n                    modalStored.hide();\n                });\n                if (allowPhotoTiles) {\n                    // Set the URL for the photo upload button if used (done dynamically as contains section id).\n                    var url = getPhotoTileButtonUrl(courseId, sectionId);\n                    modalStored.root.find('#phototilebtn')\n                        .attr('href', url);\n                }\n                modalStored.show();\n            }\n        };\n\n        return {\n            init: function (courseId, pageType, allowPhotoTiles, documentationurl) {\n                $(document).ready(function () {\n                    var stringKey = allowPhotoTiles ? \"picknewiconphoto\" : \"picknewicon\";\n                    str.get_string(stringKey, \"format_tiles\").done(function (pickAnIcon) {\n                        stringStore.pickAnIcon = pickAnIcon;\n                    });\n                    // Get the core icon set now so that we don't have to wait later.\n                    getAndStoreIconSet(courseId);\n\n                    var pageContent = $(\"#page-content\");\n                    if (pageContent.length === 0) {\n                        // Some themes e.g. RemUI do not have a #page-content div, so use #region-main.\n                        pageContent = $(\"#region-main\");\n                    }\n                    pageContent.on(\"click\", '[data-tiles-action=\"launch-tiles-icon-picker\"]', function (e) {\n                        e.preventDefault();\n                        var clickedIcon = $(e.currentTarget);\n                        launchIconPicker(\n                            pageType,\n                            courseId,\n                            clickedIcon.data('true-sectionid'),\n                            clickedIcon.data('section'),\n                            allowPhotoTiles,\n                            documentationurl\n                        );\n                    });\n                });\n            }\n        };\n    }\n);"],"names":["define","$","Templates","ajax","str","Notification","config","modalStored","stringStore","pickAnIcon","iconSet","recentPhotoSet","getAndStoreIconSet","courseId","callback","photosPromises","call","methodname","args","courseid","done","response","photos","JSON","parse","icons","Object","keys","forEach","icon","push","filename","displayname","length","require","log","error","debug","photoNames","map","photo","find","each","index","ph","indexOf","data","fadeOut","status","fail","getPhotoTileButtonUrl","sectionId","wwwroot","setIcon","sectionNum","pageType","imageType","sourcecontextid","sourceitemid","selectedIcon","changeUiTilePhoto","jqueryObjToChange","imageUrl","templateToRender","templateParams","tileicon","tileid","secid","isediting","phototileurl","phototileediturl","iamgetype","closest","addClass","setTimeout","Error","divToAnimate","animate","opacity","render","html","tooltip","ajaxIconPickArgs","image","sectionid","Number","undefined","imagetype","imageurl","val","renderPix","newIcon","launchIconPicker","section","allowPhotoTiles","documentationurl","renderModal","icon_picker_icons","showphotos","showicons","iconsHTML","modalFact","create","type","types","DEFAULT","title","body","modal","setLarge","show","modalRoot","root","attr","on","e","currentTarget","hide","searchText","value","toLowerCase","filter","pickerIcon","err","url","click","icon_picker_photos","photosHTML","photoLibrary","doLast","clickedImage","populatePhotoLibrary","document","trigger","off","init","ready","stringKey","get_string","pageContent","preventDefault","clickedIcon"],"mappings":"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"}