{"version":3,"file":"edit_icon_picker.min.js","sources":["../src/edit_icon_picker.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/* eslint space-before-function-paren: 0 */\n\n/**\n * Javascript Module to handle the icon picker dialogue for format_tiles\n * which the editing user uses to select an icon for a tile or the default icon\n * for all tiles in the course\n *\n * @module      format_tiles/icon_picker\n * @copyright   2018 David Watson {@link http://evolutioncode.uk}\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since       Moodle 3.3\n */\n\ndefine([\"jquery\", \"core/templates\", \"core/ajax\", \"core/str\", \"core/notification\", \"core/config\"],\n    function ($, Templates, ajax, str, Notification, config) {\n        \"use strict\";\n\n        var modalStored;\n        var stringStore = {pickAnIcon: ''};\n        var iconSet = [];\n        var recentPhotoSet = [];\n\n        /**\n         * Get the available icon set and photo set and store them for later use.\n         * @param {number}courseId\n         * @param {function|undefined} callback what to do after.\n         */\n        var getAndStoreIconSet = function(courseId, callback) {\n            var photosPromises = ajax.call([{\n                methodname: \"format_tiles_get_icon_set\",\n                args: {courseid: courseId}\n            }]);\n            photosPromises[0].done(function (response) {\n                if (response.photos) {\n                    recentPhotoSet = JSON.parse(response.photos);\n                }\n                var icons = JSON.parse(response.icons);\n                Object.keys(icons).forEach(function(icon) {\n                    iconSet.push({filename: icon, displayname: icons[icon]});\n                });\n                if (iconSet.length <= 0) {\n                    require([\"core/log\"], function(log) {\n                        log.error(\"Error empty icon set\");\n                        log.debug(response);\n                    });\n                }\n                if (typeof callback === \"function\") {\n                    callback();\n                }\n\n                // Check if there are any photos in the library that need deleting.\n                var photoNames = recentPhotoSet.map(function(photo) {\n                    return photo.filename;\n                });\n                $(\"#iconpickerphotos\").find(\".photo\").each(function (index, ph) {\n                    ph = $(ph);\n                    if (photoNames.indexOf(ph.data(\"filename\")) === -1) {\n                        ph.fadeOut(500);\n                    }\n                });\n                if (response.status !== true) {\n                    require([\"core/log\"], function(log) {\n                        log.error(\"Non true status response when getting icon set\");\n                        log.debug(response);\n                    });\n                }\n            });\n            photosPromises[0].fail(function (response) {\n                require([\"core/log\"], function(log) {\n                    log.error(\"Fail when getting icon set\");\n                    log.debug(response);\n                });\n            });\n        };\n\n        /**\n         * Get the URL for a link for a photo tile button (to access the edit form).\n         * @param {number} courseId\n         * @param {number} sectionId\n         * @returns {string}\n         */\n        var getPhotoTileButtonUrl = function(courseId, sectionId) {\n            return config.wwwroot\n                + '/course/format/tiles/editor/editimage.php?sectionid=' + sectionId;\n        };\n\n        /**\n         * Set the selected icon in the database via AJAX to the web service.\n         * When successful, then change the icon being displayed to the current editing user.\n         * If we are on an edit form, also select the selected icon in the hidden HTML selecftBox.\n         * The select box\n         * @param {number} sectionId\n         * @param {number} sectionNum\n         * @param {string} icon\n         * @param {string} displayname\n         * @param {string} pageType\n         * @param {number} courseId\n         * @param {string} imageType\n         * @param {number|undefined} sourcecontextid\n         * @param {number|undefined} sourceitemid\n         */\n        var setIcon = function (\n            sectionId, sectionNum, icon, displayname, pageType, courseId, imageType, sourcecontextid, sourceitemid\n        ) {\n            var selectedIcon = $(\"#selectedicon\");\n\n            const onCoursePage = ['section-view-tiles', \"course-view-tiles\", 'course-view-section-tiles'].includes(pageType);\n            var changeUiTilePhoto = function (jqueryObjToChange, imageUrl, imageType) {\n                var templateToRender = '';\n                var templateParams = {\n                    tileicon: icon,\n                    tileid: sectionNum,\n                    secid: sectionId,\n                    isediting: 1\n                };\n                switch (imageType) {\n                    case 'tileicon':\n                        if (icon.match(/^number_[\\d]{1,2}$/)) {\n                            templateToRender = 'tilenumber';\n                            templateParams.tilenumber = icon.match(/\\d+/)[0];\n                        } else {\n                            templateToRender = 'tileicon';\n                        }\n                        break;\n                    case 'tilephoto':\n                        if (!imageUrl) {\n                            // Unsetting photo.\n                            templateParams.tileicon = $('#format-tiles-js-config').data('defaultcourseicon');\n                            templateToRender = 'tileicon';\n                            break;\n                        }\n                        templateToRender = 'tilebarphoto';\n                        templateParams.phototileurl = imageUrl;\n                        templateParams.phototileediturl = getPhotoTileButtonUrl(courseId, sectionId);\n                        templateParams.imagetype = imageType;\n                        jqueryObjToChange.closest(\".tileiconcontainer\").addClass(\"hasphoto\");\n                        // Refresh the photos in library as may not are still be available.\n                        setTimeout(function () {\n                            getAndStoreIconSet(courseId);\n                        }, 3000);\n                        break;\n                    case 'draftfile':\n                        templateToRender = 'tilebarphoto';\n                        templateParams.phototileurl = imageUrl;\n                        templateParams.phototileediturl = getPhotoTileButtonUrl(courseId, sectionId);\n                        templateParams.imagetype = imageType;\n                        break;\n                    default:\n                        throw new Error(\"Invalid image type \" + imageType);\n                }\n                var divToAnimate = onCoursePage ? jqueryObjToChange : selectedIcon;\n                divToAnimate.animate({opacity: 0}, 500, function () {\n                    Templates.render(\"format_tiles/\" + templateToRender, templateParams)\n                        .done(function (html) {\n                            divToAnimate.html(html)\n                                .animate({opacity: 1}, 500);\n                        });\n                });\n            };\n            $(\".tooltip\").tooltip(\"hide\");\n            var ajaxIconPickArgs = {\n                image: icon,\n                courseid: courseId,\n                sectionid: Number(sectionId === undefined ? 0 : sectionId),\n                imagetype: imageType,\n                sourcecontextid: sourcecontextid === undefined ? 0 : sourcecontextid,\n                sourceitemid: sourceitemid === undefined ? 0 : sourceitemid,\n                // Sectionid will be zero if relates to whole course not just one sec.\n            };\n            var setIconDbPromises = ajax.call([{\n                methodname: \"format_tiles_set_image\",\n                args: ajaxIconPickArgs\n            }]);\n\n            setIconDbPromises[0].done(function (response) {\n                if (response.status === true) {\n                    if (onCoursePage) {\n                        // We are changing an icon for a specific section from within the course.\n                        // We are doing this by clicking an existing icon.\n                        changeUiTilePhoto($(\"#tileicon_\" + sectionNum), response.imageurl, imageType);\n                        if (response.imageurl === '') {\n                            // We are resetting tile.  Refresh photo library as image may be deleted now.\n                            getAndStoreIconSet(courseId);\n                        }\n                    } else if (pageType === \"course-edit\") {\n                        // We are changing the icon using a drop down menu not the icon picker modal.\n                        // For the whole course.\n                        // Select new icon in drop down.\n                        var selectBox = $(\"#id_defaulttileicon\"); // Valid if page type is course-edit.\n                        selectBox.val(icon);\n                        // Then change the image shown next to it.\n                        if (imageType === \"tileicon\") {\n                            Templates.renderPix(\"tileicon/\" + icon, \"format_tiles\", displayname)\n                                .done(function (newIcon) {\n                                    selectedIcon.html(newIcon);\n                                });\n                        } else if (imageType === \"tilephoto\") {\n                            // We are changing a tile photo.\n                            changeUiTilePhoto($(\"#tileicon_\" + sectionNum), response.imageurl, imageType);\n                        }\n                    }\n                } else {\n                    require([\"core/log\"], function(log) {\n                        log.error(\"False response setting icon\");\n                        log.debug(response);\n                    });\n                }\n            }).fail(function(response) {\n                require([\"core/log\"], function(log) {\n                    log.error(\"Fail setting icon\");\n                    log.debug(response);\n                });\n            });\n        };\n\n        /**\n         * When user clicks to launch an icon picker modal, set which section it relates to\n         * so that we know which section the icon clicked is for.  This is so that only one modal needs\n         * to be rendered (with all the icons in it) - we can use it to assign icons to any section\n         * @param {string} pageType\n         * @param {number} courseId\n         * @param {int} sectionId\n         * @param {int} section\n         * @param {int} allowPhotoTiles whether to render a button for the photo tile form - true or false).\n         * @param {string} documentationurl\n         * @param {number} maxNumberIcons\n         */\n        var launchIconPicker = function (pageType, courseId, sectionId, section,\n                                         allowPhotoTiles, documentationurl, maxNumberIcons) {\n            // Launch icon picker can be a tile icon (if editing course) or a button (if on a form).\n            var populatePhotoLibrary = function(photosHTML, modalRoot, modal) {\n                var photoLibrary = $(\"#iconpickerphotos\");\n                photoLibrary.html(photosHTML);\n\n                // Load the images that are not too large immediately.\n                // (User draft files may be large so leave them to load last.\n                var largeFileThreshold = 200000; // Bytes.\n                var doLast = [];\n                photoLibrary.find(\".photo\").each(function (index, image) {\n                    image = $(image);\n                    if (image.data(\"filesize\") < largeFileThreshold && image.data(\"url\")) {\n                        setTimeout(function () {\n                            image.attr(\"style\", `background-image: url('${image.data(\"url\")}');`);\n                        }, index * 20);\n                    } else {\n                        doLast.push(image);\n                    }\n\n                    image.click(function (e) {\n                        var clickedImage = $(e.currentTarget);\n                        setIcon(\n                            modalRoot.data(\"true-sectionid\"),\n                            modalRoot.data(\"section\"),\n                            clickedImage.data(\"filename\"),\n                            clickedImage.data(\"filename\"),\n                            pageType,\n                            courseId,\n                            clickedImage.data(\"imagetype\"),\n                            clickedImage.data(\"contextid\"), // For existing photos - sourcecontextid.\n                            clickedImage.data(\"itemid\") // For existing photos - sourceitemid.\n                        );\n                        modal.hide();\n                    });\n                });\n                setTimeout(function () {\n                    doLast.forEach(function (image) {\n                        image.attr(\"src\", image.data(\"url\"));\n                    });\n                }, 1000);\n            };\n\n            if (typeof modalStored !== \"object\") {\n                // We only have one modal per page which we recycle.  We don't have it yet so create it.\n\n                var renderModal = function() {\n                    Templates.render(\"format_tiles/icon_picker_modal_body\", {\n                        /* eslint-disable-next-line camelcase */\n                        icon_picker_icons: iconSet,\n                        showphotos: allowPhotoTiles,\n                        sectionnumber: section,\n                        showicons: true, // Always include this, but we can hide it when using photos.\n                        tilenumbers: Array.from({length: maxNumberIcons + 1}, (e, i)=> i).filter((e) => e > 0),\n                        wwwroot: config.wwwroot,\n                        documentationurl: documentationurl\n                    }).done(function (iconsHTML) {\n                        require([\"core/modal_factory\"], function (modalFact) {\n                            modalFact.create({\n                                type: modalFact.types.DEFAULT,\n                                title: stringStore.pickAnIcon,\n                                body: iconsHTML\n                            }).done(function (modal) {\n                                modalStored = modal;\n                                modal.setLarge();\n                                modal.show();\n                                var modalRoot = $(modal.root);\n                                modalRoot.attr(\"id\", \"icon_picker_modal\");\n                                modalRoot.data(\"true-sectionid\", sectionId);\n                                modalRoot.data(\"section\", section);\n                                modalRoot.addClass(\"icon_picker_modal\");\n                                modalRoot.find(`#tile-number-container-${section}`).addClass('suggested');\n                                modalRoot.on(\"click\", \".pickericon\", function (e) {\n                                    var newIcon = $(e.currentTarget);\n                                    setIcon(\n                                        sectionId,\n                                        section,\n                                        newIcon.data(\"icon\"),\n                                        newIcon.attr(\"title\"),\n                                        pageType,\n                                        courseId,\n                                        'tileicon',\n                                        newIcon.data(\"contextid\"), // For existing photos - sourcecontextid.\n                                        newIcon.data(\"itemid\") // For existing photos - sourcetemid.\n                                    );\n                                    modal.hide();\n                                });\n                                // Icon search box handling.\n                                modalRoot.on(\"input\", \"input.iconsearch\", function (e) {\n                                    var searchText = e.currentTarget.value.toLowerCase();\n                                    modalRoot.find(\".pickericon\").show();\n                                    if (searchText.length >= 3) {\n                                        modalRoot.find(\".pickericon\").filter(function (index, icon) {\n                                            // Show all icons then hide icons which do not match the search term.\n                                            return $(icon).data('original-title').toLowerCase().indexOf(searchText) < 0;\n                                        }).hide();\n                                    }\n                                });\n                                try {\n                                    const pickerIcon = $(\".pickericon:not(.tile-number)\");\n                                    if (typeof pickerIcon.tooltip == 'function') {\n                                        pickerIcon.tooltip();\n                                    }\n                                } catch (err) {\n                                    require([\"core/log\"], function (log) {\n                                        log.debug(err);\n                                    });\n                                }\n                                if (allowPhotoTiles) {\n                                    // Set the URL for the photo upload button if used (done dynamically as contains section id).\n                                    var url = getPhotoTileButtonUrl(courseId, sectionId);\n                                    modalRoot.find('#phototilebtn')\n                                        .attr('href', url);\n                                    // Now that we have modal, if photo library tab is clicked we need to lazy load the photos.\n                                    $(\"#launch-photo-library\").click(function () {\n                                        if (recentPhotoSet.length !== 0) {\n                                            Templates.render(\"format_tiles/icon_picker_photos\", {\n                                                /* eslint-disable-next-line camelcase */\n                                                icon_picker_photos: recentPhotoSet,\n                                                wwwroot: config.wwwroot\n                                            }).done(function (photosHTML) {\n                                                populatePhotoLibrary(photosHTML, modalRoot, modal);\n                                            });\n                                        }\n                                    });\n                                }\n                                $(document).trigger('format-tiles-icon-picker-modal-created');\n                            });\n                        });\n                    });\n                };\n                if (iconSet.length <= 0) {\n                    getAndStoreIconSet(courseId, renderModal);\n                } else {\n                    renderModal();\n                }\n            } else {\n                // We already have the modal so recycle it instead of re-rendering.\n                modalStored.root.data(\"true-sectionid\", sectionId);\n                modalStored.root.data(\"section\", section);\n                modalStored.root.off(\"click\");\n                modalStored.root.find(`.tile-number-container`).removeClass('suggested');\n                modalStored.root.find(`#tile-number-container-${section}`).addClass('suggested');\n                modalStored.root.on(\"click\", \".pickericon\", function (e) {\n                    var newIcon = $(e.currentTarget);\n                    setIcon(\n                        sectionId,\n                        section,\n                        newIcon.data(\"icon\"),\n                        newIcon.attr(\"title\"),\n                        pageType,\n                        courseId,\n                        newIcon.data(\"imagetype\"),\n                        newIcon.data(\"contextid\"), // For existing photos - sourcecontextid.\n                        newIcon.data(\"itemid\") // For existing photos - sourcetemid.\n                    );\n                    modalStored.hide();\n                });\n                if (allowPhotoTiles) {\n                    // Set the URL for the photo upload button if used (done dynamically as contains section id).\n                    var url = getPhotoTileButtonUrl(courseId, sectionId);\n                    modalStored.root.find('#phototilebtn')\n                        .attr('href', url);\n                }\n                modalStored.show();\n            }\n        };\n\n        return {\n            init: function (courseId, pageType, allowPhotoTiles, documentationurl, maxNumberIcons) {\n                $(document).ready(function () {\n                    var stringKey = allowPhotoTiles ? \"picknewiconphoto\" : \"picknewicon\";\n                    str.get_string(stringKey, \"format_tiles\").done(function (pickAnIcon) {\n                        stringStore.pickAnIcon = pickAnIcon;\n                    });\n                    // Get the core icon set now so that we don't have to wait later.\n                    getAndStoreIconSet(courseId);\n\n                    var pageContent = $(\"#page-content\");\n                    if (pageContent.length === 0) {\n                        // Some themes e.g. RemUI do not have a #page-content div, so use #region-main.\n                        pageContent = $(\"#region-main\");\n                    }\n                    pageContent.on(\"click\", '[data-tiles-action=\"launch-tiles-icon-picker\"]', function (e) {\n                        e.preventDefault();\n                        var clickedIcon = $(e.currentTarget);\n                        launchIconPicker(\n                            pageType,\n                            courseId,\n                            clickedIcon.data('true-sectionid'),\n                            clickedIcon.data('section'),\n                            allowPhotoTiles,\n                            documentationurl,\n                            maxNumberIcons\n                        );\n                    });\n                });\n            }\n        };\n    }\n);"],"names":["define","$","Templates","ajax","str","Notification","config","modalStored","stringStore","pickAnIcon","iconSet","recentPhotoSet","getAndStoreIconSet","courseId","callback","photosPromises","call","methodname","args","courseid","done","response","photos","JSON","parse","icons","Object","keys","forEach","icon","push","filename","displayname","length","require","log","error","debug","photoNames","map","photo","find","each","index","ph","indexOf","data","fadeOut","status","fail","getPhotoTileButtonUrl","sectionId","wwwroot","setIcon","sectionNum","pageType","imageType","sourcecontextid","sourceitemid","selectedIcon","onCoursePage","includes","changeUiTilePhoto","jqueryObjToChange","imageUrl","templateToRender","templateParams","tileicon","tileid","secid","isediting","match","tilenumber","phototileurl","phototileediturl","imagetype","closest","addClass","setTimeout","Error","divToAnimate","animate","opacity","render","html","tooltip","ajaxIconPickArgs","image","sectionid","Number","undefined","imageurl","val","renderPix","newIcon","launchIconPicker","section","allowPhotoTiles","documentationurl","maxNumberIcons","renderModal","icon_picker_icons","showphotos","sectionnumber","showicons","tilenumbers","Array","from","e","i","filter","iconsHTML","modalFact","create","type","types","DEFAULT","title","body","modal","setLarge","show","modalRoot","root","attr","on","currentTarget","hide","searchText","value","toLowerCase","pickerIcon","err","url","click","icon_picker_photos","photosHTML","photoLibrary","doLast","clickedImage","populatePhotoLibrary","document","trigger","off","removeClass","init","ready","stringKey","get_string","pageContent","preventDefault","clickedIcon"],"mappings":"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"}