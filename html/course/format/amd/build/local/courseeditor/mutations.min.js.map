{"version":3,"file":"mutations.min.js","sources":["../../../src/local/courseeditor/mutations.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport ajax from 'core/ajax';\nimport {getString} from \"core/str\";\nimport log from 'core/log';\nimport SRLogger from \"core/local/reactive/srlogger\";\n\n/**\n * Flag to determine whether the screen reader-only logger has already been set, so we only need to set it once.\n *\n * @type {boolean}\n */\nlet isLoggerSet = false;\n\n/**\n * Default mutation manager\n *\n * @module     core_courseformat/local/courseeditor/mutations\n * @class     core_courseformat/local/courseeditor/mutations\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nexport default class {\n\n    // All course editor mutations for Moodle 4.0 will be located in this file.\n\n    /**\n     * Private method to call core_courseformat_update_course webservice.\n     *\n     * @method _callEditWebservice\n     * @param {string} action\n     * @param {number} courseId\n     * @param {array} ids\n     * @param {number} targetSectionId optional target section id (for moving actions)\n     * @param {number} targetCmId optional target cm id (for moving actions)\n     */\n    async _callEditWebservice(action, courseId, ids, targetSectionId, targetCmId) {\n        const args = {\n            action,\n            courseid: courseId,\n            ids,\n        };\n        if (targetSectionId) {\n            args.targetsectionid = targetSectionId;\n        }\n        if (targetCmId) {\n            args.targetcmid = targetCmId;\n        }\n        let ajaxresult = await ajax.call([{\n            methodname: 'core_courseformat_update_course',\n            args,\n        }])[0];\n        return JSON.parse(ajaxresult);\n    }\n\n    /**\n     * Private method to call core_courseformat_create_module webservice.\n     *\n     * @method _callEditWebservice\n     * @param {number} courseId\n     * @param {string} modName module name\n     * @param {number} targetSectionNum target section number\n     * @param {number} targetCmId optional target cm id\n     */\n    async _callAddModuleWebservice(courseId, modName, targetSectionNum, targetCmId) {\n        const args = {\n            courseid: courseId,\n            modname: modName,\n            targetsectionnum: targetSectionNum,\n        };\n        if (targetCmId) {\n            args.targetcmid = targetCmId;\n        }\n        let ajaxresult = await ajax.call([{\n            methodname: 'core_courseformat_create_module',\n            args,\n        }])[0];\n        return JSON.parse(ajaxresult);\n    }\n\n    /**\n     * Private method to call core_courseformat_new_module webservice.\n     *\n     * @method _callEditWebservice\n     * @param {number} courseId\n     * @param {string} modName module name\n     * @param {number} targetSectionId target section number\n     * @param {number} targetCmId optional target cm id\n     */\n    async _callNewModuleWebservice(courseId, modName, targetSectionId, targetCmId) {\n        const args = {\n            courseid: courseId,\n            modname: modName,\n            targetsectionid: targetSectionId,\n        };\n        if (targetCmId) {\n            args.targetcmid = targetCmId;\n        }\n        let ajaxresult = await ajax.call([{\n            methodname: 'core_courseformat_new_module',\n            args,\n        }])[0];\n        return JSON.parse(ajaxresult);\n    }\n\n    /**\n     * Execute a basic section state action.\n     * @param {StateManager} stateManager the current state manager\n     * @param {string} action the action name\n     * @param {array} sectionIds the section ids\n     * @param {number} targetSectionId optional target section id (for moving actions)\n     * @param {number} targetCmId optional target cm id (for moving actions)\n     */\n    async _sectionBasicAction(stateManager, action, sectionIds, targetSectionId, targetCmId) {\n        const logEntry = this._getLoggerEntry(stateManager, action, sectionIds, {\n            targetSectionId,\n            targetCmId,\n            itemType: 'section',\n        });\n        const course = stateManager.get('course');\n        this.sectionLock(stateManager, sectionIds, true);\n        const updates = await this._callEditWebservice(\n            action,\n            course.id,\n            sectionIds,\n            targetSectionId,\n            targetCmId\n        );\n        this.bulkReset(stateManager);\n        stateManager.processUpdates(updates);\n        this.sectionLock(stateManager, sectionIds, false);\n        stateManager.addLoggerEntry(await logEntry);\n    }\n\n    /**\n     * Execute a basic course module state action.\n     * @param {StateManager} stateManager the current state manager\n     * @param {string} action the action name\n     * @param {array} cmIds the cm ids\n     * @param {number} targetSectionId optional target section id (for moving actions)\n     * @param {number} targetCmId optional target cm id (for moving actions)\n     */\n    async _cmBasicAction(stateManager, action, cmIds, targetSectionId, targetCmId) {\n        const logEntry = this._getLoggerEntry(stateManager, action, cmIds, {\n            targetSectionId,\n            targetCmId,\n            itemType: 'cm',\n        });\n        const course = stateManager.get('course');\n        this.cmLock(stateManager, cmIds, true);\n        const updates = await this._callEditWebservice(\n            action,\n            course.id,\n            cmIds,\n            targetSectionId,\n            targetCmId\n        );\n        this.bulkReset(stateManager);\n        stateManager.processUpdates(updates);\n        this.cmLock(stateManager, cmIds, false);\n        stateManager.addLoggerEntry(await logEntry);\n    }\n\n    /**\n     * Get log entry for the current action.\n     * @param {StateManager} stateManager the current state manager\n     * @param {string} action the action name\n     * @param {int[]|null} itemIds the element ids\n     * @param {Object|undefined} data extra params for the log entry\n     * @param {string|undefined} data.itemType the element type (will be taken from action if none)\n     * @param {int|null|undefined} data.targetSectionId the target section id\n     * @param {int|null|undefined} data.targetCmId the target cm id\n     * @param {String|null|undefined} data.component optional component (for format plugins)\n     * @param {Object|undefined} [data.feedbackParams] the params to build the feedback message\n     * @return {Object} the log entry\n     */\n    async _getLoggerEntry(stateManager, action, itemIds, data = {}) {\n        if (!isLoggerSet) {\n            // In case the logger has not been set from init(), ensure we set the logger.\n            stateManager.setLogger(new SRLogger());\n            isLoggerSet = true;\n        }\n        let feedbackParams = {\n            action,\n            itemType: data.itemType ?? action.split('_')[0],\n        };\n        let batch = '';\n        if (itemIds.length > 1) {\n            feedbackParams.count = itemIds.length;\n            batch = '_batch';\n        } else if (itemIds.length === 1) {\n            const itemInfo = stateManager.get(feedbackParams.itemType, itemIds[0]);\n            feedbackParams.name = itemInfo.title ?? itemInfo.name;\n            // Apply shortener for modules like label.\n        }\n        if (data.targetSectionId) {\n            feedbackParams.targetSectionName = stateManager.get('section', data.targetSectionId).title;\n        }\n        if (data.targetCmId) {\n            feedbackParams.targetCmName = stateManager.get('cm', data.targetCmId).name;\n        }\n        if (data.feedbackParams) {\n            feedbackParams = {...feedbackParams, ...data.feedbackParams};\n        }\n\n        const message = await getString(\n            `${action.toLowerCase()}_feedback${batch}`,\n            data.component ?? 'core_courseformat',\n            feedbackParams\n        );\n\n        return {\n            feedbackMessage: message,\n        };\n    }\n\n    /**\n     * Mutation module initialize.\n     *\n     * The reactive instance will execute this method when addMutations or setMutation is invoked.\n     *\n     * @param {StateManager} stateManager the state manager\n     */\n    init(stateManager) {\n        // Add a method to prepare the fields when some update is coming from the server.\n        stateManager.addUpdateTypes({\n            prepareFields: this._prepareFields,\n        });\n        // Use the screen reader-only logger (SRLogger) to handle the feedback messages from the mutations.\n        stateManager.setLogger(new SRLogger());\n        isLoggerSet = true;\n    }\n\n    /**\n     * Add default values to state elements.\n     *\n     * This method is called every time a webservice returns a update state message.\n     *\n     * @param {Object} stateManager the state manager\n     * @param {String} updateName the state element to update\n     * @param {Object} fields the new data\n     * @returns {Object} final fields data\n     */\n    _prepareFields(stateManager, updateName, fields) {\n        // Any update should unlock the element.\n        fields.locked = false;\n        return fields;\n    }\n\n    /**\n     * Hides sections.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of section ids\n     */\n    async sectionHide(stateManager, sectionIds) {\n        await this._sectionBasicAction(stateManager, 'section_hide', sectionIds);\n    }\n\n    /**\n     * Show sections.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of section ids\n     */\n    async sectionShow(stateManager, sectionIds) {\n        await this._sectionBasicAction(stateManager, 'section_show', sectionIds);\n    }\n\n    /**\n     * Show cms.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of cm ids\n     */\n    async cmShow(stateManager, cmIds) {\n        await this._cmBasicAction(stateManager, 'cm_show', cmIds);\n    }\n\n    /**\n     * Hide cms.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of cm ids\n     */\n    async cmHide(stateManager, cmIds) {\n        await this._cmBasicAction(stateManager, 'cm_hide', cmIds);\n    }\n\n    /**\n     * Stealth cms.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of cm ids\n     */\n    async cmStealth(stateManager, cmIds) {\n        await this._cmBasicAction(stateManager, 'cm_stealth', cmIds);\n    }\n\n    /**\n     * Duplicate course modules\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of course modules ids\n     * @param {number|undefined} targetSectionId the optional target sectionId\n     * @param {number|undefined} targetCmId the target course module id\n     */\n    async cmDuplicate(stateManager, cmIds, targetSectionId, targetCmId) {\n        const logEntry = this._getLoggerEntry(stateManager, 'cm_duplicate', cmIds);\n        const course = stateManager.get('course');\n        // Lock all target sections.\n        const sectionIds = new Set();\n        if (targetSectionId) {\n            sectionIds.add(targetSectionId);\n        } else {\n            cmIds.forEach((cmId) => {\n                const cm = stateManager.get('cm', cmId);\n                sectionIds.add(cm.sectionid);\n            });\n        }\n        this.sectionLock(stateManager, Array.from(sectionIds), true);\n\n        const updates = await this._callEditWebservice('cm_duplicate', course.id, cmIds, targetSectionId, targetCmId);\n        this.bulkReset(stateManager);\n        stateManager.processUpdates(updates);\n\n        this.sectionLock(stateManager, Array.from(sectionIds), false);\n        stateManager.addLoggerEntry(await logEntry);\n    }\n\n    /**\n     * Move course modules to specific course location.\n     *\n     * Note that one of targetSectionId or targetCmId should be provided in order to identify the\n     * new location:\n     *  - targetCmId: the activities will be located avobe the target cm. The targetSectionId\n     *                value will be ignored in this case.\n     *  - targetSectionId: the activities will be appended to the section. In this case\n     *                     targetSectionId should not be present.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmids the list of cm ids to move\n     * @param {number} targetSectionId the target section id\n     * @param {number} targetCmId the target course module id\n     */\n    async cmMove(stateManager, cmids, targetSectionId, targetCmId) {\n        if (!targetSectionId && !targetCmId) {\n            throw new Error(`Mutation cmMove requires targetSectionId or targetCmId`);\n        }\n        const course = stateManager.get('course');\n        this.cmLock(stateManager, cmids, true);\n        const updates = await this._callEditWebservice('cm_move', course.id, cmids, targetSectionId, targetCmId);\n        this.bulkReset(stateManager);\n        stateManager.processUpdates(updates);\n        this.cmLock(stateManager, cmids, false);\n    }\n\n    /**\n     * Move course modules to specific course location.\n     *\n     * @deprecated since Moodle 4.4 MDL-77038.\n     * @todo MDL-80116 This will be deleted in Moodle 4.8.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of section ids to move\n     * @param {number} targetSectionId the target section id\n     */\n    async sectionMove(stateManager, sectionIds, targetSectionId) {\n        log.debug('sectionMove() is deprecated. Use sectionMoveAfter() instead');\n        if (!targetSectionId) {\n            throw new Error(`Mutation sectionMove requires targetSectionId`);\n        }\n        const course = stateManager.get('course');\n        this.sectionLock(stateManager, sectionIds, true);\n        const updates = await this._callEditWebservice('section_move', course.id, sectionIds, targetSectionId);\n        this.bulkReset(stateManager);\n        stateManager.processUpdates(updates);\n        this.sectionLock(stateManager, sectionIds, false);\n    }\n\n    /**\n     * Move course modules after a specific course location.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of section ids to move\n     * @param {number} targetSectionId the target section id\n     */\n    async sectionMoveAfter(stateManager, sectionIds, targetSectionId) {\n        if (!targetSectionId) {\n            throw new Error(`Mutation sectionMoveAfter requires targetSectionId`);\n        }\n        const course = stateManager.get('course');\n        this.sectionLock(stateManager, sectionIds, true);\n        const updates = await this._callEditWebservice('section_move_after', course.id, sectionIds, targetSectionId);\n        this.bulkReset(stateManager);\n        stateManager.processUpdates(updates);\n        this.sectionLock(stateManager, sectionIds, false);\n    }\n\n    /**\n     * Add a new section to a specific course location.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {number} targetSectionId optional the target section id\n     */\n    async addSection(stateManager, targetSectionId) {\n        if (!targetSectionId) {\n            targetSectionId = 0;\n        }\n        const course = stateManager.get('course');\n        const updates = await this._callEditWebservice('section_add', course.id, [], targetSectionId);\n        stateManager.processUpdates(updates);\n        const logEntry = this._getLoggerEntry(stateManager, 'section_add', []);\n        stateManager.addLoggerEntry(await logEntry);\n    }\n\n    /**\n     * Delete sections.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of course modules ids\n     */\n    async sectionDelete(stateManager, sectionIds) {\n        const course = stateManager.get('course');\n        const logEntry = this._getLoggerEntry(stateManager, 'section_delete', sectionIds);\n        const updates = await this._callEditWebservice('section_delete', course.id, sectionIds);\n        this.bulkReset(stateManager);\n        stateManager.processUpdates(updates);\n        stateManager.addLoggerEntry(await logEntry);\n    }\n\n    /**\n     * Delete cms.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of section ids\n     */\n    async cmDelete(stateManager, cmIds) {\n        const course = stateManager.get('course');\n        const logEntry = this._getLoggerEntry(stateManager, 'cm_delete', cmIds);\n        this.cmLock(stateManager, cmIds, true);\n        const updates = await this._callEditWebservice('cm_delete', course.id, cmIds);\n        this.bulkReset(stateManager);\n        this.cmLock(stateManager, cmIds, false);\n        stateManager.processUpdates(updates);\n        stateManager.addLoggerEntry(await logEntry);\n    }\n\n    /**\n     * Add a new module to a specific course section.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {string} modName the modulename to add\n     * @param {number} targetSectionNum the target section number\n     * @param {number} targetCmId optional the target cm id\n     */\n    async addModule(stateManager, modName, targetSectionNum, targetCmId) {\n        if (!modName) {\n            throw new Error(`Mutation addModule requires moduleName`);\n        }\n        if (!targetSectionNum) {\n            throw new Error(`Mutation addModule requires targetSectionNum`);\n        }\n        if (!targetCmId) {\n            targetCmId = 0;\n        }\n        const course = stateManager.get('course');\n        const updates = await this._callAddModuleWebservice(course.id, modName, targetSectionNum, targetCmId);\n        stateManager.processUpdates(updates);\n    }\n\n    /**\n     * Add a new module to a specific course section.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {string} modName the modulename to add\n     * @param {number} targetSectionId the target section id\n     * @param {number} targetCmId optional the target cm id\n     */\n    async newModule(stateManager, modName, targetSectionId, targetCmId) {\n        if (!modName) {\n            throw new Error(`Mutation newModule requires moduleName`);\n        }\n        if (!targetSectionId) {\n            throw new Error(`Mutation newModule requires targetSectionId`);\n        }\n        if (!targetCmId) {\n            targetCmId = 0;\n        }\n        const course = stateManager.get('course');\n        const pluginname = await getString(\n            'pluginname',\n            `${modName.toLowerCase()}`,\n        );\n        const logEntry = this._getLoggerEntry(stateManager, 'cm_add', [], {\n            feedbackParams: {\n                'modname': pluginname,\n            },\n        });\n        const updates = await this._callNewModuleWebservice(course.id, modName, targetSectionId, targetCmId);\n        stateManager.processUpdates(updates);\n        stateManager.addLoggerEntry(await logEntry);\n    }\n\n    /**\n     * Mark or unmark course modules as dragging.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of course modules ids\n     * @param {bool} dragValue the new dragging value\n     */\n    cmDrag(stateManager, cmIds, dragValue) {\n        this.setPageItem(stateManager);\n        this._setElementsValue(stateManager, 'cm', cmIds, 'dragging', dragValue);\n    }\n\n    /**\n     * Mark or unmark course sections as dragging.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of section ids\n     * @param {bool} dragValue the new dragging value\n     */\n    sectionDrag(stateManager, sectionIds, dragValue) {\n        this.setPageItem(stateManager);\n        this._setElementsValue(stateManager, 'section', sectionIds, 'dragging', dragValue);\n    }\n\n    /**\n     * Mark or unmark course modules as complete.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of course modules ids\n     * @param {bool} complete the new completion value\n     */\n    async cmCompletion(stateManager, cmIds, complete) {\n        const newState = (complete) ? 1 : 0;\n        const action = (newState == 1) ? 'cm_complete' : 'cm_uncomplete';\n        const logEntry = this._getLoggerEntry(stateManager, action, cmIds);\n        stateManager.setReadOnly(false);\n        cmIds.forEach((id) => {\n            const element = stateManager.get('cm', id);\n            if (element) {\n                element.isoverallcomplete = complete;\n                element.completionstate = newState;\n            }\n        });\n        stateManager.setReadOnly(true);\n        stateManager.addLoggerEntry(await logEntry);\n    }\n\n    /**\n     * Move cms to the right: indent = 1.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of cm ids\n     */\n    async cmMoveRight(stateManager, cmIds) {\n        await this._cmBasicAction(stateManager, 'cm_moveright', cmIds);\n    }\n\n    /**\n     * Move cms to the left: indent = 0.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of cm ids\n     */\n    async cmMoveLeft(stateManager, cmIds) {\n        await this._cmBasicAction(stateManager, 'cm_moveleft', cmIds);\n    }\n\n    /**\n     * Set cms group mode to NOGROUPS.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of cm ids\n     */\n    async cmNoGroups(stateManager, cmIds) {\n        await this._cmBasicAction(stateManager, 'cm_nogroups', cmIds);\n    }\n\n    /**\n     * Set cms group mode to VISIBLEGROUPS.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of cm ids\n     */\n    async cmVisibleGroups(stateManager, cmIds) {\n        await this._cmBasicAction(stateManager, 'cm_visiblegroups', cmIds);\n    }\n\n    /**\n     * Set cms group mode to SEPARATEGROUPS.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of cm ids\n     */\n    async cmSeparateGroups(stateManager, cmIds) {\n        await this._cmBasicAction(stateManager, 'cm_separategroups', cmIds);\n    }\n\n    /**\n     * Lock or unlock course modules.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of course modules ids\n     * @param {bool} lockValue the new locked value\n     */\n    cmLock(stateManager, cmIds, lockValue) {\n        this._setElementsValue(stateManager, 'cm', cmIds, 'locked', lockValue);\n    }\n\n    /**\n     * Lock or unlock course sections.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of section ids\n     * @param {bool} lockValue the new locked value\n     */\n    sectionLock(stateManager, sectionIds, lockValue) {\n        this._setElementsValue(stateManager, 'section', sectionIds, 'locked', lockValue);\n    }\n\n    _setElementsValue(stateManager, name, ids, fieldName, newValue) {\n        stateManager.setReadOnly(false);\n        ids.forEach((id) => {\n            const element = stateManager.get(name, id);\n            if (element) {\n                element[fieldName] = newValue;\n            }\n        });\n        stateManager.setReadOnly(true);\n    }\n\n    /**\n     * Set the page current item.\n     *\n     * Only one element of the course state can be the page item at a time.\n     *\n     * There are several actions that can alter the page current item. For example, when the user is in an activity\n     * page, the page item is always the activity one. However, in a course page, when the user scrolls to an element,\n     * this element get the page item.\n     *\n     * If the page item is static means that it is not meant to change. This is important because\n     * static page items has some special logic. For example, if a cm is the static page item\n     * and it is inside a collapsed section, the course index will expand the section to make it visible.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {String|undefined} type the element type (section or cm). Undefined will remove the current page item.\n     * @param {Number|undefined} id the element id\n     * @param {boolean|undefined} isStatic if the page item is static\n     */\n    setPageItem(stateManager, type, id, isStatic) {\n        let newPageItem;\n        if (type !== undefined) {\n            newPageItem = stateManager.get(type, id);\n            if (!newPageItem) {\n                return;\n            }\n        }\n        stateManager.setReadOnly(false);\n        // Remove the current page item.\n        const course = stateManager.get('course');\n        course.pageItem = null;\n        // Save the new page item.\n        if (newPageItem) {\n            course.pageItem = {\n                id,\n                type,\n                sectionId: (type == 'section') ? newPageItem.id : newPageItem.sectionid,\n                isStatic,\n            };\n        }\n        stateManager.setReadOnly(true);\n    }\n\n    /**\n     * Unlock all course elements.\n     *\n     * @param {StateManager} stateManager the current state manager\n     */\n    unlockAll(stateManager) {\n        const state = stateManager.state;\n        stateManager.setReadOnly(false);\n        state.section.forEach((section) => {\n            section.locked = false;\n        });\n        state.cm.forEach((cm) => {\n            cm.locked = false;\n        });\n        stateManager.setReadOnly(true);\n    }\n\n    /**\n     * Update the course index collapsed attribute of some sections.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the affected section ids\n     * @param {boolean} collapsed the new collapsed value\n     */\n    async sectionIndexCollapsed(stateManager, sectionIds, collapsed) {\n        const affectedSections = this._updateStateSectionPreference(stateManager, 'indexcollapsed', sectionIds, collapsed);\n        if (!affectedSections) {\n            return;\n        }\n        const course = stateManager.get('course');\n        let actionName = 'section_index_collapsed';\n        if (!collapsed) {\n            actionName = 'section_index_expanded';\n        }\n        await this._callEditWebservice(actionName, course.id, affectedSections);\n    }\n\n    /**\n     * Update the course index collapsed attribute of all sections.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {boolean} collapsed the new collapsed value\n     */\n    async allSectionsIndexCollapsed(stateManager, collapsed) {\n        const sectionIds = stateManager.getIds('section');\n        this.sectionIndexCollapsed(stateManager, sectionIds, collapsed);\n    }\n\n    /**\n     * Update the course content collapsed attribute of some sections.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the affected section ids\n     * @param {boolean} collapsed the new collapsed value\n     */\n    async sectionContentCollapsed(stateManager, sectionIds, collapsed) {\n        const affectedSections = this._updateStateSectionPreference(stateManager, 'contentcollapsed', sectionIds, collapsed);\n        if (!affectedSections) {\n            return;\n        }\n        const course = stateManager.get('course');\n        let actionName = 'section_content_collapsed';\n        if (!collapsed) {\n            actionName = 'section_content_expanded';\n        }\n        await this._callEditWebservice(actionName, course.id, affectedSections);\n    }\n\n    /**\n     * Private batch update for a section preference attribute.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {string} preferenceName the preference name\n     * @param {array} sectionIds the affected section ids\n     * @param {boolean} preferenceValue the new preferenceValue value\n     * @return {Number[]|null} sections ids with the preference value true or null if no update is required\n     */\n    _updateStateSectionPreference(stateManager, preferenceName, sectionIds, preferenceValue) {\n        stateManager.setReadOnly(false);\n        const affectedSections = [];\n        // Check if we need to update preferences.\n        sectionIds.forEach(sectionId => {\n            const section = stateManager.get('section', sectionId);\n            if (section === undefined) {\n                stateManager.setReadOnly(true);\n                return null;\n            }\n            const newValue = preferenceValue ?? section[preferenceName];\n            if (section[preferenceName] != newValue) {\n                section[preferenceName] = newValue;\n                affectedSections.push(section.id);\n            }\n        });\n        stateManager.setReadOnly(true);\n        return affectedSections;\n    }\n\n    /**\n     * Enable/disable bulk editing.\n     *\n     * Note: reenabling the bulk will clean the current selection.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {Boolean} enabled the new bulk state.\n     */\n    bulkEnable(stateManager, enabled) {\n        const state = stateManager.state;\n        stateManager.setReadOnly(false);\n        state.bulk.enabled = enabled;\n        state.bulk.selectedType = '';\n        state.bulk.selection = [];\n        stateManager.setReadOnly(true);\n    }\n\n    /**\n     * Reset the current selection.\n     * @param {StateManager} stateManager the current state manager\n     */\n    bulkReset(stateManager) {\n        const state = stateManager.state;\n        stateManager.setReadOnly(false);\n        state.bulk.selectedType = '';\n        state.bulk.selection = [];\n        stateManager.setReadOnly(true);\n    }\n\n    /**\n     * Select a list of cms.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of cm ids\n     */\n    cmSelect(stateManager, cmIds) {\n        this._addIdsToSelection(stateManager, 'cm', cmIds);\n    }\n\n    /**\n     * Unselect a list of cms.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of cm ids\n     */\n    cmUnselect(stateManager, cmIds) {\n        this._removeIdsFromSelection(stateManager, 'cm', cmIds);\n    }\n\n    /**\n     * Select a list of sections.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of cm ids\n     */\n    sectionSelect(stateManager, sectionIds) {\n        this._addIdsToSelection(stateManager, 'section', sectionIds);\n    }\n\n    /**\n     * Unselect a list of sections.\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of cm ids\n     */\n    sectionUnselect(stateManager, sectionIds) {\n        this._removeIdsFromSelection(stateManager, 'section', sectionIds);\n    }\n\n    /**\n     * Add some ids to the current bulk selection.\n     * @param {StateManager} stateManager the current state manager\n     * @param {String} typeName the type name (section/cm)\n     * @param {array} ids the list of ids\n     */\n    _addIdsToSelection(stateManager, typeName, ids) {\n        const bulk = stateManager.state.bulk;\n        if (!bulk?.enabled) {\n            throw new Error(`Bulk is not enabled`);\n        }\n        if (bulk?.selectedType !== \"\" && bulk?.selectedType !== typeName) {\n            throw new Error(`Cannot add ${typeName} to the current selection`);\n        }\n\n        // Stored ids are strings for compatability with HTML data attributes.\n        ids = ids.map(value => value.toString());\n\n        stateManager.setReadOnly(false);\n        bulk.selectedType = typeName;\n        const newSelection = new Set([...bulk.selection, ...ids]);\n        bulk.selection = [...newSelection];\n        stateManager.setReadOnly(true);\n    }\n\n    /**\n     * Remove some ids to the current bulk selection.\n     *\n     * The method resets the selection type if the current selection is empty.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {String} typeName the type name (section/cm)\n     * @param {array} ids the list of ids\n     */\n    _removeIdsFromSelection(stateManager, typeName, ids) {\n        const bulk = stateManager.state.bulk;\n        if (!bulk?.enabled) {\n            throw new Error(`Bulk is not enabled`);\n        }\n        if (bulk?.selectedType !== \"\" && bulk?.selectedType !== typeName) {\n            throw new Error(`Cannot remove ${typeName} from the current selection`);\n        }\n\n        // Stored ids are strings for compatability with HTML data attributes.\n        ids = ids.map(value => value.toString());\n\n        stateManager.setReadOnly(false);\n        const IdsToFilter = new Set(ids);\n        bulk.selection = bulk.selection.filter(current => !IdsToFilter.has(current));\n        if (bulk.selection.length === 0) {\n            bulk.selectedType = '';\n        }\n        stateManager.setReadOnly(true);\n    }\n\n    /**\n     * Get updated state data related to some cm ids.\n     *\n     * @method cmState\n     * @param {StateManager} stateManager the current state\n     * @param {array} cmids the list of cm ids to update\n     */\n    async cmState(stateManager, cmids) {\n        this.cmLock(stateManager, cmids, true);\n        const course = stateManager.get('course');\n        const updates = await this._callEditWebservice('cm_state', course.id, cmids);\n        stateManager.processUpdates(updates);\n        this.cmLock(stateManager, cmids, false);\n    }\n\n    /**\n     * Get updated state data related to some section ids.\n     *\n     * @method sectionState\n     * @param {StateManager} stateManager the current state\n     * @param {array} sectionIds the list of section ids to update\n     */\n    async sectionState(stateManager, sectionIds) {\n        this.sectionLock(stateManager, sectionIds, true);\n        const course = stateManager.get('course');\n        const updates = await this._callEditWebservice('section_state', course.id, sectionIds);\n        stateManager.processUpdates(updates);\n        this.sectionLock(stateManager, sectionIds, false);\n    }\n\n    /**\n     * Get the full updated state data of the course.\n     *\n     * @param {StateManager} stateManager the current state\n     */\n    async courseState(stateManager) {\n        const course = stateManager.get('course');\n        const updates = await this._callEditWebservice('course_state', course.id);\n        stateManager.processUpdates(updates);\n    }\n\n}\n"],"names":["isLoggerSet","action","courseId","ids","targetSectionId","targetCmId","args","courseid","targetsectionid","targetcmid","ajaxresult","ajax","call","methodname","JSON","parse","modName","targetSectionNum","modname","targetsectionnum","stateManager","sectionIds","logEntry","this","_getLoggerEntry","itemType","course","get","sectionLock","updates","_callEditWebservice","id","bulkReset","processUpdates","addLoggerEntry","cmIds","cmLock","itemIds","data","setLogger","SRLogger","feedbackParams","split","batch","length","count","itemInfo","name","title","targetSectionName","targetCmName","feedbackMessage","toLowerCase","component","init","addUpdateTypes","prepareFields","_prepareFields","updateName","fields","locked","_sectionBasicAction","_cmBasicAction","Set","add","forEach","cmId","cm","sectionid","Array","from","cmids","Error","debug","_callAddModuleWebservice","pluginname","_callNewModuleWebservice","cmDrag","dragValue","setPageItem","_setElementsValue","sectionDrag","complete","newState","setReadOnly","element","isoverallcomplete","completionstate","lockValue","fieldName","newValue","type","isStatic","newPageItem","undefined","pageItem","sectionId","unlockAll","state","section","collapsed","affectedSections","_updateStateSectionPreference","actionName","getIds","sectionIndexCollapsed","preferenceName","preferenceValue","push","bulkEnable","enabled","bulk","selectedType","selection","cmSelect","_addIdsToSelection","cmUnselect","_removeIdsFromSelection","sectionSelect","sectionUnselect","typeName","map","value","toString","newSelection","IdsToFilter","filter","current","has"],"mappings":"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"}