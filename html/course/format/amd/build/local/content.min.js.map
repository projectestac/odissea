{"version":3,"file":"content.min.js","sources":["../../src/local/content.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course index main component.\n *\n * @module     core_courseformat/local/content\n * @class      core_courseformat/local/content\n * @copyright  2020 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {BaseComponent} from 'core/reactive';\nimport {debounce} from 'core/utils';\nimport {getCurrentCourseEditor} from 'core_courseformat/courseeditor';\nimport inplaceeditable from 'core/inplace_editable';\nimport Section from 'core_courseformat/local/content/section';\nimport CmItem from 'core_courseformat/local/content/section/cmitem';\n// Course actions is needed for actions that are not migrated to components.\nimport courseActions from 'core_course/actions';\nimport DispatchActions from 'core_courseformat/local/content/actions';\nimport * as CourseEvents from 'core_course/events';\n// The jQuery module is only used for interacting with Boostrap 4. It can we removed when MDL-71979 is integrated.\nimport jQuery from 'jquery';\nimport Pending from 'core/pending';\nimport log from 'core/log';\n\nexport default class Component extends BaseComponent {\n\n    /**\n     * Constructor hook.\n     *\n     * @param {Object} descriptor the component descriptor\n     */\n    create(descriptor) {\n        // Optional component name for debugging.\n        this.name = 'course_format';\n        // Default query selectors.\n        this.selectors = {\n            SECTION: `[data-for='section']`,\n            SECTION_ITEM: `[data-for='section_title']`,\n            SECTION_CMLIST: `[data-for='cmlist']`,\n            COURSE_SECTIONLIST: `[data-for='course_sectionlist']`,\n            CM: `[data-for='cmitem']`,\n            PAGE: `#page`,\n            TOGGLER: `[data-action=\"togglecoursecontentsection\"]`,\n            COLLAPSE: `[data-toggle=\"collapse\"]`,\n            TOGGLEALL: `[data-toggle=\"toggleall\"]`,\n            // Formats can override the activity tag but a default one is needed to create new elements.\n            ACTIVITYTAG: 'li',\n            SECTIONTAG: 'li',\n        };\n        // Default classes to toggle on refresh.\n        this.classes = {\n            COLLAPSED: `collapsed`,\n            // Course content classes.\n            ACTIVITY: `activity`,\n            STATEDREADY: `stateready`,\n            SECTION: `section`,\n        };\n        // Array to save dettached elements during element resorting.\n        this.dettachedCms = {};\n        this.dettachedSections = {};\n        // Index of sections and cms components.\n        this.sections = {};\n        this.cms = {};\n        // The page section return.\n        this.sectionReturn = descriptor.sectionReturn ?? 0;\n        this.debouncedReloads = new Map();\n    }\n\n    /**\n     * Static method to create a component instance form the mustahce template.\n     *\n     * @param {string} target the DOM main element or its ID\n     * @param {object} selectors optional css selector overrides\n     * @param {number} sectionReturn the content section return\n     * @return {Component}\n     */\n    static init(target, selectors, sectionReturn) {\n        return new Component({\n            element: document.getElementById(target),\n            reactive: getCurrentCourseEditor(),\n            selectors,\n            sectionReturn,\n        });\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * @param {Object} state the state data\n     */\n    stateReady(state) {\n        this._indexContents();\n        // Activate section togglers.\n        this.addEventListener(this.element, 'click', this._sectionTogglers);\n\n        // Collapse/Expand all sections button.\n        const toogleAll = this.getElement(this.selectors.TOGGLEALL);\n        if (toogleAll) {\n\n            // Ensure collapse menu button adds aria-controls attribute referring to each collapsible element.\n            const collapseElements = this.getElements(this.selectors.COLLAPSE);\n            const collapseElementIds = [...collapseElements].map(element => element.id);\n            toogleAll.setAttribute('aria-controls', collapseElementIds.join(' '));\n\n            this.addEventListener(toogleAll, 'click', this._allSectionToggler);\n            this.addEventListener(toogleAll, 'keydown', e => {\n                // Collapse/expand all sections when Space key is pressed on the toggle button.\n                if (e.key === ' ') {\n                    this._allSectionToggler(e);\n                }\n            });\n            this._refreshAllSectionsToggler(state);\n        }\n\n        if (this.reactive.supportComponents) {\n            // Actions are only available in edit mode.\n            if (this.reactive.isEditing) {\n                new DispatchActions(this);\n            }\n\n            // Mark content as state ready.\n            this.element.classList.add(this.classes.STATEDREADY);\n        }\n\n        // Capture completion events.\n        this.addEventListener(\n            this.element,\n            CourseEvents.manualCompletionToggled,\n            this._completionHandler\n        );\n\n        // Capture page scroll to update page item.\n        this.addEventListener(\n            document.querySelector(this.selectors.PAGE),\n            \"scroll\",\n            this._scrollHandler\n        );\n    }\n\n    /**\n     * Setup sections toggler.\n     *\n     * Toggler click is delegated to the main course content element because new sections can\n     * appear at any moment and this way we prevent accidental double bindings.\n     *\n     * @param {Event} event the triggered event\n     */\n    _sectionTogglers(event) {\n        const sectionlink = event.target.closest(this.selectors.TOGGLER);\n        const closestCollapse = event.target.closest(this.selectors.COLLAPSE);\n        // Assume that chevron is the only collapse toggler in a section heading;\n        // I think this is the most efficient way to verify at the moment.\n        const isChevron = closestCollapse?.closest(this.selectors.SECTION_ITEM);\n\n        if (sectionlink || isChevron) {\n\n            const section = event.target.closest(this.selectors.SECTION);\n            const toggler = section.querySelector(this.selectors.COLLAPSE);\n            const isCollapsed = toggler?.classList.contains(this.classes.COLLAPSED) ?? false;\n\n            if (isChevron || isCollapsed) {\n                // Update the state.\n                const sectionId = section.getAttribute('data-id');\n                this.reactive.dispatch(\n                    'sectionContentCollapsed',\n                    [sectionId],\n                    !isCollapsed\n                );\n            }\n        }\n    }\n\n    /**\n     * Handle the collapse/expand all sections button.\n     *\n     * Toggler click is delegated to the main course content element because new sections can\n     * appear at any moment and this way we prevent accidental double bindings.\n     *\n     * @param {Event} event the triggered event\n     */\n    _allSectionToggler(event) {\n        event.preventDefault();\n\n        const target = event.target.closest(this.selectors.TOGGLEALL);\n        const isAllCollapsed = target.classList.contains(this.classes.COLLAPSED);\n\n        const course = this.reactive.get('course');\n        this.reactive.dispatch(\n            'sectionContentCollapsed',\n            course.sectionlist ?? [],\n            !isAllCollapsed\n        );\n    }\n\n    /**\n     * Return the component watchers.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        // Section return is a global page variable but most formats define it just before start printing\n        // the course content. This is the reason why we define this page setting here.\n        this.reactive.sectionReturn = this.sectionReturn;\n\n        // Check if the course format is compatible with reactive components.\n        if (!this.reactive.supportComponents) {\n            return [];\n        }\n        return [\n            // State changes that require to reload some course modules.\n            {watch: `cm.visible:updated`, handler: this._reloadCm},\n            {watch: `cm.stealth:updated`, handler: this._reloadCm},\n            {watch: `cm.indent:updated`, handler: this._reloadCm},\n            // Update section number and title.\n            {watch: `section.number:updated`, handler: this._refreshSectionNumber},\n            // Collapse and expand sections.\n            {watch: `section.contentcollapsed:updated`, handler: this._refreshSectionCollapsed},\n            // Sections and cm sorting.\n            {watch: `transaction:start`, handler: this._startProcessing},\n            {watch: `course.sectionlist:updated`, handler: this._refreshCourseSectionlist},\n            {watch: `section.cmlist:updated`, handler: this._refreshSectionCmlist},\n            // Section visibility.\n            {watch: `section.visible:updated`, handler: this._reloadSection},\n            // Reindex sections and cms.\n            {watch: `state:updated`, handler: this._indexContents},\n            // State changes thaty require to reload course modules.\n            {watch: `cm.visible:updated`, handler: this._reloadCm},\n            {watch: `cm.sectionid:updated`, handler: this._reloadCm},\n        ];\n    }\n\n    /**\n     * Update section collapsed state via bootstrap 4 if necessary.\n     *\n     * Formats that do not use bootstrap 4 must override this method in order to keep the section\n     * toggling working.\n     *\n     * @param {object} args\n     * @param {Object} args.state The state data\n     * @param {Object} args.element The element to update\n     */\n    _refreshSectionCollapsed({state, element}) {\n        const target = this.getElement(this.selectors.SECTION, element.id);\n        if (!target) {\n            throw new Error(`Unknown section with ID ${element.id}`);\n        }\n        // Check if it is already done.\n        const toggler = target.querySelector(this.selectors.COLLAPSE);\n        const isCollapsed = toggler?.classList.contains(this.classes.COLLAPSED) ?? false;\n\n        if (element.contentcollapsed !== isCollapsed) {\n            let collapsibleId = toggler.dataset.target ?? toggler.getAttribute(\"href\");\n            if (!collapsibleId) {\n                return;\n            }\n            collapsibleId = collapsibleId.replace('#', '');\n            const collapsible = document.getElementById(collapsibleId);\n            if (!collapsible) {\n                return;\n            }\n\n            // Course index is based on Bootstrap 4 collapsibles. To collapse them we need jQuery to\n            // interact with collapsibles methods. Hopefully, this will change in Bootstrap 5 because\n            // it does not require jQuery anymore (when MDL-71979 is integrated).\n            jQuery(collapsible).collapse(element.contentcollapsed ? 'hide' : 'show');\n        }\n\n        this._refreshAllSectionsToggler(state);\n    }\n\n    /**\n     * Refresh the collapse/expand all sections element.\n     *\n     * @param {Object} state The state data\n     */\n    _refreshAllSectionsToggler(state) {\n        const target = this.getElement(this.selectors.TOGGLEALL);\n        if (!target) {\n            return;\n        }\n        // Check if we have all sections collapsed/expanded.\n        let allcollapsed = true;\n        let allexpanded = true;\n        state.section.forEach(\n            section => {\n                allcollapsed = allcollapsed && section.contentcollapsed;\n                allexpanded = allexpanded && !section.contentcollapsed;\n            }\n        );\n        if (allcollapsed) {\n            target.classList.add(this.classes.COLLAPSED);\n            target.setAttribute('aria-expanded', false);\n        }\n        if (allexpanded) {\n            target.classList.remove(this.classes.COLLAPSED);\n            target.setAttribute('aria-expanded', true);\n        }\n    }\n\n    /**\n     * Setup the component to start a transaction.\n     *\n     * Some of the course actions replaces the current DOM element with a new one before updating the\n     * course state. This means the component cannot preload any index properly until the transaction starts.\n     *\n     */\n    _startProcessing() {\n        // During a section or cm sorting, some elements could be dettached from the DOM and we\n        // need to store somewhare in case they are needed later.\n        this.dettachedCms = {};\n        this.dettachedSections = {};\n    }\n\n    /**\n     * Activity manual completion listener.\n     *\n     * @param {Event} event the custom ecent\n     */\n    _completionHandler({detail}) {\n        if (detail === undefined) {\n            return;\n        }\n        this.reactive.dispatch('cmCompletion', [detail.cmid], detail.completed);\n    }\n\n    /**\n     * Check the current page scroll and update the active element if necessary.\n     */\n    _scrollHandler() {\n        const pageOffset = document.querySelector(this.selectors.PAGE).scrollTop;\n        const items = this.reactive.getExporter().allItemsArray(this.reactive.state);\n        // Check what is the active element now.\n        let pageItem = null;\n        items.every(item => {\n            const index = (item.type === 'section') ? this.sections : this.cms;\n            if (index[item.id] === undefined) {\n                return true;\n            }\n\n            const element = index[item.id].element;\n            // Activities without url can only be page items in edit mode.\n            if (item.type === 'cm' && !item.url && !this.reactive.isEditing) {\n                return pageOffset >= element.offsetTop;\n            }\n            pageItem = item;\n            return pageOffset >= element.offsetTop;\n        });\n        if (pageItem) {\n            this.reactive.dispatch('setPageItem', pageItem.type, pageItem.id);\n        }\n    }\n\n    /**\n     * Update a course section when the section number changes.\n     *\n     * The courseActions module used for most course section tools still depends on css classes and\n     * section numbers (not id). To prevent inconsistencies when a section is moved, we need to refresh\n     * the\n     *\n     * Course formats can override the section title rendering so the frontend depends heavily on backend\n     * rendering. Luckily in edit mode we can trigger a title update using the inplace_editable module.\n     *\n     * @param {Object} param\n     * @param {Object} param.element details the update details.\n     */\n    _refreshSectionNumber({element}) {\n        // Find the element.\n        const target = this.getElement(this.selectors.SECTION, element.id);\n        if (!target) {\n            // Job done. Nothing to refresh.\n            return;\n        }\n        // Update section numbers in all data, css and YUI attributes.\n        target.id = `section-${element.number}`;\n        // YUI uses section number as section id in data-sectionid, in principle if a format use components\n        // don't need this sectionid attribute anymore, but we keep the compatibility in case some plugin\n        // use it for legacy purposes.\n        target.dataset.sectionid = element.number;\n        // The data-number is the attribute used by components to store the section number.\n        target.dataset.number = element.number;\n\n        // Update title and title inplace editable, if any.\n        const inplace = inplaceeditable.getInplaceEditable(target.querySelector(this.selectors.SECTION_ITEM));\n        if (inplace) {\n            // The course content HTML can be modified at any moment, so the function need to do some checkings\n            // to make sure the inplace editable still represents the same itemid.\n            const currentvalue = inplace.getValue();\n            const currentitemid = inplace.getItemId();\n            // Unnamed sections must be recalculated.\n            if (inplace.getValue() === '') {\n                // The value to send can be an empty value if it is a default name.\n                if (currentitemid == element.id && (currentvalue != element.rawtitle || element.rawtitle == '')) {\n                    inplace.setValue(element.rawtitle);\n                }\n            }\n        }\n    }\n\n    /**\n     * Refresh a section cm list.\n     *\n     * @param {Object} param\n     * @param {Object} param.element details the update details.\n     */\n    _refreshSectionCmlist({element}) {\n        const cmlist = element.cmlist ?? [];\n        const section = this.getElement(this.selectors.SECTION, element.id);\n        const listparent = section?.querySelector(this.selectors.SECTION_CMLIST);\n        // A method to create a fake element to be replaced when the item is ready.\n        const createCm = this._createCmItem.bind(this);\n        if (listparent) {\n            this._fixOrder(listparent, cmlist, this.selectors.CM, this.dettachedCms, createCm);\n        }\n    }\n\n    /**\n     * Refresh the section list.\n     *\n     * @param {Object} param\n     * @param {Object} param.element details the update details.\n     */\n    _refreshCourseSectionlist({element}) {\n        // If we have a section return means we only show a single section so no need to fix order.\n        if (this.reactive.sectionReturn != 0) {\n            return;\n        }\n        const sectionlist = element.sectionlist ?? [];\n        const listparent = this.getElement(this.selectors.COURSE_SECTIONLIST);\n        // For now section cannot be created at a frontend level.\n        const createSection = this._createSectionItem.bind(this);\n        if (listparent) {\n            this._fixOrder(listparent, sectionlist, this.selectors.SECTION, this.dettachedSections, createSection);\n        }\n    }\n\n    /**\n     * Regenerate content indexes.\n     *\n     * This method is used when a legacy action refresh some content element.\n     */\n    _indexContents() {\n        // Find unindexed sections.\n        this._scanIndex(\n            this.selectors.SECTION,\n            this.sections,\n            (item) => {\n                return new Section(item);\n            }\n        );\n\n        // Find unindexed cms.\n        this._scanIndex(\n            this.selectors.CM,\n            this.cms,\n            (item) => {\n                return new CmItem(item);\n            }\n        );\n    }\n\n    /**\n     * Reindex a content (section or cm) of the course content.\n     *\n     * This method is used internally by _indexContents.\n     *\n     * @param {string} selector the DOM selector to scan\n     * @param {*} index the index attribute to update\n     * @param {*} creationhandler method to create a new indexed element\n     */\n    _scanIndex(selector, index, creationhandler) {\n        const items = this.getElements(`${selector}:not([data-indexed])`);\n        items.forEach((item) => {\n            if (!item?.dataset?.id) {\n                return;\n            }\n            // Delete previous item component.\n            if (index[item.dataset.id] !== undefined) {\n                index[item.dataset.id].unregister();\n            }\n            // Create the new component.\n            index[item.dataset.id] = creationhandler({\n                ...this,\n                element: item,\n            });\n            // Mark as indexed.\n            item.dataset.indexed = true;\n        });\n    }\n\n    /**\n     * Reload a course module contents.\n     *\n     * Most course module HTML is still strongly backend dependant.\n     * Some changes require to get a new version of the module.\n     *\n     * @param {object} param0 the watcher details\n     * @param {object} param0.element the state object\n     */\n    _reloadCm({element}) {\n        if (!this.getElement(this.selectors.CM, element.id)) {\n            return;\n        }\n        const debouncedReload = this._getDebouncedReloadCm(element.id);\n        debouncedReload();\n    }\n\n    /**\n     * Generate or get a reload CM debounced function.\n     * @param {Number} cmId\n     * @returns {Function} the debounced reload function\n     */\n    _getDebouncedReloadCm(cmId) {\n        const pendingKey = `courseformat/content:reloadCm_${cmId}`;\n        let debouncedReload = this.debouncedReloads.get(pendingKey);\n        if (debouncedReload) {\n            return debouncedReload;\n        }\n        const reload = () => {\n            const pendingReload = new Pending(pendingKey);\n            this.debouncedReloads.delete(pendingKey);\n            const cmitem = this.getElement(this.selectors.CM, cmId);\n            if (!cmitem) {\n                return pendingReload.resolve();\n            }\n            const promise = courseActions.refreshModule(cmitem, cmId);\n            promise.then(() => {\n                this._indexContents();\n                return true;\n            }).catch((error) => {\n                log.debug(error);\n            }).finally(() => {\n                pendingReload.resolve();\n            });\n            return pendingReload;\n        };\n        debouncedReload = debounce(\n            reload,\n            200,\n            {\n                cancel: true, pending: true\n            }\n        );\n        this.debouncedReloads.set(pendingKey, debouncedReload);\n        return debouncedReload;\n    }\n\n    /**\n     * Cancel the active reload CM debounced function, if any.\n     * @param {Number} cmId\n     */\n    _cancelDebouncedReloadCm(cmId) {\n        const pendingKey = `courseformat/content:reloadCm_${cmId}`;\n        const debouncedReload = this.debouncedReloads.get(pendingKey);\n        if (!debouncedReload) {\n            return;\n        }\n        debouncedReload.cancel();\n        this.debouncedReloads.delete(pendingKey);\n    }\n\n    /**\n     * Reload a course section contents.\n     *\n     * Section HTML is still strongly backend dependant.\n     * Some changes require to get a new version of the section.\n     *\n     * @param {details} param0 the watcher details\n     * @param {object} param0.element the state object\n     */\n    _reloadSection({element}) {\n        const pendingReload = new Pending(`courseformat/content:reloadSection_${element.id}`);\n        const sectionitem = this.getElement(this.selectors.SECTION, element.id);\n        if (sectionitem) {\n            // Cancel any pending reload because the section will reload cms too.\n            for (const cmId of element.cmlist) {\n                this._cancelDebouncedReloadCm(cmId);\n            }\n            const promise = courseActions.refreshSection(sectionitem, element.id);\n            promise.then(() => {\n                this._indexContents();\n                return true;\n            }).catch((error) => {\n                log.debug(error);\n            }).finally(() => {\n                pendingReload.resolve();\n            });\n        }\n    }\n\n    /**\n     * Create a new course module item in a section.\n     *\n     * Thos method will append a fake item in the container and trigger an ajax request to\n     * replace the fake element by the real content.\n     *\n     * @param {Element} container the container element (section)\n     * @param {Number} cmid the course-module ID\n     * @returns {Element} the created element\n     */\n    _createCmItem(container, cmid) {\n        const newItem = document.createElement(this.selectors.ACTIVITYTAG);\n        newItem.dataset.for = 'cmitem';\n        newItem.dataset.id = cmid;\n        // The legacy actions.js requires a specific ID and class to refresh the CM.\n        newItem.id = `module-${cmid}`;\n        newItem.classList.add(this.classes.ACTIVITY);\n        container.append(newItem);\n        this._reloadCm({\n            element: this.reactive.get('cm', cmid),\n        });\n        return newItem;\n    }\n\n    /**\n     * Create a new section item.\n     *\n     * This method will append a fake item in the container and trigger an ajax request to\n     * replace the fake element by the real content.\n     *\n     * @param {Element} container the container element (section)\n     * @param {Number} sectionid the course-module ID\n     * @returns {Element} the created element\n     */\n    _createSectionItem(container, sectionid) {\n        const section = this.reactive.get('section', sectionid);\n        const newItem = document.createElement(this.selectors.SECTIONTAG);\n        newItem.dataset.for = 'section';\n        newItem.dataset.id = sectionid;\n        newItem.dataset.number = section.number;\n        // The legacy actions.js requires a specific ID and class to refresh the section.\n        newItem.id = `section-${sectionid}`;\n        newItem.classList.add(this.classes.SECTION);\n        container.append(newItem);\n        this._reloadSection({\n            element: section,\n        });\n        return newItem;\n    }\n\n    /**\n     * Fix/reorder the section or cms order.\n     *\n     * @param {Element} container the HTML element to reorder.\n     * @param {Array} neworder an array with the ids order\n     * @param {string} selector the element selector\n     * @param {Object} dettachedelements a list of dettached elements\n     * @param {function} createMethod method to create missing elements\n     */\n    async _fixOrder(container, neworder, selector, dettachedelements, createMethod) {\n        if (container === undefined) {\n            return;\n        }\n\n        // Empty lists should not be visible.\n        if (!neworder.length) {\n            container.classList.add('hidden');\n            container.innerHTML = '';\n            return;\n        }\n\n        // Grant the list is visible (in case it was empty).\n        container.classList.remove('hidden');\n\n        // Move the elements in order at the beginning of the list.\n        neworder.forEach((itemid, index) => {\n            let item = this.getElement(selector, itemid) ?? dettachedelements[itemid] ?? createMethod(container, itemid);\n            if (item === undefined) {\n                // Missing elements cannot be sorted.\n                return;\n            }\n            // Get the current elemnt at that position.\n            const currentitem = container.children[index];\n            if (currentitem === undefined) {\n                container.append(item);\n                return;\n            }\n            if (currentitem !== item) {\n                container.insertBefore(item, currentitem);\n            }\n        });\n\n        // Dndupload add a fake element we need to keep.\n        let dndFakeActivity;\n\n        // Remove the remaining elements.\n        while (container.children.length > neworder.length) {\n            const lastchild = container.lastChild;\n            if (lastchild?.classList?.contains('dndupload-preview')) {\n                dndFakeActivity = lastchild;\n            } else {\n                dettachedelements[lastchild?.dataset?.id ?? 0] = lastchild;\n            }\n            container.removeChild(lastchild);\n        }\n        // Restore dndupload fake element.\n        if (dndFakeActivity) {\n            container.append(dndFakeActivity);\n        }\n    }\n}\n"],"names":["Component","BaseComponent","create","descriptor","name","selectors","SECTION","SECTION_ITEM","SECTION_CMLIST","COURSE_SECTIONLIST","CM","PAGE","TOGGLER","COLLAPSE","TOGGLEALL","ACTIVITYTAG","SECTIONTAG","classes","COLLAPSED","ACTIVITY","STATEDREADY","dettachedCms","dettachedSections","sections","cms","sectionReturn","debouncedReloads","Map","target","element","document","getElementById","reactive","stateReady","state","_indexContents","addEventListener","this","_sectionTogglers","toogleAll","getElement","collapseElementIds","getElements","map","id","setAttribute","join","_allSectionToggler","e","key","_refreshAllSectionsToggler","supportComponents","isEditing","DispatchActions","classList","add","CourseEvents","manualCompletionToggled","_completionHandler","querySelector","_scrollHandler","event","sectionlink","closest","closestCollapse","isChevron","section","toggler","isCollapsed","contains","sectionId","getAttribute","dispatch","preventDefault","isAllCollapsed","course","get","sectionlist","getWatchers","watch","handler","_reloadCm","_refreshSectionNumber","_refreshSectionCollapsed","_startProcessing","_refreshCourseSectionlist","_refreshSectionCmlist","_reloadSection","Error","contentcollapsed","collapsibleId","dataset","replace","collapsible","collapse","allcollapsed","allexpanded","forEach","remove","detail","undefined","cmid","completed","pageOffset","scrollTop","items","getExporter","allItemsArray","pageItem","every","item","index","type","url","offsetTop","number","sectionid","inplace","inplaceeditable","getInplaceEditable","currentvalue","getValue","currentitemid","getItemId","rawtitle","setValue","cmlist","listparent","createCm","_createCmItem","bind","_fixOrder","createSection","_createSectionItem","_scanIndex","Section","CmItem","selector","creationhandler","_item$dataset","unregister","indexed","_getDebouncedReloadCm","debouncedReload","cmId","pendingKey","pendingReload","Pending","delete","cmitem","resolve","courseActions","refreshModule","then","catch","error","debug","finally","cancel","pending","set","_cancelDebouncedReloadCm","sectionitem","refreshSection","container","newItem","createElement","for","append","neworder","dettachedelements","createMethod","length","innerHTML","dndFakeActivity","itemid","currentitem","children","insertBefore","lastchild","lastChild","_lastchild$classList","_lastchild$dataset","removeChild"],"mappings":"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"}