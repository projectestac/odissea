{"version":3,"file":"content.min.js","sources":["../../src/courseformat/content.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course index main component.\n *\n * @module     format_multitopic/courseformat/content\n * @class      format_multitopic/courseformat/content\n * @copyright  2022 onwards James Calder and Otago Polytechnic\n * @copyright  based on work by 2020 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport BaseComponent from 'core_courseformat/local/content';\nimport {getCurrentCourseEditor} from 'core_courseformat/courseeditor';\nimport inplaceeditable from 'core/inplace_editable';\nimport Section from 'format_multitopic/courseformat/content/section';\nimport CmItem from 'format_multitopic/courseformat/content/section/cmitem';\nimport Templates from 'core/templates';\n\nexport default class Component extends BaseComponent {\n\n    /**\n     * Constructor hook.\n     *\n     * @param {Object} descriptor the component descriptor\n     */\n    create(descriptor) {\n        super.create(descriptor);\n        this.originalsinglesectionid = this.element.querySelector(\"ul.sections\").dataset.originalsinglesectionid;\n    }\n\n    /**\n     * Static method to create a component instance form the mustahce template.\n     *\n     * @param {string} target the DOM main element or its ID\n     * @param {object} selectors optional css selector overrides\n     * @param {number} sectionReturn the content section return\n     * @return {Component}\n     */\n    static init(target, selectors, sectionReturn) {\n        return new this({ // CHANGED.\n            element: document.getElementById(target),\n            reactive: getCurrentCourseEditor(),\n            selectors,\n            sectionReturn,\n        });\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * @param {Object} state the state data\n     */\n    stateReady(state) {\n        super.stateReady(state);\n\n        // Set the initial state of collapsible sections.\n        this.fmtCollapseOnHashChange();\n\n        // Capture clicks on course section links.\n        window.addEventListener(\"hashchange\", this.fmtCollapseOnHashChange.bind(this));\n\n    }\n\n    /**\n     * Expand, and scroll to, the section specified in the URL bar.\n     *\n     * @param {HashChangeEvent?} event The triggering event, if any\n     */\n    /* eslint-disable no-unused-vars */\n    fmtCollapseOnHashChange(event) {\n            /* eslint-enable no-unused-vars */\n\n        // Find the specified section.\n        let anchor = window.location.hash;\n        if (!anchor.match(/^#sectionid-\\d+(?:-title)?$/)) {\n            return;\n        }\n        let oldStyle = false;\n        if (anchor.match(/^#sectionid-\\d+$/)) {\n            anchor = anchor + \"-title\";\n            oldStyle = true;\n            history.replaceState(history.state, \"\", anchor);\n        }\n        const selSectionHeaderDom =\n            document.querySelector(\".course-content ul.sections li.section.section-topic .sectionname\" + anchor);\n\n        // Exit if there is no recognised section.\n        if (!selSectionHeaderDom) {\n            return;\n        }\n\n        const selSectionDom = selSectionHeaderDom.closest(\"li.section.section-topic\");\n        const sectionId = selSectionDom.getAttribute('data-id');\n        const section = this.reactive.get('section', sectionId);\n\n        // Expand, if appropriate.\n        if (selSectionDom.matches(\".section-topic-collapsible\")\n                && (selSectionDom.querySelector(\".course-section-header .icons-collapse-expand.collapsed\")\n                    || section.contentcollapsed)) {\n            this.reactive.dispatch(\n                'sectionContentCollapsed',\n                [sectionId],\n                false\n            );\n        }\n\n        // Scroll to the specified section.\n        if (oldStyle) {\n            selSectionDom.scrollIntoView();\n        }\n\n    }\n\n    /**\n     * Handle the collapse/expand all sections button.\n     *\n     * Toggler click is delegated to the main course content element because new sections can\n     * appear at any moment and this way we prevent accidental double bindings.\n     *\n     * @param {Event} event the triggered event\n     */\n    _allSectionToggler(event) {\n        event.preventDefault();\n\n        const target = event.target.closest(this.selectors.TOGGLEALL);\n        const isAllCollapsed = target.classList.contains(this.classes.COLLAPSED);\n\n        // CHANGED.\n        let sectionlist = [];\n        const sectionlistDom = this.element.querySelectorAll(\".course-section.section-topic-collapsible[data-fmtonpage='1']\");\n        for (let sectionCount = 0; sectionCount < sectionlistDom.length; sectionCount++) {\n            sectionlist.push(sectionlistDom[sectionCount].dataset.id);\n        }\n        // END CHANGED.\n\n        this.reactive.dispatch(\n            'sectionContentCollapsed',\n            sectionlist, // CHANGED.\n            !isAllCollapsed\n        );\n    }\n\n    /**\n     * Refresh the collapse/expand all sections element.\n     *\n     * @param {Object} state The state data\n     */\n    _refreshAllSectionsToggler(state) {\n        const target = this.getElement(this.selectors.TOGGLEALL);\n        if (!target) {\n            return;\n        }\n        // Check if we have all sections collapsed/expanded.\n        let allcollapsed = true;\n        let allexpanded = true;\n        // ADDED.\n        let sectionCollapsible = {};\n        const sectionlistDom = this.element.querySelectorAll(\".course-section.section-topic-collapsible[data-fmtonpage='1']\");\n        for (let sectionCount = 0; sectionCount < sectionlistDom.length; sectionCount++) {\n            sectionCollapsible[sectionlistDom[sectionCount].dataset.id] = true;\n        }\n        // END ADDED.\n        state.section.forEach(\n            section => {\n                if (sectionCollapsible[section.id]) { // ADDED.\n                    allcollapsed = allcollapsed && section.contentcollapsed;\n                    allexpanded = allexpanded && !section.contentcollapsed;\n                }\n            }\n        );\n        target.style.display = (allexpanded && allcollapsed) ? \"none\" : \"block\"; // ADDED.\n        if (allcollapsed) {\n            target.classList.add(this.classes.COLLAPSED);\n            target.setAttribute('aria-expanded', false);\n        }\n        if (allexpanded) {\n            target.classList.remove(this.classes.COLLAPSED);\n            target.setAttribute('aria-expanded', true);\n        }\n    }\n\n    /**\n     * Update a course section when the section number changes.\n     *\n     * The courseActions module used for most course section tools still depends on css classes and\n     * section numbers (not id). To prevent inconsistencies when a section is moved, we need to refresh\n     * the\n     *\n     * Course formats can override the section title rendering so the frontend depends heavily on backend\n     * rendering. Luckily in edit mode we can trigger a title update using the inplace_editable module.\n     *\n     * @param {Object} param\n     * @param {Object} param.element details the update details.\n     */\n    _refreshSectionNumber({element}) {\n        // Find the element.\n        const target = this.getElement(this.selectors.SECTION, element.id);\n        if (!target) {\n            // Job done. Nothing to refresh.\n            return;\n        }\n        // Update section numbers in all data, css and YUI attributes.\n        target.id = `section-${element.number}`;\n        // YUI uses section number as section id in data-sectionid, in principle if a format use components\n        // don't need this sectionid attribute anymore, but we keep the compatibility in case some plugin\n        // use it for legacy purposes.\n        target.dataset.sectionid = element.number;\n        // The data-number is the attribute used by components to store the section number.\n        target.dataset.number = element.number;\n\n        // Update title and title inplace editable, if any.\n        const inplace = inplaceeditable.getInplaceEditable(target.querySelector(this.selectors.SECTION_ITEM));\n        if (inplace) {\n            // The course content HTML can be modified at any moment, so the function need to do some checkings\n            // to make sure the inplace editable still represents the same itemid.\n            const currentvalue = inplace.getValue();\n            const currentitemid = inplace.getItemId();\n            // Unnamed sections must be recalculated.\n            if (inplace.getValue() === '' || element.timed) { // CHANGED.\n                // The value to send can be an empty value if it is a default name.\n                if (currentitemid == element.id\n                    && (currentvalue != element.rawtitle || element.rawtitle == '' || element.timed)) { // CHANGED.\n                    inplace.setValue(element.rawtitle);\n                }\n            }\n        }\n    }\n\n    /**\n     * Refresh the section list.\n     *\n     * @param {Object} param\n     * @param {Object} param.element details the update details (Moodle <4.4).\n     * @param {Object} param.state the full state object (Moodle >=4.4).\n     */\n    _refreshCourseSectionlist(param) {\n        super._refreshCourseSectionlist(param);\n\n        const originalSingleSection = this.reactive.get(\"section\", this.originalsinglesectionid);\n        let singleSectionId;\n        if (originalSingleSection) {\n            singleSectionId = (originalSingleSection.levelsan < 2) ? originalSingleSection.id : originalSingleSection.pageid;\n        } else {\n            singleSectionId = null;\n        }\n\n        const sectionsDom = this.element.querySelectorAll(this.selectors.SECTION);\n        for (let sdi = 0; sdi < sectionsDom.length; sdi++) {\n            const sectionDom = sectionsDom[sdi];\n            const section = this.reactive.get(\"section\", sectionDom.dataset.id);\n            if (!section) {\n                continue;\n            }\n            let refreshCms = false;\n            const fmtonpageNew = (section.pageid == singleSectionId) ? \"1\" : \"0\";\n            if (sectionDom.dataset.fmtonpage != fmtonpageNew) {\n                sectionDom.dataset.fmtonpage = fmtonpageNew;\n                sectionDom.style.display = (fmtonpageNew == \"1\") ? \"block\" : \"none\";\n                if (fmtonpageNew == \"1\") {\n                    refreshCms = true;\n                }\n            }\n            if (section.visible == sectionDom.classList.contains(\"hidden\")) {\n                const badgeDom = sectionDom.querySelector(\"span.badge[data-type='hiddenfromstudents']\");\n                if (section.visible) {\n                    sectionDom.classList.remove(\"hidden\");\n                    if (badgeDom) {\n                        badgeDom.classList.add(\"d-none\");\n                    }\n                } else {\n                    sectionDom.classList.add(\"hidden\");\n                    if (badgeDom) {\n                        badgeDom.classList.remove(\"d-none\");\n                    }\n                }\n                if (sectionDom.dataset.fmtonpage == \"1\") {\n                    refreshCms = true;\n                }\n            }\n            if (refreshCms) {\n                // Note: Visibility state doesn't get updated for CMs already rendered.\n                this._refreshSectionCmlist({element: section});\n            }\n            const menuDom = sectionDom.querySelector(\".course-section-header .section_action_menu\");\n            Templates.render(\"core_courseformat/local/content/section/controlmenu\", section.controlmenu).done(function(html) {\n                Templates.replaceNode(menuDom, html, \"\");\n            });\n        }\n        this._refreshAllSectionsToggler(this.reactive.stateManager.state);\n\n        // Update Add section button.\n        const addSectionDom = document.querySelector(\"div#fmtchangenumsections > a\");\n        addSectionDom.href = addSectionDom.href.replace(/\\binsertparentid=\\d+\\b/, \"insertparentid=\" + singleSectionId);\n\n    }\n\n    /**\n     * Regenerate content indexes.\n     *\n     * This method is used when a legacy action refresh some content element.\n     */\n    _indexContents() {\n        // Find unindexed sections.\n        this._scanIndex(\n            this.selectors.SECTION,\n            this.sections,\n            (item) => {\n                return new Section(item); // CHANGED.\n            }\n        );\n\n        // Find unindexed cms.\n        this._scanIndex(\n            this.selectors.CM,\n            this.cms,\n            (item) => {\n                return new CmItem(item); // CHANGED.\n            }\n        );\n    }\n\n}"],"names":["Component","BaseComponent","create","descriptor","originalsinglesectionid","this","element","querySelector","dataset","target","selectors","sectionReturn","document","getElementById","reactive","stateReady","state","fmtCollapseOnHashChange","window","addEventListener","bind","event","anchor","location","hash","match","oldStyle","history","replaceState","selSectionHeaderDom","selSectionDom","closest","sectionId","getAttribute","section","get","matches","contentcollapsed","dispatch","scrollIntoView","_allSectionToggler","preventDefault","isAllCollapsed","TOGGLEALL","classList","contains","classes","COLLAPSED","sectionlist","sectionlistDom","querySelectorAll","sectionCount","length","push","id","_refreshAllSectionsToggler","getElement","allcollapsed","allexpanded","sectionCollapsible","forEach","style","display","add","setAttribute","remove","_refreshSectionNumber","SECTION","number","sectionid","inplace","inplaceeditable","getInplaceEditable","SECTION_ITEM","currentvalue","getValue","currentitemid","getItemId","timed","rawtitle","setValue","_refreshCourseSectionlist","param","originalSingleSection","singleSectionId","levelsan","pageid","sectionsDom","sdi","sectionDom","refreshCms","fmtonpageNew","fmtonpage","visible","badgeDom","_refreshSectionCmlist","menuDom","render","controlmenu","done","html","replaceNode","stateManager","addSectionDom","href","replace","_indexContents","_scanIndex","sections","item","Section","CM","cms","CmItem"],"mappings":"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"}