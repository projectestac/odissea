{"version":3,"file":"uninstall.min.js","sources":["../src/uninstall.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport {getStrings} from 'core/str';\nimport {saveCancelPromise, alert as displayAlert} from \"core/notification\";\nimport MoodleConfig from 'core/config';\n\nexport const init = (form) => {\n    form?.addEventListener('submit', async(e) => {\n        e.preventDefault();\n        const selectedOptions = form.querySelector('#menuuninstalllang')?.selectedOptions;\n        if (!selectedOptions?.length) {\n            const alertStrings = await getStrings(\n                ['noenglishuninstalltitle', 'selectlangs'].map((key) => ({key, component: 'tool_langimport'})\n            ));\n            displayAlert(...alertStrings);\n            return;\n        }\n\n        if ([...selectedOptions].map((node) => node.value).indexOf('en') !== -1) {\n            const alertStrings = await getStrings(\n                ['noenglishuninstalltitle', 'noenglishuninstall'].map((key) => ({key, component: 'tool_langimport'})\n                ));\n            displayAlert(...alertStrings);\n            return;\n        }\n\n        const confirmationStrings = await getStrings([\n            {\n                key: 'uninstall',\n                component: 'tool_langimport',\n            },\n            {\n                key: 'uninstallconfirm',\n                component: 'tool_langimport',\n                param: [...selectedOptions].map((node) => node.textContent).join(', '),\n            },\n            {\n                key: 'yes',\n                component: 'core',\n            },\n        ]);\n\n        saveCancelPromise(...confirmationStrings).then(() => {\n            const url = new URL(form.action);\n            url.searchParams.append('sesskey', MoodleConfig.sesskey);\n            url.searchParams.append('confirmtouninstall', [...selectedOptions].map((node) => node.value).join('/'));\n            form.action = url.toString();\n            form.submit();\n            return true;\n        })\n        .catch(() => {\n            return false;\n        });\n    });\n};\n"],"names":["form","addEventListener","async","e","preventDefault","selectedOptions","querySelector","_form$querySelector","length","alertStrings","map","key","component","node","value","indexOf","confirmationStrings","param","textContent","join","then","url","URL","action","searchParams","append","MoodleConfig","sesskey","toString","submit","catch"],"mappings":"sSAmBqBA,OACjBA,MAAAA,MAAAA,KAAMC,iBAAiB,UAAUC,MAAAA,4BAC7BC,EAAEC,uBACIC,4CAAkBL,KAAKM,cAAc,4DAAnBC,oBAA0CF,mBAC7DA,MAAAA,kBAAAA,gBAAiBG,OAAQ,OACpBC,mBAAqB,mBACvB,CAAC,0BAA2B,eAAeC,KAAKC,OAAUA,IAAAA,IAAKC,UAAW,6DAE9DH,kBAIkD,IAAlE,IAAIJ,iBAAiBK,KAAKG,MAASA,KAAKC,QAAOC,QAAQ,MAAc,OAC/DN,mBAAqB,mBACvB,CAAC,0BAA2B,sBAAsBC,KAAKC,OAAUA,IAAAA,IAAKC,UAAW,6DAErEH,oBAIdO,0BAA4B,mBAAW,CACzC,CACIL,IAAK,YACLC,UAAW,mBAEf,CACID,IAAK,mBACLC,UAAW,kBACXK,MAAO,IAAIZ,iBAAiBK,KAAKG,MAASA,KAAKK,cAAaC,KAAK,OAErE,CACIR,IAAK,MACLC,UAAW,iDAIEI,qBAAqBI,MAAK,WACrCC,IAAM,IAAIC,IAAItB,KAAKuB,eACzBF,IAAIG,aAAaC,OAAO,UAAWC,gBAAaC,SAChDN,IAAIG,aAAaC,OAAO,qBAAsB,IAAIpB,iBAAiBK,KAAKG,MAASA,KAAKC,QAAOK,KAAK,MAClGnB,KAAKuB,OAASF,IAAIO,WAClB5B,KAAK6B,UACE,KAEVC,OAAM,KACI"}