{"version":3,"file":"color-settings.min.js","sources":["../src/color-settings.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript functions to add/remove a row for one color entry that contains\n * two input fields for color name and color hex value. This is suited for and\n * works with the template settings_config_color.mustache only.\n *\n * @module      tiny_fontcolor\n * @copyright   2023 Luca BÃ¶sch <luca.boesch@bfh.ch>\n * @copyright   2023 Stephan Robotta <stephan.robotta@bfh.ch>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/**\n * The add button that was clicked. This button is in the last row. Therefore, it creates\n * a clone of the entire row. In the cloned row we need to update the input elements (id and\n * name attribute -> increase the tailing sequence number by 1, empty any value attributes).\n * Also, in the cloned row the event must be attached to the button.\n * For the existing row that was cloned, the button must be changed from an add to a delete\n * button (change class and content of the button from + -> -).\n * @param {Node} element\n */\nconst insertRow = element => {\n  const currRow = element.parentNode.parentNode;\n  const newRow = currRow.cloneNode(true);\n  const parts = newRow.querySelector('input').getAttribute('name').split('_');\n  const num = parseInt(parts[parts.length - 1]);\n  const newNum = num + 1;\n  const re = new RegExp('_' + num.toString() + '$');\n  newRow.querySelectorAll('input').forEach(input => {\n    ['name', 'id', 'value'].forEach((attr) => {\n      if (attr === 'value') {\n        input.value = '';\n        return;\n      }\n      let content = input.getAttribute(attr).replace(re, '_' + newNum.toString());\n      input.setAttribute(attr, content);\n    });\n  });\n  currRow.parentNode.insertBefore(newRow, currRow.nextSibling);\n  const button = currRow.querySelector('button');\n  button.classList.remove('add');\n  button.classList.add('del');\n  button.innerHTML = '-';\n  newRow.querySelector('button').addEventListener('click', function(e) {\n    handleRow(e);\n  });\n};\n\n/**\n * Remove the current row with input field for color name and value and the remove button itself.\n * @param {Node} element the button that was clicked to remove the current line.\n */\nconst deleteRow = element => {\n  element.parentNode.parentNode.remove();\n};\n\nconst handleRow = event => {\n  event.preventDefault();\n  if (event.target.classList.contains('del')) {\n    deleteRow(event.target);\n  } else if (event.target.classList.contains('add')) {\n    insertRow(event.target);\n  }\n};\n\n/**\n * Initialize event handlers for all buttons inside the input fields for one color setting.\n * @param {string} name of settings field, for which the js handling is needed.\n */\nexport const init = name => {\n  const root = document.querySelector('.' + name);\n  if (!root) {\n    return;\n  }\n  const buttons = root.getElementsByTagName('button');\n  for (let i = 0; i < buttons.length; i++) {\n    buttons.item(i).addEventListener('click', function(e) {\n      handleRow(e);\n    });\n  }\n};"],"names":["handleRow","event","preventDefault","target","classList","contains","parentNode","remove","element","currRow","newRow","cloneNode","parts","querySelector","getAttribute","split","num","parseInt","length","newNum","re","RegExp","toString","querySelectorAll","forEach","input","attr","value","content","replace","setAttribute","insertBefore","nextSibling","button","add","innerHTML","addEventListener","e","insertRow","name","root","document","buttons","getElementsByTagName","i","item"],"mappings":";;;;;;;;;;;MAsEMA,UAAYC,QAChBA,MAAMC,iBACFD,MAAME,OAAOC,UAAUC,SAAS,OACxBJ,MAAME,OANVG,WAAWA,WAAWC,SAOnBN,MAAME,OAAOC,UAAUC,SAAS,QAvC3BG,CAAAA,gBACVC,QAAUD,QAAQF,WAAWA,WAC7BI,OAASD,QAAQE,WAAU,GAC3BC,MAAQF,OAAOG,cAAc,SAASC,aAAa,QAAQC,MAAM,KACjEC,IAAMC,SAASL,MAAMA,MAAMM,OAAS,IACpCC,OAASH,IAAM,EACfI,GAAK,IAAIC,OAAO,IAAML,IAAIM,WAAa,KAC7CZ,OAAOa,iBAAiB,SAASC,SAAQC,SACtC,OAAQ,KAAM,SAASD,SAASE,UAClB,UAATA,iBACFD,MAAME,MAAQ,QAGZC,QAAUH,MAAMX,aAAaY,MAAMG,QAAQT,GAAI,IAAMD,OAAOG,YAChEG,MAAMK,aAAaJ,KAAME,eAG7BnB,QAAQH,WAAWyB,aAAarB,OAAQD,QAAQuB,mBAC1CC,OAASxB,QAAQI,cAAc,UACrCoB,OAAO7B,UAAUG,OAAO,OACxB0B,OAAO7B,UAAU8B,IAAI,OACrBD,OAAOE,UAAY,IACnBzB,OAAOG,cAAc,UAAUuB,iBAAiB,SAAS,SAASC,GAChErC,UAAUqC,OAiBVC,CAAUrC,MAAME,uBAQAoC,aACZC,KAAOC,SAAS5B,cAAc,IAAM0B,UACrCC,kBAGCE,QAAUF,KAAKG,qBAAqB,cACrC,IAAIC,EAAI,EAAGA,EAAIF,QAAQxB,OAAQ0B,IAClCF,QAAQG,KAAKD,GAAGR,iBAAiB,SAAS,SAASC,GACjDrC,UAAUqC"}