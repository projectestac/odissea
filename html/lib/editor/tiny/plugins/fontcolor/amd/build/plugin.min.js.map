{"version":3,"file":"plugin.min.js","sources":["../src/plugin.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * The tiny_fontcolor prlugin for Moodle.\n *\n * @module      tiny_fontcolor\n * @copyright   2023 Luca BÃ¶sch <luca.boesch@bfh.ch>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getTinyMCE} from 'editor_tiny/loader';\nimport {getPluginMetadata} from 'editor_tiny/utils';\nimport {component, pluginName} from './common';\nimport {getSetup as getCommandSetup} from './commands';\nimport * as Configuration from './configuration';\nimport {register as registerOptions} from './options';\n\n// Setup the tiny_fontcolor plugin.\n// eslint-disable-next-line no-async-promise-executor\nexport default new Promise(async(resolve) => {\n    // Note: The PluginManager.add function does not support asynchronous configuration.\n    // Perform any asynchronous configuration here, and then call the PluginManager.add function.\n    const [\n        tinyMCE,\n        setupCommands,\n        pluginMetadata,\n    ] = await Promise.all([\n        getTinyMCE(),\n        getCommandSetup(),\n        getPluginMetadata(component, pluginName),\n    ]);\n\n    // Reminder: Any asynchronous code must be run before this point.\n    tinyMCE.PluginManager.add(pluginName, (editor) => {\n        // Register options.\n        registerOptions(editor);\n\n        // Setup any commands such as buttons, menu items, and so on.\n        setupCommands(editor);\n\n        // Return the pluginMetadata object. This is used by TinyMCE to display a help link for your plugin.\n        return pluginMetadata;\n    });\n\n    resolve([pluginName, Configuration]);\n});\n"],"names":["Promise","async","tinyMCE","setupCommands","pluginMetadata","all","component","pluginName","PluginManager","add","editor","resolve","Configuration"],"mappings":";;;;;;;kCAgCe,IAAIA,SAAQC,MAAAA,gBAInBC,QACAC,cACAC,sBACMJ,QAAQK,IAAI,EAClB,yBACA,yBACA,4BAAkBC,kBAAWC,sBAIjCL,QAAQM,cAAcC,IAAIF,oBAAaG,+BAEnBA,QAGhBP,cAAcO,QAGPN,kBAGXO,QAAQ,CAACJ,mBAAYK"}