{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Commands helper for the Moodle tiny_fontcolor plugin.\n *\n * @module      tiny_fontcolor\n * @copyright   2023 Luca BÃ¶sch <luca.boesch@bfh.ch>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {register$c} from \"./colorswat\";\nimport {component} from './common';\nimport {get_strings as getStrings} from 'core/str';\n\n/**\n * Get the setup function for the buttons.\n *\n * This is performed in an async function which ultimately returns the registration function as the\n * Tiny.AddOnManager.Add() function does not support async functions.\n *\n * @returns {function} The registration function to call within the Plugin.add function.\n */\nexport const getSetup = async() => {\n    const [\n        btnFgColor,\n        menuItemFgcolor,\n        btnBgcolor,\n        menuItemBgcolor,\n        customColor,\n        removeColor,\n        colorPickerTitle,\n        colorPickerColor,\n        colorPickerSave,\n        colorPickerCancel,\n        colorPickerErrHexCode,\n        colorPickerErrRgbCode,\n    ] = await getStrings([\n        'btnFgcolor',\n        'menuItemFgcolor',\n        'btnBgcolor',\n        'menuItemBgcolor',\n        'customColor',\n        'removeColor',\n        'colorPickerTitle',\n        'colorPickerColor',\n        'colorPickerSave',\n        'colorPickerCancel',\n        'colorPickerErrHexCode',\n        'colorPickerErrRgbCode'\n    ].map((key) => ({key, component})));\n    return (editor) => {\n        register$c(editor, {\n            'btnFgColor': btnFgColor,\n            'menuItemFgcolor': menuItemFgcolor,\n            'btnBgcolor': btnBgcolor,\n            'menuItemBgcolor': menuItemBgcolor,\n            'customColor': customColor,\n            'removeColor': removeColor,\n            'colorPickerTitle': colorPickerTitle,\n            'colorPickerColor': colorPickerColor,\n            'colorPickerSave': colorPickerSave,\n            'colorPickerCancel': colorPickerCancel,\n            'colorPickerErrHexCode': colorPickerErrHexCode,\n            'colorPickerErrRgbCode': colorPickerErrRgbCode,\n        });\n    };\n};\n"],"names":["async","btnFgColor","menuItemFgcolor","btnBgcolor","menuItemBgcolor","customColor","removeColor","colorPickerTitle","colorPickerColor","colorPickerSave","colorPickerCancel","colorPickerErrHexCode","colorPickerErrRgbCode","map","key","component","editor"],"mappings":"gOAmCwBA,gBAEhBC,WACAC,gBACAC,WACAC,gBACAC,YACAC,YACAC,iBACAC,iBACAC,gBACAC,kBACAC,sBACAC,6BACM,oBAAW,CACjB,aACA,kBACA,aACA,kBACA,cACA,cACA,mBACA,mBACA,kBACA,oBACA,wBACA,yBACFC,KAAKC,OAAUA,IAAAA,IAAKC,UAAAA,8BACdC,mCACOA,OAAQ,YACDf,2BACKC,2BACLC,2BACKC,4BACJC,wBACAC,6BACKC,kCACAC,iCACDC,kCACEC,wCACIC,4CACAC"}