{"version":3,"file":"ui.min.js","sources":["../src/ui.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Plugin tiny_cloze for TinyMCE v6 in Moodle.\n *\n * @module      tiny_cloze/ui\n * @copyright   2023 MoodleDACH\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalEvents from 'core/modal_events';\nimport Modal from 'core/modal';\nimport ModalFactory from 'core/modal_factory';\nimport Mustache from 'core/mustache';\nimport {get_strings as getStrings} from 'core/str';\nimport {component} from './common';\nimport {hasQtypeMultianswerrgx} from './options';\n\n// Helper functions.\nconst isNull = a => a === null || a === undefined;\nconst strdecode = t => String(t).replace(/\\\\(#|\\}|~)/g, '$1');\nconst strencode = t => String(t).replace(/(#|\\}|~)/g, '\\\\$1');\nconst indexOfNode = (list, node) => {\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] === node) {\n      return i;\n    }\n  }\n  return -1;\n};\nconst getUuid = function() {\n  if (!isNull(crypto.randomUUID)) {\n    return crypto.randomUUID();\n  }\n  return 'ed-cloze-' + Math.floor(Math.random() * 100000).toString();\n};\n// Grade Selector value when custom percentage is selected.\nconst selectCustomPercent = '__custom__';\n// This is a specific helper function to return the options html for the fraction select element.\nconst getFractionOptions = s => {\n  const attrSel = ' selected=\"selected\"';\n  let isSel = s === '=' ? attrSel : '';\n  let html = `<option value=\"\">${STR.incorrect}</option><option value=\"=\"${isSel}>${STR.correct}</option>`;\n  FRACTIONS.forEach(item => {\n    isSel = item.value.toString() === s ? attrSel : '';\n    html += `<option value=\"${item.value}\"${isSel}>${item.value}%</option>`;\n  });\n  isSel = s !== '' && html.indexOf(attrSel) === -1 ? attrSel : '';\n  html += `<option value=\"${selectCustomPercent}\"${isSel}>${STR.custom_grade}</option>`;\n  return html;\n};\n// Check if the value is a custom grade value (in order to show the input field).\nconst isCustomGrade = s => {\n  if (s === '=' || s === '') {\n    return false;\n  }\n  let found = false;\n  FRACTIONS.forEach(item => {\n    if (item.value.toString() === s) {\n      found = true;\n    }\n  });\n  return !found;\n};\n// Marker class and the whole span element that is used to encapsulate the cloze question text.\nconst markerClass = 'cloze-question-marker';\nconst markerSpan = '<span contenteditable=\"false\" class=\"' + markerClass + '\" data-mce-contenteditable=\"false\">';\n\n// CSS classes that are used in the modal dialogue.\nconst CSS = {\n  ANSWER: 'tiny_cloze_answer',\n  ANSWERS: 'tiny_cloze_answers',\n  ADD: 'tiny_cloze_add',\n  CANCEL: 'tiny_cloze_cancel',\n  DELETE: 'tiny_cloze_delete',\n  FEEDBACK: 'tiny_cloze_feedback',\n  FRACTION: 'tiny_cloze_fraction',\n  FRAC_CUSTOM: 'tiny_cloze_frac_custom',\n  LEFT: 'tiny_cloze_col0',\n  LOWER: 'tiny_cloze_down',\n  RIGHT: 'tiny_cloze_col1',\n  MARKS: 'tiny_cloze_marks',\n  DUPLICATE: 'tiny_cloze_duplicate',\n  RAISE: 'tiny_cloze_up',\n  SUBMIT: 'tiny_cloze_submit',\n  SUMMARY: 'tiny_cloze_summary',\n  TOLERANCE: 'tiny_cloze_tolerance',\n  TYPE: 'tiny_cloze_qtype'\n};\nconst TEMPLATE = {\n  FORM: '<div class=\"tiny_cloze\">' +\n    '<p>{{name}} ({{qtype}})</p>' +\n    '<form name=\"tiny_cloze_form\">' +\n    '<div class=\"row ml-0\">' +\n    '<div class=\"form-group\">' +\n    '<label for=\"{{elementid}}_mark\">{{STR.defaultmark}}</label>' +\n    '<input id=\"{{elementid}}_mark\" type=\"text\" value=\"{{marks}}\" ' +\n    'class=\"{{CSS.MARKS}} form-control d-inline mx-2\" />' +\n    '<a class=\"{{CSS.ADD}}\" title=\"{{STR.addmoreanswerblanks}}\">' +\n    '<img class=\"icon_smallicon\" src=\"' +\n    M.util.image_url('t/add', 'core') + '\" alt=\"{{STR.addmoreanswerblanks}}\"></a>' +\n    '</div>' +\n    '<div class=\"msg-error hidden\"></div>' +\n    '</div>' +\n    '<div class=\"{{CSS.ANSWERS}} mb-3\">' +\n    '<ol class=\"pl-3\">{{#answerdata}}' +\n    '<li class=\"mt-3\"><div class=\"row ml-0\">' +\n    '<div class=\"{{CSS.LEFT}} form-group\">' +\n    '<label for=\"{{id}}_answer\">{{STR.answer}}</label>' +\n    '<input id=\"{{id}}_answer\" type=\"text\" value=\"{{answer}}\" ' +\n    'class=\"{{CSS.ANSWER}} form-control d-inline mx-2\" />' +\n    '</div>' +\n    '<div class=\"{{CSS.LEFT}} form-group\">' +\n    '<a class=\"{{CSS.ADD}}\" title=\"{{STR.addmoreanswerblanks}}\">' +\n    '<img class=\"icon_smallicon\" src=\"' +\n    M.util.image_url('t/add', 'core') + '\" alt=\"{{STR.addmoreanswerblanks}}\"></a>' +\n    '<a class=\"{{CSS.DELETE}}\" title=\"{{STR.delete}}\">' +\n    '<img class=\"icon_smallicon\" src=\"' +\n    M.util.image_url('t/delete', 'core') + '\" alt=\"{{STR.delete}}\"></a>' +\n    '<a class=\"{{CSS.RAISE}}\" title=\"{{STR.up}}\">' +\n    '<img class=\"icon_smallicon\" src=\"' +\n    M.util.image_url('t/up', 'core') + '\" alt=\"{{STR.up}}\"></a>' +\n    '<a class=\"{{CSS.LOWER}}\" title=\"{{STR.down}}\">' +\n    '<img class=\"icon_smallicon\" src=\"' +\n    M.util.image_url('t/down', 'core') + '\" alt=\"{{STR.down}}\"></a>' +\n    '</div>' +\n    '</div>' +\n    '{{#numerical}}' +\n    '<div class=\"row\">' +\n    '<div class=\"{{CSS.RIGHT}} form-group\">' +\n    '<label for=\"{{id}}_tolerance\">{{{STR.tolerance}}}</label>' +\n    '<input id=\"{{id}}_tolerance\" type=\"text\" value=\"{{tolerance}}\" ' +\n    'class=\"{{CSS.TOLERANCE}} form-control d-inline mx-2\" />' +\n    '</div>' +\n    '</div>' +\n    '{{/numerical}}' +\n    '<div class=\"row\">' +\n    '<div class=\"{{CSS.RIGHT}} form-group\">' +\n    '<label for=\"{{id}}_feedback\">{{STR.feedback}}</label>' +\n    '<input id=\"{{id}}_feedback\" type=\"text\" value=\"{{feedback}}\" ' +\n    'class=\"{{CSS.FEEDBACK}} form-control d-inline mx-2\" />' +\n    '</div>' +\n    '<div class=\"{{CSS.RIGHT}} form-group\">' +\n    '<label id=\"{{id}}_grade\">{{STR.grade}}</label>' +\n    '<select id=\"{{id}}_grade\" class=\"{{CSS.FRACTION}} custom-select mx-2\">' +\n    '{{{fractionOptions}}}' +\n    '</select>' +\n    '</div>' +\n    '<div class=\"{{CSS.RIGHT}} form-group{{^isCustomGrade}} hidden{{/isCustomGrade}}\">' +\n    '<input id=\"{{id}}_grade_custom\" type=\"text\"{{#isCustomGrade}} value=\"{{fraction}}\"{{/isCustomGrade}} ' +\n    'class=\"{{CSS.FRAC_CUSTOM}} form-control d-inline mx-2\" style=\"width: 4rem;\" />%' +\n    '</div>' +\n    '</div></li>' +\n    '{{/answerdata}}</ol></div>' +\n    '</form>' +\n    '</div>',\n  TYPE: '<div class=\"tiny_cloze mt-0 mx-2 mb-2\">' +\n    '<p>{{STR.chooseqtypetoadd}}</p>' +\n    '<form name=\"tiny_cloze_form\">' +\n    '<div class=\"{{CSS.TYPE}} form-check\">' +\n    '{{#types}}' +\n    '<div class=\"option\">' +\n    '<input name=\"qtype\" id=\"qtype_qtype_{{type}}\" value=\"{{type}}\" type=\"radio\" class=\"form-check-input\">' +\n    '<label for=\"qtype_qtype_{{type}}\">' +\n    '<span class=\"typename\">{{type}}</span>' +\n    '<span class=\"{{CSS.SUMMARY}}\"><h6>{{name}}</h6><p>{{summary}}</p>' +\n    '<ul>{{#options}}' +\n    '<li>{{.}}</li>' +\n    '{{/options}}</ul>' +\n    '</span>' +\n    '</label></div>' +\n    '{{/types}}</div>' +\n    '</form></div>',\n  FOOTER: '<button type=\"button\" class=\"btn btn-secondary\" data-action=\"cancel\">{{cancel}}</button>' +\n    '<button type=\"button\" class=\"btn btn-primary\" data-action=\"save\">{{submit}}</button>',\n};\nconst FRACTIONS = [\n  {value: 100},\n  {value: 50},\n  {value: 0},\n];\n\n// Language strings used in the modal dialogue.\nconst STR = {};\n\n/**\n * The editor instance that is injected via the onInit() function.\n *\n * @type {tinymce.Editor}\n * @private\n */\nlet _editor = null;\n\n/**\n * A reference to the currently open form.\n *\n * @param _form\n * @type {Node}\n * @private\n */\nlet _form = null;\n\n/**\n * An array containing the current answers options\n *\n * @param _answerdata\n * @type {Array}\n * @private\n */\nlet _answerdata = [];\n\n/**\n * The sub question type to be edited\n *\n * @param _qtype\n * @type {string|null}\n * @private\n */\nlet _qtype = null;\n\n/**\n * Remember the pos of the selected node.\n * @type {number}\n * @private\n */\nlet _selectedOffset = -1;\n\n/**\n * The maximum marks for the sub question\n *\n * @param _marks\n * @type {Integer}\n * @private\n */\nlet _marks = 1;\n\n/**\n * The modal dialogue to be displayed when designing the cloze question types.\n * @type {Modal|null}\n */\nlet _modal = null;\n\n/**\n * If its a normal selection of text, use it for the first answer field.\n * @type {string|null}\n */\nlet _firstAnswer = null;\n\n/**\n * When selecting a text portion that is used for the first answer field, remember\n * any whitespace before and after the selection.\n * 0 => no whitespace, 1 => whitespace before, 2 => whitespace after, 3 => whitespace before and after.\n * @type {int}\n */\nlet _selectedPrefixAndSuffix = 0;\n\n/**\n * Inject the editor instance and add markers to the cloze question texts.\n * @param {tinymce.Editor} ed\n */\nconst onInit = function(ed) {\n  _editor = ed; // The current editor instance.\n  // Add the marker spans.\n  _addMarkers();\n  // And get the language strings.\n  _getStr();\n};\n\n/**\n * Regex to recognize the question string in the text e.g. {1:NUMERICAL:...} or {:MULTICHOICE:...}\n * @param {tinymce.Editor} editor\n * @return {RegExp}\n * @private\n */\nconst _getRegexQtype = (editor) => {\n  // eslint-disable-next-line max-len\n  const baseQtypes = 'MULTICHOICE(_H|_V|_S|_HS|_VS)?|MULTIRESPONSE(_H|_S|_HS)?|NUMERICAL|SHORTANSWER(_C)?|SAC?|NM|MWC?|M[CR](V|H|VS|HS)?';\n  const extQtypes = hasQtypeMultianswerrgx(editor) ? '|REGEXP(_C)?|RXC?' : '';\n  return new RegExp('\\\\{([0-9]*):(' + baseQtypes + extQtypes + '):(.*?)(?<!\\\\\\\\)\\\\}', 'g');\n};\n\n/**\n * Load strings for the modal dialogue from the language packs.\n * @private\n */\nconst _getStr = async() => {\n  let strToFetch = [\n    {key: 'answer', component: 'question'},\n    {key: 'chooseqtypetoadd', component: 'question'},\n    {key: 'defaultmark', component: 'question'},\n    {key: 'feedback', component: 'question'},\n    {key: 'correct', component: 'question'},\n    {key: 'incorrect', component: 'question'},\n    {key: 'addmoreanswerblanks', component: 'qtype_calculated'},\n    {key: 'delete', component: 'core'},\n    {key: 'up', component: 'core'},\n    {key: 'down', component: 'core'},\n    {key: 'tolerance', component: 'qtype_calculated'},\n    {key: 'grade', component: 'grades'},\n    {key: 'caseno', component: 'mod_quiz'},\n    {key: 'caseyes', component: 'mod_quiz'},\n    {key: 'answersingleno', component: 'qtype_multichoice'},\n    {key: 'answersingleyes', component: 'qtype_multichoice'},\n    {key: 'layoutselectinline', component: 'qtype_multianswer'},\n    {key: 'layouthorizontal', component: 'qtype_multianswer'},\n    {key: 'layoutvertical', component: 'qtype_multianswer'},\n    {key: 'shufflewithin', component: 'mod_quiz'},\n    {key: 'layoutmultiple_horizontal', component: 'qtype_multianswer'},\n    {key: 'layoutmultiple_vertical', component: 'qtype_multianswer'},\n    {key: 'pluginnamesummary', component: 'qtype_multichoice'},\n    {key: 'pluginnamesummary', component: 'qtype_shortanswer'},\n    {key: 'pluginnamesummary', component: 'qtype_numerical'},\n    {key: 'multichoice', component},\n    {key: 'multiresponse', component},\n    {key: 'numerical', component: 'mod_quiz'},\n    {key: 'shortanswer', component: 'mod_quiz'},\n    {key: 'cancel', component: 'core'},\n    {key: 'select', component},\n    {key: 'insert', component},\n    {key: 'pluginname', component},\n    {key: 'customgrade', component},\n    {key: 'err_custom_rate', component},\n    {key: 'err_empty_answer', component},\n    {key: 'err_none_correct', component},\n    {key: 'err_not_numeric', component},\n  ];\n  let langKeys = [\n    'answer',\n    'chooseqtypetoadd',\n    'defaultmark',\n    'feedback',\n    'correct',\n    'incorrect',\n    'addmoreanswerblanks',\n    'delete',\n    'up',\n    'down',\n    'tolerance',\n    'grade',\n    'caseno',\n    'caseyes',\n    'singleno',\n    'singleyes',\n    'selectinline',\n    'horizontal',\n    'vertical',\n    'shuffle',\n    'multi_horizontal',\n    'multi_vertical',\n    'summary_multichoice',\n    'summary_shortanswer',\n    'summary_numerical',\n    'multichoice',\n    'multiresponse',\n    'numerical',\n    'shortanswer',\n    'btn_cancel',\n    'btn_select',\n    'btn_insert',\n    'title',\n    'custom_grade',\n    'err_custom_rate',\n    'err_empty_answer',\n    'err_none_correct',\n    'err_not_numeric',\n  ];\n  if (hasQtypeMultianswerrgx(_editor)) {\n    strToFetch.push({key: 'regexp', component: 'qtype_regexp'});\n    strToFetch.push({key: 'pluginnamesummary', component: 'qtype_regexp'});\n    langKeys.push('regexp');\n    langKeys.push('summary_regexp');\n  }\n  getStrings(strToFetch).then(function() {\n    const args = Array.from(arguments);\n    langKeys.map((l, i) => {\n      STR[l] = args[0][i];\n      return ''; // Make the linter happy.\n    });\n    return ''; // Make the linter happy.\n  }).catch(() => {\n    return '';\n  });\n};\n\n/**\n * Return the question types that are available for the cloze question.\n * @returns {Array}\n * @private\n */\nconst _getQuestionTypes = function() {\n  let qtypes = [\n    {\n      'type': 'MULTICHOICE',\n      'abbr': ['MC'],\n      'name': STR.multichoice,\n      'summary': STR.summary_multichoice,\n      'options': [STR.selectinline, STR.singleyes],\n    },\n    {\n      'type': 'MULTICHOICE_H',\n      'abbr': ['MCH'],\n      'name': STR.multichoice,\n      'summary': STR.summary_multichoice,\n      'options': [STR.horizontal, STR.singleyes],\n    },\n    {\n      'type': 'MULTICHOICE_V',\n      'abbr': ['MCV'],\n      'name': STR.multichoice,\n      'summary': STR.summary_multichoice,\n      'options': [STR.vertical, STR.singleyes],\n    },\n    {\n      'type': 'MULTICHOICE_S',\n      'abbr': ['MCS'],\n      'name': STR.multichoice,\n      'summary': STR.summary_multichoice,\n      'options': [STR.selectinline, STR.shuffle, STR.singleyes],\n    },\n    {\n      'type': 'MULTICHOICE_HS',\n      'abbr': ['MCHS'],\n      'name': STR.multichoice,\n      'summary': STR.summary_multichoice,\n      'options': [STR.horizontal, STR.shuffle, STR.singleyes],\n    },\n    {\n      'type': 'MULTICHOICE_VS',\n      'abbr': ['MCVS'],\n      'name': STR.multichoice,\n      'summary': STR.summary_multichoice,\n      'options': [STR.vertical, STR.shuffle, STR.singleyes],\n    },\n    {\n      'type': 'MULTIRESPONSE',\n      'abbr': ['MR'],\n      'name': STR.multiresponse,\n      'summary': STR.summary_multichoice,\n      'options': [STR.multi_vertical, STR.singleno],\n    },\n    {\n      'type': 'MULTIRESPONSE_H',\n      'abbr': ['MRH'],\n      'name': STR.multiresponse,\n      'summary': STR.summary_multichoice,\n      'options': [STR.multi_horizontal, STR.singleno],\n    },\n    {\n      'type': 'MULTIRESPONSE_S',\n      'abbr': ['MRS'],\n      'name': STR.multiresponse,\n      'summary': STR.summary_multichoice,\n      'options': [STR.multi_vertical, STR.shuffle, STR.singleno],\n    },\n    {\n      'type': 'MULTIRESPONSE_HS',\n      'abbr': ['MRHS'],\n      'name': STR.multiresponse,\n      'summary': STR.summary_multichoice,\n      'options': [STR.multi_horizontal, STR.shuffle, STR.singleno],\n    },\n    {\n      'type': 'NUMERICAL',\n      'abbr': ['NM'],\n      'name': STR.numerical,\n      'summary': STR.summary_numerical,\n    },\n    {\n      'type': 'SHORTANSWER',\n      'abbr': ['SA', 'MW'],\n      'name': STR.shortanswer,\n      'summary': STR.summary_shortanswer,\n      'options': [STR.caseno],\n    },\n    {\n      'type': 'SHORTANSWER_C',\n      'abbr': ['SAC', 'MWC'],\n      'name': STR.shortanswer,\n      'summary': STR.summary_shortanswer,\n      'options': [STR.caseyes],\n    },\n  ];\n  if (hasQtypeMultianswerrgx(_editor)) {\n    qtypes.splice(11, 0, {\n      'type': 'REGEXP',\n      'abbr': ['RX'],\n      'name': STR.regexp,\n      'summary': STR.summary_regexp,\n      'options': [STR.caseno],\n    }, {\n      'type': 'REGEXP_C',\n      'abbr': ['RXC'],\n      'name': STR.regexp,\n      'summary': STR.summary_regexp,\n      'options': [STR.caseyes],\n    });\n  }\n  return qtypes;\n};\n\n/**\n * Create the modal.\n * @return {Promise<void>}\n * @private\n */\nconst _createModal = async function() {\n  // Create the modal dialogue. Depending on whether we have a selected node or not, the content is different.\n  const cfg = {\n    title: STR.title,\n    templateContext: {\n      elementid: _editor.id\n    },\n    removeOnClose: true,\n    large: true,\n  };\n  if (typeof Modal.create === 'function') {\n    _modal = await Modal.create(cfg);\n  } else {\n    _modal = await ModalFactory.create(cfg);\n  }\n};\n\n/**\n * Display modal dialogue to edit a cloze question. Either a form is displayed to edit subquestion or a list\n * of possible questions is show.\n *\n * @method displayDialogue\n * @public\n */\nconst displayDialogue = async function() {\n  await _createModal();\n\n  // Resolve whether cursor is in a subquestion.\n  const subquestion = resolveSubquestion();\n  if (subquestion) {\n    _firstAnswer = null;\n    // Subquestion found, remember which node of the marker nodes is selected.\n    _selectedOffset = indexOfNode(_editor.dom.select('.' + markerClass), subquestion);\n    _parseSubquestion(subquestion.innerHTML);\n    _setDialogueContent(_qtype);\n  } else {\n    // No subquestion found, no offset to remember.\n    _selectedOffset = -1;\n    _firstAnswer = _editor.selection.getContent();\n    _selectedPrefixAndSuffix = 0;\n    if (_firstAnswer[0] === ' ') {\n      _selectedPrefixAndSuffix = 1;\n    }\n    if (_firstAnswer[_firstAnswer.length - 1] === ' ') {\n      _selectedPrefixAndSuffix += 2;\n    }\n    _firstAnswer = _firstAnswer.trim();\n    _setDialogueContent();\n  }\n};\n\n/**\n * On double click, check that we are on a question and display the dialogue with the question to edit.\n * @method displayDialogueForEdit\n * @param {Node} target\n * @public\n */\nconst displayDialogueForEdit = async function(target) {\n\n  const subquestion = resolveSubquestion(target);\n  if (!subquestion) {\n    return;\n  }\n  await _createModal();\n  _selectedOffset = indexOfNode(_editor.dom.select('.' + markerClass), subquestion);\n  _parseSubquestion(subquestion.innerHTML);\n  _setDialogueContent(_qtype);\n};\n\n/**\n * Search for cloze questions based on a regular expression. All the matching snippets at least contain the cloze\n * question definition. Although Moodle does not support encapsulated other functions within curly brackets, we\n * still try to find the correct closing bracket. The so extracted cloze question is surrounded by a marker span\n * element, that contains attributes so that the content inside the span cannot be modified by the editor (in the\n * textarea). Also, this makes it a lot easier to select the question, edit it in the dialogue and replace the result\n * in the existing text area.\n *\n * @method _addMarkers\n * @private\n */\nconst _addMarkers = function() {\n\n  let content = _editor.getContent();\n  let newContent = '';\n\n  // Check if there is already a marker span. In this case we do not have to do anything.\n  if (content.indexOf(markerClass) !== -1) {\n    return;\n  }\n\n  let m;\n  do {\n    m = content.match((_getRegexQtype(_editor)));\n    if (!m) { // No match of a cloze question, then we are done.\n      newContent += content;\n      break;\n    }\n    // Copy the current match to the new string preceded with the <span>.\n    const pos = content.indexOf(m[0]);\n    newContent += content.substring(0, pos) + markerSpan + content.substring(pos, pos + m[0].length);\n    content = content.substring(pos + m[0].length);\n\n    // Count the { in the string, should be just one (the very first one at position 0).\n    let level = (m[0].match(/\\{/g) || []).length;\n    if (level === 1) {\n      // If that's the case, we close the span and the cloze question text is the innerHTML of that marker span.\n      newContent += '</span>';\n      continue; // Look for the next matching cloze question.\n    }\n    // If there are more { than } in the string, then we did not find the corresponding } that belongs to the cloze string.\n    while (level > 1) {\n      const a = content.indexOf('{');\n      const b = content.indexOf('}');\n      if (a > -1 && b > -1 && a < b) { // The { is before another } so remember to find as many } until we back at level 1.\n        level++;\n        newContent = content.substring(0, a);\n        content = content.substring(a + 1);\n      } else if (b > -1) { // We found a closing } to a previously {.\n        newContent = content.substring(0, b);\n        content = content.substring(b + 1);\n        level--;\n      } else {\n        level = 1; // Should not happen, just to stop the endless loop.\n      }\n    }\n    newContent += '</span>';\n  } while (m);\n  _editor.setContent(newContent);\n};\n\n/**\n * Look for the marker span elements around a cloze question and remove that span. Also, the marker for a new\n * node to be inserted would be removed here as well.\n */\nconst _removeMarkers = function() {\n  for (const span of _editor.dom.select('span.' + markerClass)) {\n    _editor.dom.setOuterHTML(span, span.classList.contains('new') ? '' : span.innerHTML);\n  }\n};\n\n/**\n * When the source code view dialogue is show, we must remove the spans around the cloze question strings\n * from the editor content and add them again when the dialogue is closed.\n * Since this event is also triggered when the editor data is saved, we use this function to remove the\n * highlighting content at that time.\n *\n * @method onBeforeGetContent\n * @param {object} content\n * @public\n */\nconst onBeforeGetContent = function(content) {\n  if (!isNull(content.source_view) && content.source_view === true) {\n    // If the user clicks on 'Cancel' or the close button on the html\n    // source code dialog view, make sure we re-add the visual styling.\n    var onClose = function() {\n      _editor.off('close', onClose);\n      _addMarkers();\n    };\n    _editor.on('CloseWindow', () => {\n      onClose();\n    });\n    // Remove markers only if modal is not called, otherwise we will lose our new question marker.\n    if (!_modal) {\n      _removeMarkers();\n    }\n  }\n};\n\n/**\n * Fires when the form containing the editor is submitted.\n *\n * @method onSubmit\n * @public\n */\nconst onSubmit = function() {\n  _removeMarkers();\n};\n\n/**\n * Set the dialogue content for the tool, attaching any required events. Either the modal dialogue displays\n * a list of the question types for the form for a particular question to edit. The set content is also\n * called when the form has changed (up or down move, deletion and adding a response). We must be aware of that\n * an event to the dialogue buttons must be attached once only. Therefore, when the form content is modified, only\n * the form events for the answers are set again, the general events are nor (nomodalevents is true then).\n *\n * @method _setDialogueContent\n * @param {String} qtype The question type to be used\n * @param {boolean} nomodalevents Optional do not attach events.\n * @private\n */\nconst _setDialogueContent = function(qtype, nomodalevents) {\n  const footer = Mustache.render(TEMPLATE.FOOTER, {\n    cancel: STR.btn_cancel,\n    submit: !qtype ? STR.btn_select : STR.btn_insert,\n  });\n  let contentText;\n  if (!qtype) {\n    contentText = Mustache.render(TEMPLATE.TYPE, {\n      CSS: CSS,\n      STR: STR,\n      qtype: _qtype,\n      types: _getQuestionTypes()\n    });\n  } else {\n    contentText = Mustache.render(TEMPLATE.FORM, {\n      CSS: CSS,\n      STR: STR,\n      answerdata: _answerdata,\n      elementid: getUuid(),\n      qtype: _qtype,\n      name: _getQuestionTypes().filter(q => _qtype === q.type)[0].name,\n      marks: _marks,\n      numerical: (_qtype === 'NUMERICAL' || _qtype === 'NM')\n    });\n  }\n  _modal.setBody(contentText);\n  _modal.setFooter(footer);\n  _modal.show();\n  const $root = _modal.getRoot();\n  _form = $root.get(0).querySelector('form');\n  _toggleDeleteIcon();\n\n  if (!nomodalevents) {\n    _modal.registerEventListeners();\n    _modal.registerCloseOnSave();\n    _modal.registerCloseOnCancel();\n    $root.on(ModalEvents.cancel, _cancel);\n\n    if (!qtype) { // For the question list we need the choice handler only, and we are done.\n      $root.on(ModalEvents.save, _choiceHandler);\n      return;\n    } // Handler to add the question string to the editor content.\n    $root.on(ModalEvents.save, _setSubquestion);\n  }\n  // The form needs events for the icons to move up/down, add or delete a response.\n  const getTarget = e => {\n    let p = e.target;\n    while (!isNull(p) && p.nodeType === 1 && p.tagName !== 'A') {\n      p = p.parentNode;\n    }\n    if (isNull(p.classList)) {\n      return null;\n    }\n    return p;\n  };\n\n  _form.addEventListener('click', e => {\n    const p = getTarget(e);\n    if (isNull(p)) {\n      return;\n    }\n    if (p.classList.contains(CSS.DELETE)) {\n      e.preventDefault();\n      _deleteAnswer(p);\n      return;\n    }\n    if (p.classList.contains(CSS.ADD)) {\n      e.preventDefault();\n      _addAnswer(p);\n      return;\n    }\n    if (p.classList.contains(CSS.LOWER)) {\n      e.preventDefault();\n      _lowerAnswer(p);\n      return;\n    }\n    if (p.classList.contains(CSS.RAISE)) {\n      e.preventDefault();\n      _raiseAnswer(p);\n    }\n  });\n  _form.addEventListener('keyup', e => {\n    const p = getTarget(e);\n    if (isNull(p)) {\n      return;\n    }\n    if (p.classList.contains(CSS.ANSWER) || p.classList.contains(CSS.FEEDBACK)) {\n      e.preventDefault();\n      _addAnswer(p);\n    }\n  });\n  _form.querySelectorAll('.' + CSS.FRACTION).forEach((sel) => {\n    sel.addEventListener('change', e => {\n      const id = e.target.getAttribute('id');\n      if (e.target.value === selectCustomPercent) {\n        document.getElementById(id + '_custom').parentNode.classList.remove('hidden');\n      } else {\n        document.getElementById(id + '_custom').parentNode.classList.add('hidden');\n      }\n    });\n  });\n};\n\n/**\n * If there is one answer field, hide the delete icon. Otherwise show them\n * all to allow deletion of any answer.\n *\n * @private\n */\nconst _toggleDeleteIcon = function() {\n  const deleteIcons = _form.querySelectorAll('.' + CSS.DELETE);\n  if (deleteIcons.length === 1) {\n    deleteIcons[0].classList.add('hidden');\n    return;\n  }\n  for (let i = 0; i < deleteIcons.length; i++) {\n    deleteIcons[i].classList.remove('hidden');\n  }\n};\n\n/**\n * Handle question choice.\n *\n * @method _choiceHandler\n * @private\n * @param {Event} e Event from button click in chooser\n */\nconst _choiceHandler = function(e) {\n  e.preventDefault();\n  let qtype = _form.querySelector('input[name=qtype]:checked');\n  if (qtype) {\n    _qtype = qtype.value;\n  }\n  // For numerical and short answer questions (and when installed regexp) we offer one response field only.\n  // All other question types have three empty response fields.\n  const max = (_qtype.indexOf('SHORTANSWER') !== -1 || _qtype === 'NUMERICAL' || _qtype.indexOf('REGEXP') !== -1) ? 1 : 3;\n  const blankAnswer = {\n    id: getUuid(),\n    answer: '',\n    feedback: '',\n    fraction: 100,\n    fractionOptions: getFractionOptions(''),\n    tolerance: 0,\n    isCustomGrade: false,\n  };\n  _answerdata = [];\n  for (let x = 0; x < max; x++) {\n    _answerdata.push({...blankAnswer, id: getUuid()});\n  }\n  // The first response field gets the default grade correct.\n  _answerdata[0].fractionOptions = getFractionOptions('=');\n  // In case the user seleced some text, this is used as the first answer.\n  if (_firstAnswer) {\n    _answerdata[0].answer = _firstAnswer;\n  }\n  _modal.destroy();\n  // Our choice is stored in _qtype. We need to create the modal dialogue with the form now.\n  _createModal().then(() => {\n    _setDialogueContent(_qtype);\n    _form.querySelector('.' + CSS.ANSWER).focus();\n    return ''; // Make the linter happy.\n  }).catch(() => {\n      return '';\n  });\n};\n\n/**\n * Parse question and set properties found.\n *\n * @method _parseSubquestion\n * @private\n * @param {String} question The question string\n */\nconst _parseSubquestion = function(question) {\n  _answerdata = []; // Flush answers to have an empty dialogue if something goes wrong parsing the question string.\n  const regexQtype = _getRegexQtype(_editor);\n  const parts = regexQtype.exec(question);\n  regexQtype.lastIndex = 0; // Reset lastIndex so that the next match starts from the beginning of the question string.\n  if (!parts) {\n    return;\n  }\n  _marks = parts[1];\n  _qtype = parts[2];\n  // Convert the short notation to the long form e.g. SA to SHORTANSWER.\n  if (_qtype.length < 5) {\n    _getQuestionTypes().forEach(l => {\n      for (const a of l.abbr) {\n        if (a === _qtype) {\n          _qtype = l.type;\n          return;\n        }\n      }\n    });\n  }\n  // Depending on the regex the position of the answers is different.\n  const answers = parts[hasQtypeMultianswerrgx(_editor) ? 8 : 7].match(/(\\\\.|[^~])*/g);\n  if (!answers) {\n    return;\n  }\n  answers.forEach(function(answer) {\n    const options = /^(%(-?[.0-9]+)%|(=?))((\\\\.|[^#])*)#?(.*)/.exec(answer);\n    if (options && options[4]) {\n      let frac = '';\n      if (options[3]) {\n        frac = options[3] === '=' ? '=' : 100;\n      } else if (options[2]) {\n        frac = options[2];\n      }\n      if (_qtype === 'NUMERICAL' || _qtype === 'NM') {\n        const tolerance = /^([^:]*):?(.*)/.exec(options[4])[2] || 0;\n        _answerdata.push({\n          id: getUuid(),\n          answer: strdecode(options[4].replace(/:.*/, '')),\n          feedback: strdecode(options[6]),\n          tolerance: tolerance,\n          fraction: frac,\n          fractionOptions: getFractionOptions(frac),\n          isCustomGrade: isCustomGrade(frac),\n        });\n        return;\n      }\n      _answerdata.push({\n        answer: strdecode(options[4]),\n        id: getUuid(),\n        feedback: strdecode(options[6]),\n        fraction: frac,\n        fractionOptions: getFractionOptions(frac),\n        isCustomGrade: isCustomGrade(frac),\n      });\n    }\n  });\n};\n\n/**\n * Insert a new set of answer blanks below the button.\n *\n * @method _addAnswer\n * @param {Node} a Node that is the referred element\n * @private\n */\nconst _addAnswer = function(a) {\n  let index = indexOfNode(_form.querySelectorAll('.' + CSS.ADD), a);\n  if (index === -1) {\n    index = 0;\n  }\n  let fraction = '';\n  let answer = '';\n  let feedback = '';\n  let tolerance = 0;\n  if (a.closest('li')) {\n    fraction = a.closest('li').querySelector('.' + CSS.FRACTION).value;\n    if (fraction === selectCustomPercent) {\n      fraction = a.closest('li').querySelector('.' + CSS.FRAC_CUSTOM).value;\n    }\n    answer = a.closest('li').querySelector('.' + CSS.ANSWER).value;\n    feedback = a.closest('li').querySelector('.' + CSS.FEEDBACK).value;\n    if (a.closest('li').querySelector('.' + CSS.TOLERANCE)) {\n      tolerance = a.closest('li').querySelector('.' + CSS.TOLERANCE).value;\n    }\n  }\n  _processFormData();\n  _answerdata.splice(index, 0, {\n    id: getUuid(),\n    answer: answer,\n    feedback: feedback,\n    fraction: fraction,\n    fractionOptions: getFractionOptions(fraction),\n    tolerance: tolerance,\n    isCustomGrade: isCustomGrade(fraction)\n  });\n  _setDialogueContent(_qtype, true);\n  _toggleDeleteIcon();\n  _form.querySelectorAll('.' + CSS.ANSWER).item(index).focus();\n};\n\n/**\n * Delete set of answer next to the button.\n *\n * @method _deleteAnswer\n * @param {Node} a Node that is the referred element\n * @private\n */\nconst _deleteAnswer = function(a) {\n  let index = indexOfNode(_form.querySelectorAll('.' + CSS.DELETE), a);\n  if (index === -1) {\n    index = indexOfNode(_form.querySelectorAll('li'), a.closest('li'));\n  }\n  _processFormData();\n  _answerdata.splice(index, 1);\n  _setDialogueContent(_qtype, true);\n  const answers = _form.querySelectorAll('.' + CSS.ANSWER);\n  index = Math.min(index, answers.length - 1);\n  answers.item(index).focus();\n  _toggleDeleteIcon();\n};\n\n/**\n * Lower answer option\n *\n * @method _lowerAnswer\n * @param {Node} a Node that is the referred element\n * @private\n */\nconst _lowerAnswer = function(a) {\n  const li = a.closest('li');\n  li.before(li.nextSibling);\n  li.querySelector('.' + CSS.ANSWER).focus();\n};\n\n/**\n * Raise answer option\n *\n * @method _raiseAnswer\n * @param {Node} a Node that is the referred element\n * @private\n */\nconst _raiseAnswer = function(a) {\n  const li = a.closest('li');\n  li.after(li.previousSibling);\n  li.querySelector('.' + CSS.ANSWER).focus();\n};\n\n/**\n * Reset and hide form.\n *\n * @method _cancel\n * @param {Event} e Event from button click\n * @private\n */\nconst _cancel = function(e) {\n  e.preventDefault();\n  // In case there is a marker where the new question should be inserted in the text it needs to be removed.\n  for (const span of _editor.dom.select('.' + markerClass + '.new')) {\n    span.remove();\n  }\n  _modal.destroy();\n  _editor.focus();\n  _modal = null;\n};\n\n/**\n * Insert question string into editor content and reset and hide form. If the form contains an error\n * nothing happens.\n *\n * @method _setSubquestion\n * @param {Event} e Event from button click\n * @private\n */\nconst _setSubquestion = function(e) {\n  e.preventDefault();\n  // Check if there are any errors and if so, fill the error container with the\n  // messages and return without going any further and closing the dialogue.\n  const errMsg = _form.querySelector('.msg-error');\n  const formErrors = _processFormData(true);\n  if (formErrors.length > 0) {\n    errMsg.innerHTML = '<ul><li>' + formErrors.join('</li><li>') + '</li></ul>';\n    errMsg.classList.remove('hidden');\n    return;\n  } else {\n    errMsg.classList.add('hidden');\n  }\n  // Build the parser function from the data, that is going to be placed into the editor content.\n  let question = '{' + _marks + ':' + _qtype + ':';\n\n  // Filter all empty responses\n  for (let i = 0; i < _answerdata.length; i++) {\n    if (_answerdata[i].raw === '') {\n      continue;\n    }\n    question += _answerdata[i].fraction && !isNaN(_answerdata[i].fraction)\n      ? '%' + _answerdata[i].fraction + '%' : _answerdata[i].fraction;\n    question += strencode(_answerdata[i].answer);\n    if (_qtype === 'NM' || _qtype === 'NUMERICAL') {\n      question += ':' + _answerdata[i].tolerance;\n    }\n    if (_answerdata[i].feedback) {\n      question += '#' + strencode(_answerdata[i].feedback);\n    }\n    if (i < _answerdata.length - 1) {\n      question += '~';\n    }\n  }\n  if (question.slice(-1) === '~') {\n    question = question.substring(0, question.length - 1);\n  }\n  question += '}';\n  // eslint-disable-next-line no-bitwise\n  if (_selectedPrefixAndSuffix & 1) {\n    question = ' ' + question;\n  }\n  // eslint-disable-next-line no-bitwise\n  if (_selectedPrefixAndSuffix & 2) {\n    question += ' ';\n  }\n\n  _modal.destroy();\n  _modal = null;\n  _editor.focus();\n  if (_selectedOffset > -1) { // We have to replace one of the marker spans (the innerHTML contains the question string).\n    _editor.dom.select('.' + markerClass)[_selectedOffset].innerHTML = question;\n  } else {\n    // Just add the question text with markup.\n    _editor.insertContent(markerSpan + question + '</span>');\n  }\n};\n\n/**\n * Read the form data, process it and store the result in the internal _answerdata array.\n * Also, if validation is enabled, the fields are checked for invalid values e.g.\n * - answer field is empty (if a correct answer is contained, empty fields are eliminated).\n * - custom_grade field whenin use and does not contain a number.\n * - no field is marked as a correct answer.\n * - tolerance field must be in percentage of min -100 and max 100.\n * Any field with an error is maked and the first field containing an error gets the focus.\n *\n * @method _processFormData\n * @param {boolean} validate\n * @return {Array}\n * @private\n */\nconst _processFormData = function(validate) {\n  _answerdata = [];\n  let globalErrors = [];\n  const answers = _form.querySelectorAll('.' + CSS.ANSWER);\n  const feedbacks = _form.querySelectorAll('.' + CSS.FEEDBACK);\n  const fractions = _form.querySelectorAll('.' + CSS.FRACTION);\n  const customGrades = _form.querySelectorAll('.' + CSS.FRAC_CUSTOM);\n  const tolerances = _form.querySelectorAll('.' + CSS.TOLERANCE);\n  // Remove any error classes.\n  for (let i = 0; i < answers.length; i++) {\n    answers.item(i).classList.remove('error');\n    customGrades.item(i).classList.remove('error');\n    const currentAnswer = {\n      raw: answers.item(i).value.trim(),\n      answer: answers.item(i).value.trim(),\n      id: getUuid(),\n      feedback: feedbacks.item(i).value,\n      fraction: fractions.item(i).value === selectCustomPercent ? customGrades.item(i).value : fractions.item(i).value,\n      fractionOptions: getFractionOptions(fractions.item(i).value),\n      tolerance: tolerances.length > 0 ? tolerances.item(i).value : 0,\n      isCustomGrade: fractions.item(i).value === selectCustomPercent\n    };\n    if (_qtype === 'NM' || _qtype === 'NUMERICAL') {\n      tolerances.item(i).classList.remove('error');\n      // In numeric questions convert answer and tolerance to numeric values (this filters non numeric values).\n      currentAnswer.answer = Number(currentAnswer.answer);\n      currentAnswer.tolerance = Number(currentAnswer.tolerance);\n    }\n    _answerdata.push(currentAnswer);\n  }\n  _marks = _form.querySelector('.' + CSS.MARKS).value;\n\n  if (validate) {\n    const {hasCorrectAnswer, errors} = _validateAnswers();\n    for (let i = 0; i < _answerdata.length; i++) {\n      for (const err of _answerdata[i].hasErrors) {\n        if (hasCorrectAnswer && (err === 'empty_answer' || err === 'correct_but_empty')) {\n          break;\n        }\n        if (err === 'answer_not_numeric' || err === 'empty_answer' || err === 'correct_but_empty') {\n          answers.item(i).classList.add('error');\n        } else if (err === 'tolerance_not_numeric') {\n          tolerances.item(i).classList.add('error');\n        } else if (err === 'error_custom_rate') {\n          customGrades.item(i).classList.add('error');\n        }\n      }\n    }\n    globalErrors = _translateGlobalErrors(hasCorrectAnswer, errors);\n    // If we have errors, we focus the first field that contains an error.\n    if (globalErrors.length > 0) {\n      _form.querySelector('input.error').focus();\n    }\n  }\n  return globalErrors;\n};\n\n/**\n * Validates the answer array. Checks for each question if the data from the form is\n * incomplete or has other errors. These are flagged accordingly in the array element.\n * The retruned object contains the properties:\n * - hasCorrectAnswer {boolean} is true if there is at least one correct answer.\n * - errors {Array} list of strings that contain an error code that is globaly used for error messages.\n *\n * @return {Array}\n * @private\n */\nconst _validateAnswers = function() {\n  let errors = [];\n  let hasCorrect = false;\n  for (let i = 0; i < _answerdata.length; i++) {\n    _answerdata[i].hasErrors = [];\n    // Check if we have an empty answer string.\n    if (_answerdata[i].raw === '') {\n      _answerdata[i].hasErrors.push('empty_answer');\n    }\n    // When there are numeric questions, check that the answer and tolerance is a valid number.\n    if (_qtype === 'NM' || _qtype === 'NUMERICAL') {\n      if (isNaN(_answerdata[i].answer) && _answerdata[i].raw !== '') {\n        _answerdata[i].hasErrors.push('answer_not_numeric');\n      }\n      if (isNaN(_answerdata[i].tolerance)) {\n        _answerdata[i].hasErrors.push('tolerance_not_numeric');\n      }\n    }\n    // Check the custom grade, that must be a percentage number between -100 and 100.\n    if (_answerdata[i].isCustomGrade &&\n      (isNaN(_answerdata[i].fraction) || _answerdata[i].fraction < -100 || _answerdata[i].fraction > 100\n        || _answerdata[i].fraction.trim() === '')\n    ) {\n      _answerdata[i].hasErrors.push('error_custom_rate');\n    }\n    // We found a correct answer, when grade is marked as 100 or \"=\" and the answer is not empty.\n    if (_answerdata[i].fraction === '100' || _answerdata[i].fraction === '=') {\n      if (_answerdata[i].raw !== '') {\n        _answerdata[i].isCorrect = true;\n        hasCorrect = true;\n      } else {\n        _answerdata[i].hasErrors.push('correct_but_empty');\n      }\n    }\n    errors = errors.concat(_answerdata[i].hasErrors);\n  }\n\n  return {\n    hasCorrectAnswer: hasCorrect,\n    errors: _combineGlobalErrors(hasCorrect, errors),\n  };\n};\n\n/**\n * Translate the errors into a readable string for a list that is used on top of the\n * input fields, to indicate what part of the data is incorrect.\n *\n * @param {Boolean} hasCorrectAnswer\n * @param {Array} errors\n * @return {Array}\n * @private\n */\nconst _translateGlobalErrors = function(hasCorrectAnswer, errors) {\n  const errTranslated = [];\n  // Translate the error strings into a string that can be displayed in the form.\n  const trMsg = {\n    emptyanswer: STR.err_empty_answer,\n    answernotnumeric: STR.err_not_numeric,\n    tolerancenotnumeric: STR.err_not_numeric,\n    errorcustomrate: STR.err_custom_rate,\n    nonecorrect: STR.err_none_correct,\n  };\n  for (const err of errors) {\n    // If there's at least one correct answer, we filter out all empty answers and therefore do not\n    // show the error message.\n    if (hasCorrectAnswer && err === 'empty_answer' || err === 'correct_but_empty') {\n      continue;\n    }\n    // Remove underscore (we do this only because of the js linter).\n    const key = err.replace(/_/g, '');\n    errTranslated.push(trMsg[key]);\n  }\n  return errTranslated;\n};\n\n/**\n * Combine the error list from the answers to a global list.\n *\n * @param {Boolean} hasCorrectAnswer\n * @param {Array} errors\n * @return {Array}\n * @private\n */\nconst _combineGlobalErrors = function(hasCorrectAnswer, errors) {\n  // Unique errors for the global error list.\n  const errUnique = errors.filter((value, index, array) => array.indexOf(value) === index);\n  // If we have a correct answer, do not show the empty answer error, because empty responses are filtered.\n  if (hasCorrectAnswer) {\n    const i = errUnique.indexOf('empty_answer');\n    if (i > -1) {\n      errUnique.splice(i, 1);\n    }\n  } else if (!errUnique.includes('correct_but_empty')) {\n    errUnique.push('none_correct');\n  }\n  return errUnique;\n};\n\n/**\n * Check whether cursor is in a subquestion and return subquestion text if\n * true.\n *\n * @method resolveSubquestion\n * @param {Node|null} element The element to check if it is a subquestion.\n * @return {Mixed} The selected node of with the subquestion if found, false otherwise.\n */\nconst resolveSubquestion = function(element) {\n  let span = element || _editor.selection.getStart();\n  if (!isNull(span.classList) && span.classList.contains(markerClass)) {\n    return span;\n  }\n  _editor.dom.getParents(span, elm => {\n    // Are we in a span that encapsulates the cloze question?\n    if (!isNull(elm.classList) && elm.classList.contains(markerClass)) {\n      return elm;\n    }\n    return false;\n  });\n  return false;\n};\n\nexport {\n  displayDialogue,\n  displayDialogueForEdit,\n  resolveSubquestion,\n  onInit,\n  onBeforeGetContent,\n  onSubmit,\n};\n"],"names":["isNull","a","strdecode","t","String","replace","strencode","indexOfNode","list","node","i","length","getUuid","crypto","randomUUID","Math","floor","random","toString","getFractionOptions","s","attrSel","isSel","html","STR","incorrect","correct","FRACTIONS","forEach","item","value","indexOf","custom_grade","isCustomGrade","found","markerClass","markerSpan","CSS","ANSWER","ANSWERS","ADD","CANCEL","DELETE","FEEDBACK","FRACTION","FRAC_CUSTOM","LEFT","LOWER","RIGHT","MARKS","DUPLICATE","RAISE","SUBMIT","SUMMARY","TOLERANCE","TYPE","TEMPLATE","FORM","M","util","image_url","FOOTER","_editor","_form","_answerdata","_qtype","_selectedOffset","_marks","_modal","_firstAnswer","_selectedPrefixAndSuffix","ed","_addMarkers","_getStr","_getRegexQtype","editor","extQtypes","RegExp","async","strToFetch","key","component","langKeys","push","then","args","Array","from","arguments","map","l","catch","_getQuestionTypes","qtypes","multichoice","summary_multichoice","selectinline","singleyes","horizontal","vertical","shuffle","multiresponse","multi_vertical","singleno","multi_horizontal","numerical","summary_numerical","shortanswer","summary_shortanswer","caseno","caseyes","splice","regexp","summary_regexp","_createModal","cfg","title","templateContext","elementid","id","removeOnClose","large","Modal","create","ModalFactory","subquestion","resolveSubquestion","dom","select","_parseSubquestion","innerHTML","_setDialogueContent","selection","getContent","trim","target","m","content","newContent","match","pos","substring","level","b","setContent","_removeMarkers","span","setOuterHTML","classList","contains","source_view","onClose","off","on","qtype","nomodalevents","footer","Mustache","render","cancel","btn_cancel","submit","btn_insert","btn_select","contentText","answerdata","name","filter","q","type","marks","types","setBody","setFooter","show","$root","getRoot","get","querySelector","_toggleDeleteIcon","registerEventListeners","registerCloseOnSave","registerCloseOnCancel","ModalEvents","_cancel","save","_choiceHandler","_setSubquestion","getTarget","e","p","nodeType","tagName","parentNode","addEventListener","preventDefault","_deleteAnswer","_addAnswer","_lowerAnswer","_raiseAnswer","querySelectorAll","sel","getAttribute","document","getElementById","remove","add","deleteIcons","max","blankAnswer","answer","feedback","fraction","fractionOptions","tolerance","x","destroy","focus","question","regexQtype","parts","exec","lastIndex","abbr","answers","options","frac","index","closest","_processFormData","min","li","before","nextSibling","after","previousSibling","errMsg","formErrors","join","raw","isNaN","slice","insertContent","validate","globalErrors","feedbacks","fractions","customGrades","tolerances","currentAnswer","Number","hasCorrectAnswer","errors","_validateAnswers","err","hasErrors","_translateGlobalErrors","hasCorrect","isCorrect","concat","_combineGlobalErrors","errTranslated","trMsg","emptyanswer","err_empty_answer","answernotnumeric","err_not_numeric","tolerancenotnumeric","errorcustomrate","err_custom_rate","nonecorrect","err_none_correct","errUnique","array","includes","element","getStart","getParents","elm"],"mappings":"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"}