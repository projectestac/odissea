{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Commands helper for the Moodle tiny_fontsize plugin.\n *\n * @module      plugintype_pluginname/commands\n * @copyright   2023 Mikko Haiku <mikko.haiku@mediamaisteri.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getButtonImage} from 'editor_tiny/utils';\nimport {get_string as getString} from 'core/str';\nimport {\n    component,\n    fontsizeButtonName,\n    fontsizeMenuItemName,\n    icon,\n} from './common';\n\n/**\n * Handle the action for your plugin.\n * @param {TinyMCE.editor} editor The tinyMCE editor instance.\n * @param {integer} fontsize Font size in integer.\n */\nconst handleAction = (editor, fontsize) => {\n    editor.selection.dom.setAttrib(editor.selection.getNode(), \"style\", \"font-size: \" + fontsize + \"pt\");\n};\n\n\n/**\n * Get the setup function for the buttons.\n *\n * This is performed in an async function which ultimately returns the registration function as the\n * Tiny.AddOnManager.Add() function does not support async functions.\n *\n * @returns {function} The registration function to call within the Plugin.add function.\n */\nexport const getSetup = async() => {\n    const [\n        fontsizeButtonNameTitle,\n        fontsizeMenuItemNameTitle,\n        buttonImage,\n    ] = await Promise.all([\n        getString('button_fontsize', component),\n        getString('menuitem_fontsize', component),\n        getButtonImage('icon', component),\n    ]);\n\n    return (editor) => {\n        // Register the Moodle SVG as an icon suitable for use as a TinyMCE toolbar button.\n        editor.ui.registry.addIcon(icon, buttonImage.html);\n\n        // Register the fontsize Toolbar Button.\n        editor.ui.registry.addButton(fontsizeButtonName, {\n            icon,\n            tooltip: fontsizeButtonNameTitle,\n            onAction: () => handleAction(editor),\n        });\n\n        // Add the fontsize Menu Item.\n        // This allows it to be added to a standard menu, or a context menu.\n        editor.ui.registry.addMenuItem(fontsizeMenuItemName, {\n            icon,\n            text: fontsizeMenuItemNameTitle,\n            onAction: () => handleAction(editor),\n        });\n\n        // Define the font sizes and their corresponding text labels\n        const fontSizes = [\n            {size: 8, label: '8 pt'},\n            {size: 10, label: '10 pt'},\n            {size: 12, label: '12 pt'},\n            {size: 14, label: '14 pt'},\n            {size: 18, label: '18 pt'},\n            {size: 24, label: '24 pt'},\n            {size: 36, label: '36 pt'},\n        ];\n\n        /**\n         * Handle the font size menu item action.\n         *\n         * @param {Editor} editor - The editor instance.\n         * @param {number} size - The font size to set.\n         * @returns {Function} - The action handler function.\n         */\n        function handleFontSize(editor, size) {\n            return () => handleAction(editor, size);\n        }\n\n        // Create an array of submenu items using a map function\n        const submenuItems = fontSizes.map(({size, label}) => ({\n            type: 'menuitem',\n            text: label,\n            onAction: handleFontSize(editor, size),\n        }));\n\n        // Add the nested menu item to the editor UI\n        editor.ui.registry.addNestedMenuItem(fontsizeMenuItemName, {\n            icon,\n            text: fontsizeMenuItemNameTitle,\n            getSubmenuItems: () => submenuItems,\n        });\n\n        editor.ui.registry.addMenuButton(fontsizeButtonName, {\n            icon,\n            fetch: (callback) => {\n                // Pass the dynamically generated items to the callback.\n                callback(submenuItems);\n            },\n          });\n\n    };\n};\n"],"names":["handleAction","editor","fontsize","selection","dom","setAttrib","getNode","async","fontsizeButtonNameTitle","fontsizeMenuItemNameTitle","buttonImage","Promise","all","component","ui","registry","addIcon","icon","html","addButton","fontsizeButtonName","tooltip","onAction","addMenuItem","fontsizeMenuItemName","text","handleFontSize","size","submenuItems","label","map","_ref","type","addNestedMenuItem","getSubmenuItems","addMenuButton","fetch","callback"],"mappings":";;;;;;;;MAqCMA,aAAe,CAACC,OAAQC,YAC1BD,OAAOE,UAAUC,IAAIC,UAAUJ,OAAOE,UAAUG,UAAW,QAAS,cAAgBJ,SAAW,yBAY3EK,gBAEhBC,wBACAC,0BACAC,mBACMC,QAAQC,IAAI,EAClB,mBAAU,kBAAmBC,oBAC7B,mBAAU,oBAAqBA,oBAC/B,yBAAe,OAAQA,4BAGnBZ,SAEJA,OAAOa,GAAGC,SAASC,QAAQC,aAAMP,YAAYQ,MAG7CjB,OAAOa,GAAGC,SAASI,UAAUC,2BAAoB,CAC7CH,KAAAA,aACAI,QAASb,wBACTc,SAAU,IAAMtB,aAAaC,UAKjCA,OAAOa,GAAGC,SAASQ,YAAYC,6BAAsB,CACjDP,KAAAA,aACAQ,KAAMhB,0BACNa,SAAU,IAAMtB,aAAaC,mBAqBxByB,eAAezB,OAAQ0B,YACrB,IAAM3B,aAAaC,OAAQ0B,YAIhCC,aAtBY,CACd,CAACD,KAAM,EAAGE,MAAO,QACjB,CAACF,KAAM,GAAIE,MAAO,SAClB,CAACF,KAAM,GAAIE,MAAO,SAClB,CAACF,KAAM,GAAIE,MAAO,SAClB,CAACF,KAAM,GAAIE,MAAO,SAClB,CAACF,KAAM,GAAIE,MAAO,SAClB,CAACF,KAAM,GAAIE,MAAO,UAeSC,KAAIC,WAACJ,KAACA,KAADE,MAAOA,kBAAY,CACnDG,KAAM,WACNP,KAAMI,MACNP,SAAUI,eAAezB,OAAQ0B,UAIrC1B,OAAOa,GAAGC,SAASkB,kBAAkBT,6BAAsB,CACvDP,KAAAA,aACAQ,KAAMhB,0BACNyB,gBAAiB,IAAMN,eAG3B3B,OAAOa,GAAGC,SAASoB,cAAcf,2BAAoB,CACjDH,KAAAA,aACAmB,MAAQC,WAEJA,SAAST"}