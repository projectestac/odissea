{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * tiny_fontfamily for Moodle.\n *\n * @module      tiny_fontfamily\n * @copyright   2024 Mikko Haiku <mikko.haiku@mediamaisteri.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getFontList} from './options';\nimport {getButtonImage} from 'editor_tiny/utils';\nimport {get_string as getString} from 'core/str';\nimport {\n    component,\n    fontfamilyButtonName,\n    fontfamilyMenuItemName,\n    icon,\n} from './common';\n\n/**\n * Handle the action for your plugin.\n * @param {TinyMCE.editor} editor The tinyMCE editor instance.\n * @param {integer} fontfamily Font family in integer.\n */\nconst handleAction = (editor, fontfamily) => {\n    editor.selection.dom.setAttrib(editor.selection.getNode(), \"style\", \"font-family: \" + fontfamily);\n};\n\n/**\n * Get the setup function for the buttons.\n *\n * This is performed in an async function which ultimately returns the registration function as the\n * Tiny.AddOnManager.Add() function does not support async functions.\n *\n * @returns {function} The registration function to call within the Plugin.add function.\n */\nexport const getSetup = async() => {\n    const [\n        fontfamilyButtonNameTitle,\n        fontfamilyMenuItemNameTitle,\n        buttonImage,\n    ] = await Promise.all([\n        getString('button_fontfamily', component),\n        getString('menuitem_fontfamily', component),\n        getButtonImage('icon', component),\n    ]);\n\n    return (editor) => {\n\n        const fontList = getFontList(editor);\n\n        // If there is only one font available, we don't need the plugin.\n        if (fontList.length < 2) {\n            return;\n        }\n\n        // Register the Moodle SVG as an icon suitable for use as a TinyMCE toolbar button.\n        editor.ui.registry.addIcon(icon, buttonImage.html);\n\n        // Register the fontfamily Toolbar Button.\n        editor.ui.registry.addButton(fontfamilyButtonName, {\n            icon,\n            tooltip: fontfamilyButtonNameTitle,\n            onAction: () => handleAction(editor),\n        });\n\n        // Add the fontfamily Menu Item.\n        // This allows it to be added to a standard menu, or a context menu.\n        editor.ui.registry.addMenuItem(fontfamilyMenuItemName, {\n            icon,\n            text: fontfamilyMenuItemNameTitle,\n            onAction: () => handleAction(editor),\n        });\n\n        // Define the font families and their corresponding text labels\n        const fontfamilies = fontList.map(font => ({ family: font, label: font }));\n\n        /**\n         * Handle the font family menu item action.\n         *\n         * @param {Editor} editor - The editor instance.\n         * @param {number} family - The font family to set.\n         * @returns {Function} - The action handler function.\n         */\n        function handlefontfamily(editor, family) {\n            return () => handleAction(editor, family);\n        }\n\n        // Create an array of submenu items using a map function\n        const submenuItems = fontfamilies.map(({family, label}) => ({\n            type: 'menuitem',\n            text: label,\n            onAction: handlefontfamily(editor, family),\n        }));\n\n        // Add the nested menu item to the editor UI\n        editor.ui.registry.addNestedMenuItem(fontfamilyMenuItemName, {\n            icon,\n            text: fontfamilyMenuItemNameTitle,\n            getSubmenuItems: () => submenuItems,\n        });\n\n    };\n};\n"],"names":["handleAction","editor","fontfamily","selection","dom","setAttrib","getNode","async","fontfamilyButtonNameTitle","fontfamilyMenuItemNameTitle","buttonImage","Promise","all","component","fontList","length","ui","registry","addIcon","icon","html","addButton","fontfamilyButtonName","tooltip","onAction","addMenuItem","fontfamilyMenuItemName","text","handlefontfamily","family","submenuItems","map","font","label","_ref","type","addNestedMenuItem","getSubmenuItems"],"mappings":";;;;;;;;MAsCMA,aAAe,CAACC,OAAQC,cAC1BD,OAAOE,UAAUC,IAAIC,UAAUJ,OAAOE,UAAUG,UAAW,QAAS,gBAAkBJ,+BAWlEK,gBAEhBC,0BACAC,4BACAC,mBACMC,QAAQC,IAAI,EAClB,mBAAU,oBAAqBC,oBAC/B,mBAAU,sBAAuBA,oBACjC,yBAAe,OAAQA,4BAGnBZ,eAEEa,UAAW,wBAAYb,WAGzBa,SAASC,OAAS,SAKtBd,OAAOe,GAAGC,SAASC,QAAQC,aAAMT,YAAYU,MAG7CnB,OAAOe,GAAGC,SAASI,UAAUC,6BAAsB,CAC/CH,KAAAA,aACAI,QAASf,0BACTgB,SAAU,IAAMxB,aAAaC,UAKjCA,OAAOe,GAAGC,SAASQ,YAAYC,+BAAwB,CACnDP,KAAAA,aACAQ,KAAMlB,4BACNe,SAAU,IAAMxB,aAAaC,mBAaxB2B,iBAAiB3B,OAAQ4B,cACvB,IAAM7B,aAAaC,OAAQ4B,cAIhCC,aAdehB,SAASiB,KAAIC,QAAWH,OAAQG,KAAMC,MAAOD,SAchCD,KAAIG,WAACL,OAACA,OAADI,MAASA,kBAAY,CACxDE,KAAM,WACNR,KAAMM,MACNT,SAAUI,iBAAiB3B,OAAQ4B,YAIvC5B,OAAOe,GAAGC,SAASmB,kBAAkBV,+BAAwB,CACzDP,KAAAA,aACAQ,KAAMlB,4BACN4B,gBAAiB,IAAMP"}