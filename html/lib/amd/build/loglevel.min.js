function _typeof(a){if("function"==typeof Symbol&&"symbol"==typeof Symbol.iterator){_typeof=function(a){return typeof a}}else{_typeof=function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a}}return _typeof(a)}(function(a,b){"use strict";if("function"==typeof define&&define.amd){define ("core/loglevel",b)}else if("object"===("undefined"==typeof module?"undefined":_typeof(module))&&module.exports){module.exports=b()}else{a.log=b()}})(this,function(){"use strict";var g=function(){},h="undefined",j=["trace","debug","info","warn","error"];function a(a,b){var c=a[b];if("function"==typeof c.bind){return c.bind(a)}else{try{return Function.prototype.bind.call(c,a)}catch(b){return function(){return Function.prototype.apply.apply(c,[a,arguments])}}}}function b(b){if("debug"===b){b="log"}if(("undefined"==typeof console?"undefined":_typeof(console))===h){return!1}else if(console[b]!==void 0){return a(console,b)}else if(console.log!==void 0){return a(console,"log")}else{return g}}function c(a,b){for(var c=0,d;c<j.length;c++){d=j[c];this[d]=c<a?g:this.methodFactory(d,a,b)}this.log=this.debug}function d(a,b,d){return function(){if(("undefined"==typeof console?"undefined":_typeof(console))!==h){c.call(this,b,d);this[a].apply(this,arguments)}}}function e(a){return b(a)||d.apply(this,arguments)}function f(a,b,d){var i=this,k,l="loglevel";if(a){l+=":"+a}function f(a){var b=(j[a]||"silent").toUpperCase();if(("undefined"==typeof window?"undefined":_typeof(window))===h)return;try{window.localStorage[l]=b;return}catch(a){}try{window.document.cookie=encodeURIComponent(l)+"="+b+";"}catch(a){}}function g(){var a;if(("undefined"==typeof window?"undefined":_typeof(window))===h)return;try{a=window.localStorage[l]}catch(a){}if(_typeof(a)===h){try{var b=window.document.cookie,c=b.indexOf(encodeURIComponent(l)+"=");if(-1!==c){a=/^([^;]+)/.exec(b.slice(c))[1]}}catch(a){}}if(i.levels[a]===void 0){a=void 0}return a}i.name=a;i.levels={TRACE:0,DEBUG:1,INFO:2,WARN:3,ERROR:4,SILENT:5};i.methodFactory=d||e;i.getLevel=function(){return k};i.setLevel=function(b,d){if("string"==typeof b&&i.levels[b.toUpperCase()]!==void 0){b=i.levels[b.toUpperCase()]}if("number"==typeof b&&0<=b&&b<=i.levels.SILENT){k=b;if(!1!==d){f(b)}c.call(i,b,a);if(("undefined"==typeof console?"undefined":_typeof(console))===h&&b<i.levels.SILENT){return"No console available for logging"}}else{throw"log.setLevel() called with invalid level: "+b}};i.setDefaultLevel=function(a){if(!g()){i.setLevel(a,!1)}};i.enableAll=function(a){i.setLevel(i.levels.TRACE,a)};i.disableAll=function(a){i.setLevel(i.levels.SILENT,a)};var m=g();if(null==m){m=null==b?"WARN":b}i.setLevel(m,!1)}var k=new f,l={};k.getLogger=function(a){if("string"!=typeof a||""===a){throw new TypeError("You must supply a name when creating a logger.")}var b=l[a];if(!b){b=l[a]=new f(a,k.getLevel(),k.methodFactory)}return b};var m=("undefined"==typeof window?"undefined":_typeof(window))!==h?window.log:void 0;k.noConflict=function(){if(("undefined"==typeof window?"undefined":_typeof(window))!==h&&window.log===k){window.log=m}return k};k.getLoggers=function(){return l};return k});
//# sourceMappingURL=loglevel.min.js.map
