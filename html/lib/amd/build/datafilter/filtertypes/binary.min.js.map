{"version":3,"file":"binary.min.js","sources":["../../../src/datafilter/filtertypes/binary.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Base filter for binary selector ie: (Yes / No).\n *\n * @module     core/datafilter/filtertypes/binary\n * @author     2022 Ghaly Marc-Alexandre <marc-alexandreghaly@catalyst-ca.net>\n * @copyright  2022 Catalyst IT Australia Pty Ltd\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Filter from 'core/datafilter/filtertype';\nimport Selectors from 'core/datafilter/selectors';\nimport Templates from 'core/templates';\nimport {get_strings as getStrings} from 'core/str';\n\nexport default class extends Filter {\n\n    /**\n     * Text string for the first binary option.\n     *\n     * This option (and {@see optionTwo}) are set by {@see getTextValues()}. The base class will set default values,\n     * a subclass can override the method to define its own option.\n     *\n     * @type {String}\n     */\n    optionOne;\n\n    /**\n     * Text string for the second binary option.\n     *\n     * @type {String}\n     */\n    optionTwo;\n\n    /**\n     * Add the value selector to the filter row.\n     *\n     * @param {Array} initialValues The default value for the filter.\n     */\n    async addValueSelector(initialValues) {\n        [this.optionOne, this.optionTwo] = await this.getTextValues();\n        return this.displayBinarySelection(initialValues[0]);\n    }\n\n    /**\n     * Fetch text values for select options.\n     *\n     * Subclasses should override this method to set their own options.\n     *\n     * @returns {Promise}\n     */\n    getTextValues() {\n        return getStrings([{key: 'no'}, {key: 'yes'}]);\n    }\n\n    /**\n     * Renders yes/no select input with proper selection.\n     *\n     * @param {Number} initialValue The default value for the filter.\n     */\n    async displayBinarySelection(initialValue = 0) {\n        // We specify a specific filterset in case there are multiple filtering condition - avoiding glitches.\n        const specificFilterSet = this.rootNode.querySelector(Selectors.filter.byName(this.filterType));\n        const sourceDataNode = this.getSourceDataForFilter();\n        const context = {\n            filtertype: this.filterType,\n            title: sourceDataNode.getAttribute('data-field-title'),\n            required: sourceDataNode.dataset.required,\n            options: [\n                {\n                    text: this.optionOne,\n                    value: 0,\n                    selected: initialValue === 0,\n                },\n                {\n                    text: this.optionTwo,\n                    value: 1,\n                    selected: initialValue === 1,\n                },\n            ]\n        };\n        return Templates.render('core/datafilter/filtertypes/binary_selector', context)\n        .then((binaryUi, js) => {\n            return Templates.replaceNodeContents(specificFilterSet.querySelector(Selectors.filter.regions.values), binaryUi, js);\n        });\n    }\n\n    /**\n     * Get the list of raw values for this filter type.\n     *\n     * @returns {Array}\n     */\n    get values() {\n        return [parseInt(this.filterRoot.querySelector(`[data-filterfield=\"${this.name}\"]`).value)];\n    }\n\n}\n"],"names":["Filter","initialValues","this","optionOne","optionTwo","getTextValues","displayBinarySelection","key","initialValue","specificFilterSet","rootNode","querySelector","Selectors","filter","byName","filterType","sourceDataNode","getSourceDataForFilter","context","filtertype","title","getAttribute","required","dataset","options","text","value","selected","Templates","render","then","binaryUi","js","replaceNodeContents","regions","values","parseInt","filterRoot","name"],"mappings":"irBA6B6BA,+JAwBFC,sBAClBC,KAAKC,UAAWD,KAAKE,iBAAmBF,KAAKG,gBACvCH,KAAKI,uBAAuBL,cAAc,IAUrDI,uBACW,oBAAW,CAAC,CAACE,IAAK,MAAO,CAACA,IAAK,4CAQbC,oEAAe,QAElCC,kBAAoBP,KAAKQ,SAASC,cAAcC,mBAAUC,OAAOC,OAAOZ,KAAKa,aAC7EC,eAAiBd,KAAKe,yBACtBC,QAAU,CACZC,WAAYjB,KAAKa,WACjBK,MAAOJ,eAAeK,aAAa,oBACnCC,SAAUN,eAAeO,QAAQD,SACjCE,QAAS,CACL,CACIC,KAAMvB,KAAKC,UACXuB,MAAO,EACPC,SAA2B,IAAjBnB,cAEd,CACIiB,KAAMvB,KAAKE,UACXsB,MAAO,EACPC,SAA2B,IAAjBnB,uBAIfoB,mBAAUC,OAAO,8CAA+CX,SACtEY,MAAK,CAACC,SAAUC,KACNJ,mBAAUK,oBAAoBxB,kBAAkBE,cAAcC,mBAAUC,OAAOqB,QAAQC,QAASJ,SAAUC,MASrHG,mBACO,CAACC,SAASlC,KAAKmC,WAAW1B,2CAAoCT,KAAKoC,YAAUZ"}