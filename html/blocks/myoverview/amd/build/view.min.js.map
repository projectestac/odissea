{"version":3,"file":"view.min.js","sources":["../src/view.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle. If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Manage the courses view for the overview block.\n *\n * @copyright  2018 Bas Brands <bas@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport * as Repository from 'block_myoverview/repository';\nimport * as PagedContentFactory from 'core/paged_content_factory';\nimport * as PubSub from 'core/pubsub';\nimport * as CustomEvents from 'core/custom_interaction_events';\nimport * as Notification from 'core/notification';\nimport * as Templates from 'core/templates';\nimport * as CourseEvents from 'core_course/events';\nimport SELECTORS from 'block_myoverview/selectors';\nimport * as PagedContentEvents from 'core/paged_content_events';\nimport * as Aria from 'core/aria';\nimport {debounce} from 'core/utils';\n\nconst TEMPLATES = {\n    COURSES_CARDS: 'block_myoverview/view-cards',\n    COURSES_LIST: 'block_myoverview/view-list',\n    COURSES_SUMMARY: 'block_myoverview/view-summary',\n    NOCOURSES: 'core_course/no-courses'\n};\n\nconst GROUPINGS = {\n    GROUPING_ALLINCLUDINGHIDDEN: 'allincludinghidden',\n    GROUPING_ALL: 'all',\n    GROUPING_INPROGRESS: 'inprogress',\n    GROUPING_FUTURE: 'future',\n    GROUPING_PAST: 'past',\n    GROUPING_FAVOURITES: 'favourites',\n    GROUPING_HIDDEN: 'hidden'\n};\n\nconst NUMCOURSES_PERPAGE = [12, 24, 48, 96, 0];\n\nlet loadedPages = [];\n\nlet courseOffset = 0;\n\nlet lastPage = 0;\n\nlet lastLimit = 0;\n\nlet namespace = null;\n\n/**\n * Get filter values from DOM.\n *\n * @param {object} root The root element for the courses view.\n * @return {filters} Set filters.\n */\nconst getFilterValues = root => {\n    const courseRegion = root.find(SELECTORS.courseView.region);\n    return {\n        display: courseRegion.attr('data-display'),\n        grouping: courseRegion.attr('data-grouping'),\n        sort: courseRegion.attr('data-sort'),\n        displaycategories: courseRegion.attr('data-displaycategories'),\n        customfieldname: courseRegion.attr('data-customfieldname'),\n        customfieldvalue: courseRegion.attr('data-customfieldvalue'),\n    };\n};\n\n// We want the paged content controls below the paged content area.\n// and the controls should be ignored while data is loading.\nconst DEFAULT_PAGED_CONTENT_CONFIG = {\n    ignoreControlWhileLoading: true,\n    controlPlacementBottom: true,\n    persistentLimitKey: 'block_myoverview_user_paging_preference'\n};\n\n/**\n * Get enrolled courses from backend.\n *\n * @param {object} filters The filters for this view.\n * @param {int} limit The number of courses to show.\n * @return {promise} Resolved with an array of courses.\n */\nconst getMyCourses = (filters, limit) => {\n    return Repository.getEnrolledCoursesByTimeline({\n        offset: courseOffset,\n        limit: limit,\n        classification: filters.grouping,\n        sort: filters.sort,\n        customfieldname: filters.customfieldname,\n        customfieldvalue: filters.customfieldvalue\n    });\n};\n\n/**\n * Search for enrolled courses from backend.\n *\n * @param {object} filters The filters for this view.\n * @param {int} limit The number of courses to show.\n * @param {string} searchValue What does the user want to search within their courses.\n * @return {promise} Resolved with an array of courses.\n */\nconst getSearchMyCourses = (filters, limit, searchValue) => {\n    return Repository.getEnrolledCoursesByTimeline({\n        offset: courseOffset,\n        limit: limit,\n        classification: 'search',\n        sort: filters.sort,\n        customfieldname: filters.customfieldname,\n        customfieldvalue: filters.customfieldvalue,\n        searchvalue: searchValue\n    });\n};\n\n/**\n * Get the container element for the favourite icon.\n *\n * @param {Object} root The course overview container\n * @param {Number} courseId Course id number\n * @return {Object} The favourite icon container\n */\nconst getFavouriteIconContainer = (root, courseId) => {\n    return root.find(SELECTORS.FAVOURITE_ICON + '[data-course-id=\"' + courseId + '\"]');\n};\n\n/**\n * Get the paged content container element.\n *\n * @param {Object} root The course overview container\n * @param {Number} index Rendered page index.\n * @return {Object} The rendered paged container.\n */\nconst getPagedContentContainer = (root, index) => {\n    return root.find('[data-region=\"paged-content-page\"][data-page=\"' + index + '\"]');\n};\n\n/**\n * Get the course id from a favourite element.\n *\n * @param {Object} root The favourite icon container element.\n * @return {Number} Course id.\n */\nconst getCourseId = root => {\n    return root.attr('data-course-id');\n};\n\n/**\n * Hide the favourite icon.\n *\n * @param {Object} root The favourite icon container element.\n * @param {Number} courseId Course id number.\n */\nconst hideFavouriteIcon = (root, courseId) => {\n    const iconContainer = getFavouriteIconContainer(root, courseId);\n\n    const isFavouriteIcon = iconContainer.find(SELECTORS.ICON_IS_FAVOURITE);\n    isFavouriteIcon.addClass('hidden');\n    Aria.hide(isFavouriteIcon);\n\n    const notFavourteIcon = iconContainer.find(SELECTORS.ICON_NOT_FAVOURITE);\n    notFavourteIcon.removeClass('hidden');\n    Aria.unhide(notFavourteIcon);\n};\n\n/**\n * Show the favourite icon.\n *\n * @param {Object} root The course overview container.\n * @param {Number} courseId Course id number.\n */\nconst showFavouriteIcon = (root, courseId) => {\n    const iconContainer = getFavouriteIconContainer(root, courseId);\n\n    const isFavouriteIcon = iconContainer.find(SELECTORS.ICON_IS_FAVOURITE);\n    isFavouriteIcon.removeClass('hidden');\n    Aria.unhide(isFavouriteIcon);\n\n    const notFavourteIcon = iconContainer.find(SELECTORS.ICON_NOT_FAVOURITE);\n    notFavourteIcon.addClass('hidden');\n    Aria.hide(notFavourteIcon);\n};\n\n/**\n * Get the action menu item\n *\n * @param {Object} root The course overview container\n * @param {Number} courseId Course id.\n * @return {Object} The add to favourite menu item.\n */\nconst getAddFavouriteMenuItem = (root, courseId) => {\n    return root.find('[data-action=\"add-favourite\"][data-course-id=\"' + courseId + '\"]');\n};\n\n/**\n * Get the action menu item\n *\n * @param {Object} root The course overview container\n * @param {Number} courseId Course id.\n * @return {Object} The remove from favourites menu item.\n */\nconst getRemoveFavouriteMenuItem = (root, courseId) => {\n    return root.find('[data-action=\"remove-favourite\"][data-course-id=\"' + courseId + '\"]');\n};\n\n/**\n * Add course to favourites\n *\n * @param {Object} root The course overview container\n * @param {Number} courseId Course id number\n */\nconst addToFavourites = (root, courseId) => {\n    const removeAction = getRemoveFavouriteMenuItem(root, courseId);\n    const addAction = getAddFavouriteMenuItem(root, courseId);\n\n    setCourseFavouriteState(courseId, true).then(success => {\n        if (success) {\n            PubSub.publish(CourseEvents.favourited, courseId);\n            removeAction.removeClass('hidden');\n            addAction.addClass('hidden');\n            showFavouriteIcon(root, courseId);\n        } else {\n            Notification.alert('Starring course failed', 'Could not change favourite state');\n        }\n        return;\n    }).catch(Notification.exception);\n};\n\n/**\n * Remove course from favourites\n *\n * @param {Object} root The course overview container\n * @param {Number} courseId Course id number\n */\nconst removeFromFavourites = (root, courseId) => {\n    const removeAction = getRemoveFavouriteMenuItem(root, courseId);\n    const addAction = getAddFavouriteMenuItem(root, courseId);\n\n    setCourseFavouriteState(courseId, false).then(success => {\n        if (success) {\n            PubSub.publish(CourseEvents.unfavorited, courseId);\n            removeAction.addClass('hidden');\n            addAction.removeClass('hidden');\n            hideFavouriteIcon(root, courseId);\n        } else {\n            Notification.alert('Starring course failed', 'Could not change favourite state');\n        }\n        return;\n    }).catch(Notification.exception);\n};\n\n/**\n * Get the action menu item\n *\n * @param {Object} root The course overview container\n * @param {Number} courseId Course id.\n * @return {Object} The hide course menu item.\n */\nconst getHideCourseMenuItem = (root, courseId) => {\n    return root.find('[data-action=\"hide-course\"][data-course-id=\"' + courseId + '\"]');\n};\n\n/**\n * Get the action menu item\n *\n * @param {Object} root The course overview container\n * @param {Number} courseId Course id.\n * @return {Object} The show course menu item.\n */\nconst getShowCourseMenuItem = (root, courseId) => {\n    return root.find('[data-action=\"show-course\"][data-course-id=\"' + courseId + '\"]');\n};\n\n/**\n * Hide course\n *\n * @param {Object} root The course overview container\n * @param {Number} courseId Course id number\n */\nconst hideCourse = (root, courseId) => {\n    const hideAction = getHideCourseMenuItem(root, courseId);\n    const showAction = getShowCourseMenuItem(root, courseId);\n    const filters = getFilterValues(root);\n\n    setCourseHiddenState(courseId, true);\n\n    // Remove the course from this view as it is now hidden and thus not covered by this view anymore.\n    // Do only if we are not in \"All (including archived)\" view mode where really all courses are shown.\n    if (filters.grouping !== GROUPINGS.GROUPING_ALLINCLUDINGHIDDEN) {\n        hideElement(root, courseId);\n    }\n\n    hideAction.addClass('hidden');\n    showAction.removeClass('hidden');\n};\n\n/**\n * Show course\n *\n * @param {Object} root The course overview container\n * @param {Number} courseId Course id number\n */\nconst showCourse = (root, courseId) => {\n    const hideAction = getHideCourseMenuItem(root, courseId);\n    const showAction = getShowCourseMenuItem(root, courseId);\n    const filters = getFilterValues(root);\n\n    setCourseHiddenState(courseId, null);\n\n    // Remove the course from this view as it is now shown again and thus not covered by this view anymore.\n    // Do only if we are not in \"All (including archived)\" view mode where really all courses are shown.\n    if (filters.grouping !== GROUPINGS.GROUPING_ALLINCLUDINGHIDDEN) {\n        hideElement(root, courseId);\n    }\n\n    hideAction.removeClass('hidden');\n    showAction.addClass('hidden');\n};\n\n/**\n * Set the courses hidden status and push to repository\n *\n * @param {Number} courseId Course id to favourite.\n * @param {Boolean} status new hidden status.\n * @return {Promise} Repository promise.\n */\nconst setCourseHiddenState = (courseId, status) => {\n\n    // If the given status is not hidden, the preference has to be deleted with a null value.\n    if (status === false) {\n        status = null;\n    }\n    return Repository.updateUserPreferences({\n        preferences: [\n            {\n                type: 'block_myoverview_hidden_course_' + courseId,\n                value: status\n            }\n        ]\n    });\n};\n\n/**\n * Reset the loadedPages dataset to take into account the hidden element\n *\n * @param {Object} root The course overview container\n * @param {Number} id The course id number\n */\nconst hideElement = (root, id) => {\n    const pagingBar = root.find('[data-region=\"paging-bar\"]');\n    const jumpto = parseInt(pagingBar.attr('data-active-page-number'));\n\n    // Get a reduced dataset for the current page.\n    const courseList = loadedPages[jumpto];\n    let reducedCourse = courseList.courses.reduce((accumulator, current) => {\n        if (+id !== +current.id) {\n            accumulator.push(current);\n        }\n        return accumulator;\n    }, []);\n\n    // Get the next page's data if loaded and pop the first element from it.\n    if (typeof (loadedPages[jumpto + 1]) !== 'undefined') {\n        const newElement = loadedPages[jumpto + 1].courses.slice(0, 1);\n\n        // Adjust the dataset for the reset of the pages that are loaded.\n        loadedPages.forEach((courseList, index) => {\n            if (index > jumpto) {\n                let popElement = [];\n                if (typeof (loadedPages[index + 1]) !== 'undefined') {\n                    popElement = loadedPages[index + 1].courses.slice(0, 1);\n                }\n                loadedPages[index].courses = [...loadedPages[index].courses.slice(1), ...popElement];\n            }\n        });\n\n        reducedCourse = [...reducedCourse, ...newElement];\n    }\n\n    // Check if the next page is the last page and if it still has data associated to it.\n    if (lastPage === jumpto + 1 && loadedPages[jumpto + 1].courses.length === 0) {\n        const pagedContentContainer = root.find('[data-region=\"paged-content-container\"]');\n        PagedContentFactory.resetLastPageNumber($(pagedContentContainer).attr('id'), jumpto);\n    }\n\n    loadedPages[jumpto].courses = reducedCourse;\n\n    // Reduce the course offset.\n    courseOffset--;\n\n    // Render the paged content for the current.\n    const pagedContentPage = getPagedContentContainer(root, jumpto);\n    renderCourses(root, loadedPages[jumpto]).then((html, js) => {\n        return Templates.replaceNodeContents(pagedContentPage, html, js);\n    }).catch(Notification.exception);\n\n    // Delete subsequent pages in order to trigger the callback.\n    loadedPages.forEach((courseList, index) => {\n        if (index > jumpto) {\n            const page = getPagedContentContainer(root, index);\n            page.remove();\n        }\n    });\n};\n\n/**\n * Set the courses favourite status and push to repository\n *\n * @param {Number} courseId Course id to favourite.\n * @param {boolean} status new favourite status.\n * @return {Promise} Repository promise.\n */\nconst setCourseFavouriteState = (courseId, status) => {\n\n    return Repository.setFavouriteCourses({\n        courses: [\n            {\n                'id': courseId,\n                'favourite': status\n            }\n        ]\n    }).then(result => {\n        if (result.warnings.length === 0) {\n            loadedPages.forEach(courseList => {\n                courseList.courses.forEach((course, index) => {\n                    if (course.id == courseId) {\n                        courseList.courses[index].isfavourite = status;\n                    }\n                });\n            });\n            return true;\n        } else {\n            return false;\n        }\n    }).catch(Notification.exception);\n};\n\n/**\n * Given there are no courses to render provide the rendered template.\n *\n * @param {object} root The root element for the courses view.\n * @return {promise} jQuery promise resolved after rendering is complete.\n */\nconst noCoursesRender = root => {\n    const nocoursesimg = root.find(SELECTORS.courseView.region).attr('data-nocoursesimg');\n    const newcourseurl = root.find(SELECTORS.courseView.region).attr('data-newcourseurl');\n    return Templates.render(TEMPLATES.NOCOURSES, {\n        nocoursesimg: nocoursesimg,\n        newcourseurl: newcourseurl\n    });\n};\n\n/**\n * Render the dashboard courses.\n *\n * @param {object} root The root element for the courses view.\n * @param {array} coursesData containing array of returned courses.\n * @return {promise} jQuery promise resolved after rendering is complete.\n */\nconst renderCourses = (root, coursesData) => {\n\n    const filters = getFilterValues(root);\n\n    let currentTemplate = '';\n    if (filters.display === 'card') {\n        currentTemplate = TEMPLATES.COURSES_CARDS;\n    } else if (filters.display === 'list') {\n        currentTemplate = TEMPLATES.COURSES_LIST;\n    } else {\n        currentTemplate = TEMPLATES.COURSES_SUMMARY;\n    }\n\n    if (!coursesData) {\n        return noCoursesRender(root);\n    } else {\n        // Sometimes we get weird objects coming after a failed search, cast to ensure typing functions.\n        if (Array.isArray(coursesData.courses) === false) {\n            coursesData.courses = Object.values(coursesData.courses);\n        }\n        // Whether the course category should be displayed in the course item.\n        coursesData.courses = coursesData.courses.map(course => {\n            course.showcoursecategory = filters.displaycategories === 'on';\n            return course;\n        });\n        if (coursesData.courses.length) {\n            return Templates.render(currentTemplate, {\n                courses: coursesData.courses,\n            });\n        } else {\n            return noCoursesRender(root);\n        }\n    }\n};\n\n/**\n * Return the callback to be passed to the subscribe event\n *\n * @param {object} root The root element for the courses view\n * @return {function} Partially applied function that'll execute when passed a limit\n */\nconst setLimit = root => {\n    // @param {Number} limit The paged limit that is passed through the event.\n    return limit => root.find(SELECTORS.courseView.region).attr('data-paging', limit);\n};\n\n/**\n * Intialise the paged list and cards views on page load.\n * Returns an array of paged contents that we would like to handle here\n *\n * @param {object} root The root element for the courses view\n * @param {string} namespace The namespace for all the events attached\n */\nconst registerPagedEventHandlers = (root, namespace) => {\n    const event = namespace + PagedContentEvents.SET_ITEMS_PER_PAGE_LIMIT;\n    PubSub.subscribe(event, setLimit(root));\n};\n\n/**\n * Figure out how many items are going to be allowed to be rendered in the block.\n *\n * @param  {Number} pagingLimit How many courses to display\n * @param  {Object} root The course overview container\n * @return {Number[]} How many courses will be rendered\n */\nconst itemsPerPageFunc = (pagingLimit, root) => {\n    let itemsPerPage = NUMCOURSES_PERPAGE.map(value => {\n        let active = false;\n        if (value === pagingLimit) {\n            active = true;\n        }\n\n        return {\n            value: value,\n            active: active\n        };\n    });\n\n    // Filter out all pagination options which are too large for the amount of courses user is enrolled in.\n    const totalCourseCount = parseInt(root.find(SELECTORS.courseView.region).attr('data-totalcoursecount'), 10);\n    return itemsPerPage.filter(pagingOption => {\n        return pagingOption.value < totalCourseCount || pagingOption.value === 0;\n    });\n};\n\n/**\n * Mutates and controls the loadedPages array and handles the bootstrapping.\n *\n * @param {Array|Object} coursesData Array of all of the courses to start building the page from\n * @param {Number} currentPage What page are we currently on?\n * @param {Object} pageData Any current page information\n * @param {Object} actions Paged content helper\n * @param {null|boolean} activeSearch Are we currently actively searching and building up search results?\n */\nconst pageBuilder = (coursesData, currentPage, pageData, actions, activeSearch = null) => {\n    // If the courseData comes in an object then get the value otherwise it is a pure array.\n    let courses = coursesData.courses ? coursesData.courses : coursesData;\n    let nextPageStart = 0;\n    let pageCourses = [];\n\n    // If current page's data is loaded make sure we max it to page limit.\n    if (typeof (loadedPages[currentPage]) !== 'undefined') {\n        pageCourses = loadedPages[currentPage].courses;\n        const currentPageLength = pageCourses.length;\n        if (currentPageLength < pageData.limit) {\n            nextPageStart = pageData.limit - currentPageLength;\n            pageCourses = {...loadedPages[currentPage].courses, ...courses.slice(0, nextPageStart)};\n        }\n    } else {\n        // When the page limit is zero, there is only one page of courses, no start for next page.\n        nextPageStart = pageData.limit || false;\n        pageCourses = (pageData.limit > 0) ? courses.slice(0, pageData.limit) : courses;\n    }\n\n    // Finished setting up the current page.\n    loadedPages[currentPage] = {\n        courses: pageCourses\n    };\n\n    // Set up the next page (if there is more than one page).\n    const remainingCourses = nextPageStart !== false ? courses.slice(nextPageStart, courses.length) : [];\n    if (remainingCourses.length) {\n        loadedPages[currentPage + 1] = {\n            courses: remainingCourses\n        };\n    }\n\n    // Set the last page to either the current or next page.\n    if (loadedPages[currentPage].courses.length < pageData.limit || !remainingCourses.length) {\n        lastPage = currentPage;\n        if (activeSearch === null) {\n            actions.allItemsLoaded(currentPage);\n        }\n    } else if (typeof (loadedPages[currentPage + 1]) !== 'undefined'\n        && loadedPages[currentPage + 1].courses.length < pageData.limit) {\n        lastPage = currentPage + 1;\n    }\n\n    courseOffset = coursesData.nextoffset;\n};\n\n/**\n * In cases when switching between regular rendering and search rendering we need to reset some variables.\n */\nconst resetGlobals = () => {\n    courseOffset = 0;\n    loadedPages = [];\n    lastPage = 0;\n    lastLimit = 0;\n};\n\n/**\n * The default functionality of fetching paginated courses without special handling.\n *\n * @return {function(Object, Object, Object, Object, Object, Promise, Number): void}\n */\nconst standardFunctionalityCurry = () => {\n    resetGlobals();\n    return (filters, currentPage, pageData, actions, root, promises, limit) => {\n        const pagePromise = getMyCourses(\n            filters,\n            limit\n        ).then(coursesData => {\n            pageBuilder(coursesData, currentPage, pageData, actions);\n            return renderCourses(root, loadedPages[currentPage]);\n        }).catch(Notification.exception);\n\n        promises.push(pagePromise);\n    };\n};\n\n/**\n * Initialize the searching functionality so we can call it when required.\n *\n * @return {function(Object, Number, Object, Object, Object, Promise, Number, String): void}\n */\nconst searchFunctionalityCurry = () => {\n    resetGlobals();\n    return (filters, currentPage, pageData, actions, root, promises, limit, inputValue) => {\n        const searchingPromise = getSearchMyCourses(\n            filters,\n            limit,\n            inputValue\n        ).then(coursesData => {\n            pageBuilder(coursesData, currentPage, pageData, actions);\n            return renderCourses(root, loadedPages[currentPage]);\n        }).catch(Notification.exception);\n\n        promises.push(searchingPromise);\n    };\n};\n\n/**\n * Initialise the courses list and cards views on page load.\n *\n * @param {object} root The root element for the courses view.\n * @param {function} promiseFunction How do we fetch the courses and what do we do with them?\n * @param {null | string} inputValue What to search for\n */\nconst initializePagedContent = (root, promiseFunction, inputValue = null) => {\n    const pagingLimit = parseInt(root.find(SELECTORS.courseView.region).attr('data-paging'), 10);\n    let itemsPerPage = itemsPerPageFunc(pagingLimit, root);\n\n    const filters = getFilterValues(root);\n    const config = {...{}, ...DEFAULT_PAGED_CONTENT_CONFIG};\n    config.eventNamespace = namespace;\n\n    const pagedContentPromise = PagedContentFactory.createWithLimit(\n        itemsPerPage,\n        (pagesData, actions) => {\n            let promises = [];\n            pagesData.forEach(pageData => {\n                const currentPage = pageData.pageNumber;\n                let limit = (pageData.limit > 0) ? pageData.limit : 0;\n\n                // Reset local variables if limits have changed.\n                if (+lastLimit !== +limit) {\n                    loadedPages = [];\n                    courseOffset = 0;\n                    lastPage = 0;\n                }\n\n                if (lastPage === currentPage) {\n                    // If we are on the last page and have it's data then load it from cache.\n                    actions.allItemsLoaded(lastPage);\n                    promises.push(renderCourses(root, loadedPages[currentPage]));\n                    return;\n                }\n\n                lastLimit = limit;\n\n                // Get 2 pages worth of data as we will need it for the hidden functionality.\n                if (typeof (loadedPages[currentPage + 1]) === 'undefined') {\n                    if (typeof (loadedPages[currentPage]) === 'undefined') {\n                        limit *= 2;\n                    }\n                }\n\n                // Call the curried function that'll handle the course promise and any manipulation of it.\n                promiseFunction(filters, currentPage, pageData, actions, root, promises, limit, inputValue);\n            });\n            return promises;\n        },\n        config\n    );\n\n    pagedContentPromise.then((html, js) => {\n        registerPagedEventHandlers(root, namespace);\n        return Templates.replaceNodeContents(root.find(SELECTORS.courseView.region), html, js);\n    }).catch(Notification.exception);\n};\n\n/**\n * Listen to, and handle events for the myoverview block.\n *\n * @param {Object} root The myoverview block container element.\n * @param {HTMLElement} page The whole HTMLElement for our block.\n */\nconst registerEventListeners = (root, page) => {\n\n    CustomEvents.define(root, [\n        CustomEvents.events.activate\n    ]);\n\n    root.on(CustomEvents.events.activate, SELECTORS.ACTION_ADD_FAVOURITE, (e, data) => {\n        const favourite = $(e.target).closest(SELECTORS.ACTION_ADD_FAVOURITE);\n        const courseId = getCourseId(favourite);\n        addToFavourites(root, courseId);\n        data.originalEvent.preventDefault();\n    });\n\n    root.on(CustomEvents.events.activate, SELECTORS.ACTION_REMOVE_FAVOURITE, (e, data) => {\n        const favourite = $(e.target).closest(SELECTORS.ACTION_REMOVE_FAVOURITE);\n        const courseId = getCourseId(favourite);\n        removeFromFavourites(root, courseId);\n        data.originalEvent.preventDefault();\n    });\n\n    root.on(CustomEvents.events.activate, SELECTORS.FAVOURITE_ICON, (e, data) => {\n        data.originalEvent.preventDefault();\n    });\n\n    root.on(CustomEvents.events.activate, SELECTORS.ACTION_HIDE_COURSE, (e, data) => {\n        const target = $(e.target).closest(SELECTORS.ACTION_HIDE_COURSE);\n        const courseId = getCourseId(target);\n        hideCourse(root, courseId);\n        data.originalEvent.preventDefault();\n    });\n\n    root.on(CustomEvents.events.activate, SELECTORS.ACTION_SHOW_COURSE, (e, data) => {\n        const target = $(e.target).closest(SELECTORS.ACTION_SHOW_COURSE);\n        const courseId = getCourseId(target);\n        showCourse(root, courseId);\n        data.originalEvent.preventDefault();\n    });\n\n    // Searching functionality event handlers.\n    const input = page.querySelector(SELECTORS.region.searchInput);\n    const clearIcon = page.querySelector(SELECTORS.region.clearIcon);\n\n    clearIcon.addEventListener('click', () => {\n        input.value = '';\n        input.focus();\n        clearSearch(clearIcon, root);\n    });\n\n    input.addEventListener('input', debounce(() => {\n        if (input.value === '') {\n            clearSearch(clearIcon, root);\n        } else {\n            activeSearch(clearIcon);\n            initializePagedContent(root, searchFunctionalityCurry(), input.value.trim());\n        }\n    }, 1000));\n};\n\n/**\n * Reset the search icon and trigger the init for the block.\n *\n * @param {HTMLElement} clearIcon Our closing icon to manipulate.\n * @param {Object} root The myoverview block container element.\n */\nexport const clearSearch = (clearIcon, root) => {\n    clearIcon.classList.add('d-none');\n    init(root);\n};\n\n/**\n * Change the searching icon to its' active state.\n *\n * @param {HTMLElement} clearIcon Our closing icon to manipulate.\n */\nconst activeSearch = (clearIcon) => {\n    clearIcon.classList.remove('d-none');\n};\n\n/**\n * Intialise the courses list and cards views on page load.\n *\n * @param {object} root The root element for the courses view.\n */\nexport const init = root => {\n    root = $(root);\n    loadedPages = [];\n    lastPage = 0;\n    courseOffset = 0;\n\n    if (!root.attr('data-init')) {\n        const page = document.querySelector(SELECTORS.region.selectBlock);\n        registerEventListeners(root, page);\n        namespace = \"block_myoverview_\" + root.attr('id') + \"_\" + Math.random();\n        root.attr('data-init', true);\n    }\n\n    initializePagedContent(root, standardFunctionalityCurry());\n};\n\n/**\n * Reset the courses views to their original\n * state on first page load.courseOffset\n *\n * This is called when configuration has changed for the event lists\n * to cause them to reload their data.\n *\n * @param {Object} root The root element for the timeline view.\n */\nexport const reset = root => {\n    if (loadedPages.length > 0) {\n        loadedPages.forEach((courseList, index) => {\n            let pagedContentPage = getPagedContentContainer(root, index);\n            renderCourses(root, courseList).then((html, js) => {\n                return Templates.replaceNodeContents(pagedContentPage, html, js);\n            }).catch(Notification.exception);\n        });\n    } else {\n        init(root);\n    }\n};\n"],"names":["TEMPLATES","GROUPINGS","NUMCOURSES_PERPAGE","loadedPages","courseOffset","lastPage","lastLimit","namespace","getFilterValues","root","courseRegion","find","SELECTORS","courseView","region","display","attr","grouping","sort","displaycategories","customfieldname","customfieldvalue","DEFAULT_PAGED_CONTENT_CONFIG","ignoreControlWhileLoading","controlPlacementBottom","persistentLimitKey","getFavouriteIconContainer","courseId","FAVOURITE_ICON","getPagedContentContainer","index","getCourseId","getAddFavouriteMenuItem","getRemoveFavouriteMenuItem","addToFavourites","removeAction","addAction","setCourseFavouriteState","then","success","PubSub","publish","CourseEvents","favourited","removeClass","addClass","iconContainer","isFavouriteIcon","ICON_IS_FAVOURITE","Aria","unhide","notFavourteIcon","ICON_NOT_FAVOURITE","hide","showFavouriteIcon","Notification","alert","catch","exception","removeFromFavourites","unfavorited","hideFavouriteIcon","getHideCourseMenuItem","getShowCourseMenuItem","setCourseHiddenState","status","Repository","updateUserPreferences","preferences","type","value","hideElement","id","pagingBar","jumpto","parseInt","reducedCourse","courses","reduce","accumulator","current","push","newElement","slice","forEach","courseList","popElement","length","pagedContentContainer","PagedContentFactory","resetLastPageNumber","pagedContentPage","renderCourses","html","js","Templates","replaceNodeContents","remove","setFavouriteCourses","result","warnings","course","isfavourite","noCoursesRender","nocoursesimg","newcourseurl","render","coursesData","filters","currentTemplate","Array","isArray","Object","values","map","showcoursecategory","registerPagedEventHandlers","event","PagedContentEvents","SET_ITEMS_PER_PAGE_LIMIT","subscribe","limit","setLimit","itemsPerPageFunc","pagingLimit","itemsPerPage","active","totalCourseCount","filter","pagingOption","pageBuilder","currentPage","pageData","actions","activeSearch","nextPageStart","pageCourses","currentPageLength","remainingCourses","allItemsLoaded","nextoffset","resetGlobals","standardFunctionalityCurry","promises","pagePromise","getEnrolledCoursesByTimeline","offset","classification","getMyCourses","searchFunctionalityCurry","inputValue","searchingPromise","searchValue","searchvalue","getSearchMyCourses","initializePagedContent","promiseFunction","config","eventNamespace","pagedContentPromise","createWithLimit","pagesData","pageNumber","registerEventListeners","page","CustomEvents","define","events","activate","on","ACTION_ADD_FAVOURITE","e","data","favourite","target","closest","originalEvent","preventDefault","ACTION_REMOVE_FAVOURITE","ACTION_HIDE_COURSE","hideAction","showAction","hideCourse","ACTION_SHOW_COURSE","showCourse","input","querySelector","searchInput","clearIcon","addEventListener","focus","clearSearch","trim","classList","add","init","document","selectBlock","Math","random"],"mappings":"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"}